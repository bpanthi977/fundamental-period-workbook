* Read
  #+Name:readDimensions
  #+begin_src lisp :var beam=beamSize slab=slabThickness columns=columnSizes :colnames true
    (in-package :moi)
    (defun supremum (n list)
      (loop for x in list do
	(when (<= n x)
	  (return x))))

    (defparameter *beam-sizes* (make-hash-table))
    (defparameter *slab-thicknesses* (make-hash-table))
    (defparameter *column-sizes-and-Ecs* (make-hash-table :test 'equal))

    (defun beam-size (bw)
      (let ((bw (supremum bw '(3.0d0 3.5d0 3.0d0 4.5d0 5.0d0 5.5d0 6.0d0))))
	(gethash bw *beam-sizes*)))

    (defun slab-thickness (bw)
      (let ((bw (supremum bw '(3.0d0 3.5d0 3.0d0 4.5d0 5.0d0 5.5d0 6.0d0))))
	(gethash bw *slab-thicknesses*)))

    (defun cs-and-Ec (n h bw)
      (let ((h (supremum h '(4)))
	    (bw (supremum bw '(3.0 3.5 4.0 4.5 5.0 5.5 6.0))))
	(gethash (list n h bw) *column-sizes-and-ecs*)))

    (loop for (bw beamW beamT) in beam do
      (setf (gethash (coerce bw 'double-float) *beam-sizes*)
	    (list (coerce beamW 'double-float)
		  (coerce beamT 'double-float))))

    (loop for (bw slabT) in slab do
      (setf (gethash (coerce bw 'double-float) *slab-thicknesses*)
	    (coerce slabT 'double-float)))

    (loop for (n bw cs fck ec) in columns do
      (setf (gethash (list n 4 bw) *column-sizes-and-ecs*) (list cs ec)))

    (defun cs-and-Ecs (n h bw)
      "Uniform Column Widths"
      (destructuring-bind (cs ec) (cs-and-Ec n h bw) ;; (list 0.300d0 25d9))
	(values (make-array n :element-type 'double-float :initial-element (coerce cs 'double-float))
		(make-array n :element-type 'double-float :initial-element (coerce ec 'double-float)))))

    (defun make-structural-geometry2-nondesigned (n h bw)
      (declare (ignore  h bw))
      (make-structural-geometry :column-sizes (make-array n :element-type 'double-float :initial-element 0.300d0)
				:column-elasticity (make-array n :element-type 'double-float :initial-element (ec% 25))
				:beam-width 0.230d0
				:beam-thickness 0.500d0
				:slab-thickness 0.150d0
				:wall-thickness 0.230d0
				:exterior-wall-thickness 0.230d0
				))

    (defun make-structural-geometry2 (n h bw &key (designed t) (typical nil))
      (unless designed
	(return-from make-structural-geometry2 (make-structural-geometry2-nondesigned n h bw)))
      (multiple-value-bind (cs ce) (cs-and-Ecs n h bw)
	(destructuring-bind (beamW beamT) (beam-size bw)
	  (make-structural-geometry :column-sizes cs
				    :column-elasticity ce
				    :beam-width beamW
				    :beam-thickness beamT
				    :slab-thickness (slab-thickness bw)
				    :wall-thickness (if typical 0.115d0 0.230d0)
				    :exterior-wall-thickness 0.230d0
				    ))))


  #+end_src

  #+RESULTS: readDimensions
  : MAKE-STRUCTURAL-GEOMETRY2

  #+RESULTS:
  : MAKE-STRUCTURAL-GEOMETRY2

* Beam Sizes
  #+Name: beamSize 
  | Bay span (m) | Beam Size (Width) (m) | Beam Size (Depth) (m) |
  |--------------+-----------------------+-----------------------|
  |            3 |                 0.230 |                 0.375 |
  |          3.5 |                 0.240 |                 0.400 |
  |            4 |                 0.260 |                 0.430 |
  |          4.5 |                 0.280 |                 0.460 |
  |            5 |                 0.300 |                 0.500 |
  |          5.5 |                 0.330 |                 0.530 |
  |            6 |                 0.360 |                 0.560 |

* Slab Thickness
  #+Name: slabThickness
  | Bay Span (m) | Slab Thickness (m) |
  |--------------+--------------------|
  |            3 |              0.125 |
  |          3.5 |              0.125 |
  |            4 |              0.125 |
  |          4.5 |              0.125 |
  |            5 |              0.150 |
  |          5.5 |              0.150 |
  |            6 |              0.150 |
* Column Sizes and Ec
  from [[file:column-sizes.org::*Importing 2][column sizes.org]]
  
  #+Name: columnSizes
  |  N | Bay Span | Column Size | Fck |              Ec |
  |----+----------+-------------+-----+-----------------|
  |  1 |    3.000 |       0.300 |  25 | 25000000000.000 |
  |  1 |    3.500 |       0.300 |  25 | 25000000000.000 |
  |  1 |    4.000 |       0.300 |  25 | 25000000000.000 |
  |  1 |    4.500 |       0.300 |  25 | 25000000000.000 |
  |  1 |    5.000 |       0.300 |  25 | 25000000000.000 |
  |  1 |    5.500 |       0.300 |  25 | 25000000000.000 |
  |  1 |    6.000 |       0.300 |  25 | 25000000000.000 |
  |  2 |    3.000 |       0.300 |  25 | 25000000000.000 |
  |  2 |    3.500 |       0.300 |  25 | 25000000000.000 |
  |  2 |    4.000 |       0.300 |  25 | 25000000000.000 |
  |  2 |    4.500 |       0.300 |  25 | 25000000000.000 |
  |  2 |    5.000 |       0.300 |  25 | 25000000000.000 |
  |  2 |    5.500 |       0.300 |  25 | 25000000000.000 |
  |  2 |    6.000 |       0.300 |  25 | 25000000000.000 |
  |  3 |    3.000 |       0.300 |  25 | 25000000000.000 |
  |  3 |    3.500 |       0.300 |  25 | 25000000000.000 |
  |  3 |    4.000 |       0.300 |  25 | 25000000000.000 |
  |  3 |    4.500 |       0.300 |  25 | 25000000000.000 |
  |  3 |    5.000 |       0.300 |  25 | 25000000000.000 |
  |  3 |    5.500 |       0.300 |  25 | 25000000000.000 |
  |  3 |    6.000 |       0.300 |  25 | 25000000000.000 |
  |  4 |    3.000 |       0.300 |  25 | 25000000000.000 |
  |  4 |    3.500 |       0.300 |  25 | 25000000000.000 |
  |  4 |    4.000 |       0.300 |  25 | 25000000000.000 |
  |  4 |    4.500 |       0.300 |  25 | 25000000000.000 |
  |  4 |    5.000 |       0.300 |  25 | 25000000000.000 |
  |  4 |    5.500 |       0.350 |  25 | 25000000000.000 |
  |  4 |    6.000 |       0.350 |  25 | 25000000000.000 |
  |  5 |    3.000 |       0.300 |  25 | 25000000000.000 |
  |  5 |    3.500 |       0.300 |  25 | 25000000000.000 |
  |  5 |    4.000 |       0.300 |  25 | 25000000000.000 |
  |  5 |    4.500 |       0.350 |  25 | 25000000000.000 |
  |  5 |    5.000 |       0.350 |  25 | 25000000000.000 |
  |  5 |    5.500 |       0.400 |  25 | 25000000000.000 |
  |  5 |    6.000 |       0.400 |  25 | 25000000000.000 |
  |  6 |    3.000 |       0.300 |  25 | 25000000000.000 |
  |  6 |    3.500 |       0.300 |  25 | 25000000000.000 |
  |  6 |    4.000 |       0.350 |  25 | 25000000000.000 |
  |  6 |    4.500 |       0.350 |  25 | 25000000000.000 |
  |  6 |    5.000 |       0.400 |  25 | 25000000000.000 |
  |  6 |    5.500 |       0.450 |  25 | 25000000000.000 |
  |  6 |    6.000 |       0.450 |  25 | 25000000000.000 |
  |  7 |    3.000 |       0.300 |  25 | 25000000000.000 |
  |  7 |    3.500 |       0.350 |  25 | 25000000000.000 |
  |  7 |    4.000 |       0.350 |  25 | 25000000000.000 |
  |  7 |    4.500 |       0.400 |  25 | 25000000000.000 |
  |  7 |    5.000 |       0.450 |  25 | 25000000000.000 |
  |  7 |    5.500 |       0.450 |  25 | 25000000000.000 |
  |  7 |    6.000 |       0.500 |  25 | 25000000000.000 |
  |  8 |    3.000 |       0.300 |  30 | 27386128902.435 |
  |  8 |    3.500 |       0.350 |  30 | 27386128902.435 |
  |  8 |    4.000 |       0.350 |  30 | 27386128902.435 |
  |  8 |    4.500 |       0.400 |  30 | 27386128902.435 |
  |  8 |    5.000 |       0.400 |  30 | 27386128902.435 |
  |  8 |    5.500 |       0.450 |  30 | 27386128902.435 |
  |  8 |    6.000 |       0.500 |  30 | 27386128902.435 |
  |  9 |    3.000 |       0.300 |  30 | 27386128902.435 |
  |  9 |    3.500 |       0.350 |  30 | 27386128902.435 |
  |  9 |    4.000 |       0.400 |  30 | 27386128902.435 |
  |  9 |    4.500 |       0.400 |  30 | 27386128902.435 |
  |  9 |    5.000 |       0.450 |  30 | 27386128902.435 |
  |  9 |    5.500 |       0.500 |  30 | 27386128902.435 |
  |  9 |    6.000 |       0.500 |  30 | 27386128902.435 |
  | 10 |    3.000 |       0.350 |  30 | 27386128902.435 |
  | 10 |    3.500 |       0.350 |  30 | 27386128902.435 |
  | 10 |    4.000 |       0.400 |  30 | 27386128902.435 |
  | 10 |    4.500 |       0.450 |  30 | 27386128902.435 |
  | 10 |    5.000 |       0.450 |  30 | 27386128902.435 |
  | 10 |    5.500 |       0.500 |  30 | 27386128902.435 |
  | 10 |    6.000 |       0.550 |  30 | 27386128902.435 |
  | 11 |    3.000 |       0.350 |  30 | 27386128902.435 |
  | 11 |    3.500 |       0.400 |  30 | 27386128902.435 |
  | 11 |    4.000 |       0.400 |  30 | 27386128902.435 |
  | 11 |    4.500 |       0.450 |  30 | 27386128902.435 |
  | 11 |    5.000 |       0.500 |  30 | 27386128902.435 |
  | 11 |    5.500 |       0.550 |  30 | 27386128902.435 |
  | 11 |    6.000 |       0.550 |  30 | 27386128902.435 |
  | 12 |    3.000 |       0.350 |  30 | 27386128902.435 |
  | 12 |    3.500 |       0.400 |  30 | 27386128902.435 |
  | 12 |    4.000 |       0.450 |  30 | 27386128902.435 |
  | 12 |    4.500 |       0.500 |  30 | 27386128902.435 |
  | 12 |    5.000 |       0.500 |  30 | 27386128902.435 |
  | 12 |    5.500 |       0.550 |  30 | 27386128902.435 |
  | 12 |    6.000 |       0.600 |  30 | 27386128902.435 |
  | 13 |    3.000 |       0.400 |  30 | 27386128902.435 |
  | 13 |    3.500 |       0.400 |  30 | 27386128902.435 |
  | 13 |    4.000 |       0.450 |  30 | 27386128902.435 |
  | 13 |    4.500 |       0.500 |  30 | 27386128902.435 |
  | 13 |    5.000 |       0.550 |  30 | 27386128902.435 |
  | 13 |    5.500 |       0.600 |  30 | 27386128902.435 |
  | 13 |    6.000 |       0.600 |  30 | 27386128902.435 |
  | 14 |    3.000 |       0.400 |  30 | 27386128902.435 |
  | 14 |    3.500 |       0.450 |  30 | 27386128902.435 |
  | 14 |    4.000 |       0.500 |  30 | 27386128902.435 |
  | 14 |    4.500 |       0.500 |  30 | 27386128902.435 |
  | 14 |    5.000 |       0.550 |  30 | 27386128902.435 |
  | 14 |    5.500 |       0.600 |  30 | 27386128902.435 |
  | 14 |    6.000 |       0.650 |  30 | 27386128902.435 |
  | 15 |    3.000 |       0.400 |  30 | 27386128902.435 |
  | 15 |    3.500 |       0.450 |  30 | 27386128902.435 |
  | 15 |    4.000 |       0.500 |  30 | 27386128902.435 |
  | 15 |    4.500 |       0.550 |  30 | 27386128902.435 |
  | 15 |    5.000 |       0.600 |  30 | 27386128902.435 |
  | 15 |    5.500 |       0.600 |  30 | 27386128902.435 |
  | 15 |    6.000 |       0.650 |  30 | 27386128902.435 |
  | 16 |    3.000 |       0.400 |  30 | 27386128902.435 |
  | 16 |    3.500 |       0.450 |  30 | 27386128902.435 |
  | 16 |    4.000 |       0.500 |  30 | 27386128902.435 |
  | 16 |    4.500 |       0.550 |  30 | 27386128902.435 |
  | 16 |    5.000 |       0.600 |  30 | 27386128902.435 |
  | 16 |    5.500 |       0.650 |  30 | 27386128902.435 |
  | 16 |    6.000 |       0.700 |  30 | 27386128902.435 |

* Archive
** Better presentation of Column Sizes
   #+begin_src lisp :var data=columnSizes :colnames true
     (defun third-col (data n)
       (loop for (nn bs cs . _) in data
	     when (= nn n)
	       collect cs))

     (table 3 
(row "N / Bay Span -->" 3 3.5 4 4.5 5 5.5 6)
       (loop for n from 4 to 16 do
	 (apply #'row n (third-col  data n))))
  
   #+end_src

   #+RESULTS:
   | N / Bay Span --> |     3 | 3.500 |     4 | 4.500 |     5 | 5.500 |     6 |
   |                4 | 0.300 | 0.300 | 0.300 | 0.300 | 0.300 | 0.350 | 0.350 |
   |                5 | 0.300 | 0.300 | 0.300 | 0.350 | 0.350 | 0.400 | 0.400 |
   |                6 | 0.300 | 0.300 | 0.350 | 0.350 | 0.400 | 0.450 | 0.450 |
   |                7 | 0.300 | 0.350 | 0.350 | 0.400 | 0.450 | 0.450 | 0.500 |
   |                8 | 0.300 | 0.350 | 0.350 | 0.400 | 0.400 | 0.450 | 0.500 |
   |                9 | 0.300 | 0.350 | 0.400 | 0.400 | 0.450 | 0.500 | 0.500 |
   |               10 | 0.350 | 0.350 | 0.400 | 0.450 | 0.450 | 0.500 | 0.550 |
   |               11 | 0.350 | 0.400 | 0.400 | 0.450 | 0.500 | 0.550 | 0.550 |
   |               12 | 0.350 | 0.400 | 0.450 | 0.500 | 0.500 | 0.550 | 0.600 |
   |               13 | 0.400 | 0.400 | 0.450 | 0.500 | 0.550 | 0.600 | 0.600 |
   |               14 | 0.400 | 0.450 | 0.500 | 0.500 | 0.550 | 0.600 | 0.650 |
   |               15 | 0.400 | 0.450 | 0.500 | 0.550 | 0.600 | 0.600 | 0.650 |
   |               16 | 0.400 | 0.450 | 0.500 | 0.550 | 0.600 | 0.650 | 0.700 |

** Variable Column Sizes
  #+begin_src lisp
    (defun cs-and-Ecs (n h bw)
      "Variable column widths"
      (loop for i from 0 below n
	    for cs-ec = (cs-and-ec (- n i) h bw)
	    collect (coerce (first cs-ec) 'double-float) into cs
	    collect (coerce (second cs-ec) 'double-float) into ec
	    finally (return (values (make-array n :element-type 'double-float :initial-contents cs)
				    (make-array n :element-type 'double-float :initial-contents ec)))))

  #+end_src

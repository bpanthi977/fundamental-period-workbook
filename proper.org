* Big Data  (Non-designed) (Designed)
** Generate 
 Generate data 
  #+begin_src lisp  :results silent  :exports code  
    (defparameter *bigdata* nil)
    (with-open-file (stream (merge-pathnames "bigdata-nd.csv" *img-path*) :direction :output
									  :if-exists :supersede)
      (let (bigdata)
	(loop for h from 3 to 4 by 0.5 do 
	  (loop for n from 2 to (truncate 40 h) by 1 do
	    (loop for bw from 3 to 6 by 0.5 do 
	      (loop for bx from 2 to 5 do
		(loop for by from bx to 5 
		      for exact = (simple-building-ftp* :number-of-storey n
							:height h
							:bays-x bx
							:bays-y by
							:bay-width bw
							:designed nil)
		      do 
			 (cl-csv:write-csv-row (list n h bw bx by exact)
					       :stream stream)
			 (push (list (list n h bw bx by) exact) bigdata))))))
	(setf *bigdata* bigdata)))

    #+end_src

** Read
   #+begin_src lisp
     (let (bigdata)
       (cl-csv:read-csv (merge-pathnames "bigdata-nd.csv" *img-path*)
			:data-map-fn #'(lambda (data &key csv-reader)
					 (declare (ignore csv-reader))
					 (let (( *read-default-float-format* 'double-float))
					   (read-from-string data)))
			:row-fn #'(lambda (row)
				    (push (list (butlast row) (first (last row)))
					  bigdata)))
       (setf *bigdata* (reverse bigdata)))

nil
   #+end_src  

   #+RESULTS:
   : NIL

* Simple Fit
  T = a*N^b*h^c 
  #+Name: simpleFit 
  #+begin_src lisp 
    (max-fit-%diff (lambda (x a b c)
		     (destructuring-bind (n h bw bx by) x
		       (* a
			  (expt n b)
			  (expt h c))))
		   '(1 1 1))
  #+end_src

  #+RESULTS: simpleFit
  | max %diff |      R^2 |     rmse | Params                       |
  |  8.215055 | 0.995390 | 0.015803 | (0.025761 0.990109 0.917816) |

  Simpler: T = a(Nh)^b
  #+begin_src lisp 
    (max-fit-%diff (lambda (x a b)
		     (destructuring-bind (n h bw bx by) x
		       (* a
			  (expt (* n h) b)
			  )))
		   '(1 1)
		   :save '/simpler-fit)
  #+end_src

  #+RESULTS:
  | max %diff |      R^2 |     rmse | Params              |
  |  9.125395 | 0.994939 | 0.016554 | (0.023657 0.988867) |

  The difference in R^2 of simple vs simpler formula is not much. And they explain almost 99% of the variation.

* N
  Buildings with N=1 are like outliers, and degrade the regression.  So skip them.
  #+begin_src lisp
    (max-fit-%diff (lambda (x a b)
		     (* a (expt (first x) b)))
		   '(1 1)
		   :data (filter-data :h 3.5 :bw 5 :bx 4 :by 4)
		   :save '/simpler-N-fit)
  #+end_src

  #+RESULTS:
  | max %diff |      R^2 |     rmse | Params              |
  |  1.563193 | 0.999980 | 0.001098 | (0.079616 0.989822) |

  #+begin_src lisp :results file 
     (scatter-plot /simpler-N-fit "psimpler-N-fit.png" (filter-data :h 3.5 :bw 5 :bx 4 :by 4))
  #+end_src

  #+RESULTS:
  [[file:./img/psimpler-N-fit.png]]

  So, for any given H,bw,bx,by. The formula T=aN*b explains most of the variation (99.98%).
  The constants a, and b varry as follows.
  #+begin_src lisp 
    (table 5 (row "H" "params" "R^2" "RMSE")
      (loop for h from 3 to 4 by 0.5 do
	    (multiple-value-bind (params r^2 rmse) (fit::fit (lambda (x a b)
							  (* a (expt (first x) b)))
							(filter-data :h h :bw 5 :bx 4 :by 4)
							'(1 1)
							t nil)
	  (row h params r^2 rmse))))
  #+end_src

  #+RESULTS:
  |       H | params            |     R^2 |    RMSE |
  |       3 | (0.06963 0.99158) | 0.99998 | 0.00100 |
  | 3.50000 | (0.07962 0.98982) | 0.99998 | 0.00110 |
  | 4.00000 | (0.08998 0.98875) | 0.99998 | 0.00120 |

After testing with other combinations of bw, bx, and by too. It is clear that, the exponent of N in the formula T =a*N^b remains almost same, withing 0.98 to 0.99. and the explained variation is above 99%.


Thus we have established that when N is independent variable T = aN^b is the formula for timeperiod.  
#+begin_src lisp 
  (fit::partial-fit (mapcar (lambda (d)
			     (destructuring-bind (x tp) d
			       (destructuring-bind (n . r) x
				 (list n r tp))))
			   ,*bigdata*)
		   #'*
		   #'(lambda (n b)
		       (expt n b))
		   '(1)
		   t
		   t
		   1000)
#+end_src
d
#+RESULTS:
| Parameter                          |          Confidence +/- |
| 0.9902215269790791d0               |   0.11424895986490906d0 |
| chisq/dof (for all parameters too) |   0.04756090410494799d0 |
| R^2                                |    0.9999807320702044d0 |
| RMS                                | 0.0010209870527485708d0 |

The best value for the exponent b is found to be 0.9847.
And since RMSE = 0.001, if for a given building the coefficient a is known then T = aN^0.9847 gives timeperiod within 2*0.001 = 0.002 seconds with 95% confidence. 

* h
  after checking with T/N^0.9847 = a h, a(h+b), ah^b. a(h+b) thre goodness of fit are near about. 
  #+begin_src lisp 
    (append
     (max-fit-%diff (lambda (x a b) (* a (+ (second x) b) (expt (first x) 0.9847)))
		    '(1 1))
     (max-fit-%diff (lambda (x a b) (* a (expt (second x) b) (expt (first x) 0.9847)))
		    '(1 1))
     (max-fit-%diff (lambda (x a) (* a (second x) (expt (first x) 0.9847)))
		    '(1)))

  #+end_src

  #+RESULTS:
  | max %diff |      R^2 |     rmse | Params              |
  |  8.351377 | 0.995367 | 0.015839 | (0.021494 0.326036) |
  | max %diff |      R^2 |     rmse | Params              |
  |  8.318934 | 0.995372 | 0.015831 | (0.026214 0.913078) |
  | max %diff |      R^2 |     rmse | Params              |
  |  9.504357 | 0.994718 | 0.016908 | (0.023542)          |

  #+begin_src lisp
    (fit::partial-fit (mapcar (lambda (d)
				 (destructuring-bind (x tp) d
				   (destructuring-bind (n h . r) x
				     (list (list n h) r tp))))
			       *bigdata*)
		       #'*
		       #'(lambda (nh a b)
			   (* a (expt (second nh) b) (expt (first nh) 0.9847)))
		       '(1 1)
		       t
		       t)
  #+end_src

  #+RESULTS:
  | Parameter                          |         Confidence +/- |
  | 0.1610438788730471d0               |   3.002604704245855d12 |
  | 0.9140651928959022d0               |   0.3377979703663743d0 |
  | chisq/dof (for all parameters too) |   0.3301120790771905d0 |
  | R^2                                |    0.999071765548038d0 |
  | RMS                                | 0.007086496042001423d0 |

  #+begin_src lisp 
    (fit::partial-fit (mapcar (lambda (d)
				(destructuring-bind (x tp) d
				  (destructuring-bind (n h . r) x
				    (list (list n h) r tp))))
			      ,*bigdata*)
		      #'*
		      #'(lambda (nh a b)
			  (* a (+ (second nh) b) (expt (first nh) 0.9847)))
		      '(1 1)
		      t
		      t)
  #+end_src

  #+RESULTS:
  | Parameter                          |         Confidence +/- |
  | -0.2184548037124398d0              |  3.9525919728590435d12 |
  | 0.32190177899483896d0              |   1.5605206313727522d0 |
  | chisq/dof (for all parameters too) |   0.3310312276894695d0 |
  | R^2                                |   0.9990665892867178d0 |
  | RMS                                | 0.007106227349686802d0 |
  
  #+begin_src lisp :results file 
    (with-plot "ph1.png"
      (setup :xlabel "h" :ylabel "T/N^{0.9847}")
      (ezplot (mapcar (lambda (d)
		     (destructuring-bind (x tp) d
		       (list (second x) (/ tp (expt (first x) 0.9847)))))
		   (filter-data :bw 5 :bx 4 :by 4))
	      :with '(:point)))
  #+end_src

  #+RESULTS:
  [[file:./img/ph1.png]]

  with T = a (h + b) N^0.9847
  #+begin_src lisp 
    (table 5 (row "BW" "params" "R^2" "RMSE")
      (loop for bw from 3 to 7 by 1 do
	(multiple-value-bind (params r^2 rmse)
	    (fit::fit (lambda (x a b)
			(* a
			   (+ (second x) b)
			   (expt (first x) 0.9847)))
		      (filter-data :bw bw :bx 2  :by 2)
		      '(1 1)
		      t nil)
	  (row bw params r^2 rmse))))
  #+end_src

  #+RESULTS:
  |      BW | params             |     R^2 |    RMSE |
  | 3.00000 | (0.02131 0.47153)  | 0.99948 | 0.04185 |
  | 4.00000 | (0.02432 -0.06094) | 0.99995 | 0.01328 |
  | 5.00000 | (0.02003 0.56685)  | 0.99996 | 0.01130 |
  | 6.00000 | (0.01739 1.16420)  | 0.99996 | 0.01052 |
  | 7.00000 | (0.01566 1.71743)  | 0.99997 | 0.01034 |
  a and b both change with BW, but a changes less with bx,by.
  
  with T = a h^b N^0.9847
  #+begin_src lisp 
    (table 5 (row "BW" "params" "R^2" "RMSE")
      (loop for bw from 3 to 7 by 1 do
	(multiple-value-bind (params r^2 rmse)
	    (fit::fit (lambda (x a b)
			(* a
			   (expt (second x) b)
			   (expt (first x) 0.9847)))
		      (filter-data :bw bw :bx 4 :by 4)
		      '(1 1)
		      t nil)
	  (row bw params r^2 rmse))))
  #+end_src

  #+RESULTS:
  |      BW | params            |     R^2 |    RMSE |
  | 3.00000 | (0.02570 0.92491) | 0.99954 | 0.03822 |
  | 4.00000 | (0.02148 1.05546) | 0.99995 | 0.01218 |
  | 5.00000 | (0.02556 0.89372) | 0.99995 | 0.01165 |
  | 6.00000 | (0.02923 0.78040) | 0.99996 | 0.01119 |
  | 7.00000 | (0.03253 0.69859) | 0.99996 | 0.01092 |

  both changes with BW, and also both change only slightly with bx by 

  #+begin_src lisp 
    (table 5 (row "BW" "params" "R^2" "RMSE")
      (loop for bw from 3 to 7 by 1 do
	(multiple-value-bind (params r^2 rmse)
	    (fit::fit (lambda (x a b)
			(* a
			   (expt (second x) b)
			   (expt (first x) 0.9847)))
		      (filter-data :bw bw)
		      '(1 1)
		      t nil)
	  (row bw params r^2 rmse))))

  #+end_src

  #+RESULTS:
  |      BW | params            |     R^2 |    RMSE |
  | 3.00000 | (0.02771 0.89657) | 0.99753 | 0.29162 |
  | 4.00000 | (0.02308 1.03250) | 0.99765 | 0.28074 |
  | 5.00000 | (0.02751 0.87161) | 0.99739 | 0.28853 |
  | 6.00000 | (0.03153 0.75914) | 0.99717 | 0.29958 |
  | 7.00000 | (0.03513 0.67813) | 0.99698 | 0.31248 |

  #+begin_src lisp 
    (max-fit-%diff (lambda (x a b)
		     (* a
			(expt (second x) b)
			(expt (first x) 0.9847)))
		   '(1 1)
		   :save '/simpler-h-fit)
  #+end_src

  #+RESULTS:
  | max %diff |      R^2 |     rmse | Params              |
  |  8.318934 | 0.995372 | 0.015831 | (0.026214 0.913078) |

* Bwx and Bwy 
  #+begin_src lisp 
  #+end_src

  #+RESULTS:
  : ASYM-SIMPLE-BUILDING

 #+begin_src lisp  :exports code
   (table 10
     (loop for bwx from 3 to 6.01 by 0.2 do 
       (loop for bwy from 3 to 6.01 by 0.2
	     for tp = (asym-building-ftp* :number-of-storey 4
					  :height 3
					  :bays-x 5 
					  :bays-y 5 
					  :bay-width (list bwx bwy)
					  :strut t
					  :designed t
					  :typical t)
	   do (row bwx bwy tp))))
  #+end_src
 #+Name: bwbw
  #+RESULTS:
  |            3 |            3 | 0.2590209203 |
  |            3 | 3.2000000000 | 0.2633407985 |
  |            3 | 3.4000000000 | 0.2692797769 |
  |            3 | 3.6000001000 | 0.2760656935 |
  |            3 | 3.8000002000 | 0.2817420813 |
  |            3 | 4.0000000000 | 0.2873063417 |
  |            3 | 4.2000000000 | 0.2927648701 |
  |            3 | 4.3999996000 | 0.2981234677 |
  |            3 | 4.5999994000 | 0.3111440793 |
  |            3 | 4.7999990000 | 0.3165189595 |
  |            3 | 4.9999990000 | 0.3218040796 |
  |            3 | 5.1999990000 | 0.3024091269 |
  |            3 | 5.3999987000 | 0.3070839166 |
  |            3 | 5.5999985000 | 0.3135853820 |
  |            3 | 5.7999983000 | 0.3181367657 |
  |            3 | 5.9999980000 | 0.3226239426 |
  | 3.2000000000 |            3 | 0.2649899357 |
  | 3.2000000000 | 3.2000000000 | 0.2581038033 |
  | 3.2000000000 | 3.4000000000 | 0.2614316160 |
  | 3.2000000000 | 3.6000001000 | 0.2680208780 |
  | 3.2000000000 | 3.8000002000 | 0.2735018592 |
  | 3.2000000000 | 4.0000000000 | 0.2788751398 |
  | 3.2000000000 | 4.2000000000 | 0.2841468315 |
  | 3.2000000000 | 4.3999996000 | 0.2893224811 |
  | 3.2000000000 | 4.5999994000 | 0.3021423602 |
  | 3.2000000000 | 4.7999990000 | 0.3073402801 |
  | 3.2000000000 | 4.9999990000 | 0.3124517402 |
  | 3.2000000000 | 5.1999990000 | 0.2957737616 |
  | 3.2000000000 | 5.3999987000 | 0.3003290231 |
  | 3.2000000000 | 5.5999985000 | 0.3066339594 |
  | 3.2000000000 | 5.7999983000 | 0.3110673754 |
  | 3.2000000000 | 5.9999980000 | 0.3154384820 |
  | 3.4000000000 |            3 | 0.2709661061 |
  | 3.4000000000 | 3.2000000000 | 0.2638937429 |
  | 3.4000000000 | 3.4000000000 | 0.2563296296 |
  | 3.4000000000 | 3.6000001000 | 0.2602943526 |
  | 3.4000000000 | 3.8000002000 | 0.2655906840 |
  | 3.4000000000 | 4.0000000000 | 0.2707834445 |
  | 3.4000000000 | 4.2000000000 | 0.2758784840 |
  | 3.4000000000 | 4.3999996000 | 0.2808811140 |
  | 3.4000000000 | 4.5999994000 | 0.2934973425 |
  | 3.4000000000 | 4.7999990000 | 0.2985274693 |
  | 3.4000000000 | 4.9999990000 | 0.3034742331 |
  | 3.4000000000 | 5.1999990000 | 0.2886060163 |
  | 3.4000000000 | 5.3999987000 | 0.2930357175 |
  | 3.4000000000 | 5.5999985000 | 0.2991433040 |
  | 3.4000000000 | 5.7999983000 | 0.3034531265 |
  | 3.4000000000 | 5.9999980000 | 0.3077025848 |
  | 3.6000001000 |            3 | 0.2778050311 |
  | 3.6000001000 | 3.2000000000 | 0.2705582338 |
  | 3.6000001000 | 3.4000000000 | 0.2628126816 |
  | 3.6000001000 | 3.6000001000 | 0.2559996480 |
  | 3.6000001000 | 3.8000002000 | 0.2586370322 |
  | 3.6000001000 | 4.0000000000 | 0.2636713880 |
  | 3.6000001000 | 4.2000000000 | 0.2686114093 |
  | 3.6000001000 | 4.3999996000 | 0.2734622019 |
  | 3.6000001000 | 4.5999994000 | 0.2859044741 |
  | 3.6000001000 | 4.7999990000 | 0.2907874144 |
  | 3.6000001000 | 4.9999990000 | 0.2955897034 |
  | 3.6000001000 | 5.1999990000 | 0.2821957805 |
  | 3.6000001000 | 5.3999987000 | 0.2865134456 |
  | 3.6000001000 | 5.5999985000 | 0.2924519502 |
  | 3.6000001000 | 5.7999983000 | 0.2966515977 |
  | 3.6000001000 | 5.9999980000 | 0.3007926111 |
  | 3.8000002000 |            3 | 0.2835171827 |
  | 3.8000002000 | 3.2000000000 | 0.2760911035 |
  | 3.8000002000 | 3.4000000000 | 0.2681602547 |
  | 3.8000002000 | 3.6000001000 | 0.2611845316 |
  | 3.8000002000 | 3.8000002000 | 0.2550244814 |
  | 3.8000002000 | 4.0000000000 | 0.2573946786 |
  | 3.8000002000 | 4.2000000000 | 0.2621980215 |
  | 3.8000002000 | 4.3999996000 | 0.2669149357 |
  | 3.8000002000 | 4.5999994000 | 0.2792071874 |
  | 3.8000002000 | 4.7999990000 | 0.2839603978 |
  | 3.8000002000 | 4.9999990000 | 0.2886353442 |
  | 3.8000002000 | 5.1999990000 | 0.2764561701 |
  | 3.8000002000 | 5.3999987000 | 0.2806736739 |
  | 3.8000002000 | 5.5999985000 | 0.2864658236 |
  | 3.8000002000 | 5.7999983000 | 0.2905670429 |
  | 3.8000002000 | 5.9999980000 | 0.2946111710 |
  | 4.0000000000 |            3 | 0.2891165004 |
  | 4.0000000000 | 3.2000000000 | 0.2815152529 |
  | 4.0000000000 | 3.4000000000 | 0.2734032547 |
  | 4.0000000000 | 3.6000001000 | 0.2662684744 |
  | 4.0000000000 | 3.8000002000 | 0.2599681158 |
  | 4.0000000000 | 4.0000000000 | 0.2543806623 |
  | 4.0000000000 | 4.2000000000 | 0.2565131205 |
  | 4.0000000000 | 4.3999996000 | 0.2611114160 |
  | 4.0000000000 | 4.5999994000 | 0.2732731184 |
  | 4.0000000000 | 4.7999990000 | 0.2779114220 |
  | 4.0000000000 | 4.9999990000 | 0.2824735740 |
  | 4.0000000000 | 5.1999990000 | 0.2713062191 |
  | 4.0000000000 | 5.3999987000 | 0.2754339390 |
  | 4.0000000000 | 5.5999985000 | 0.2810981593 |
  | 4.0000000000 | 5.7999983000 | 0.2851111923 |
  | 4.0000000000 | 5.9999980000 | 0.2890685148 |
  | 4.2000000000 |            3 | 0.2946094200 |
  | 4.2000000000 | 3.2000000000 | 0.2868368518 |
  | 4.2000000000 | 3.4000000000 | 0.2785475884 |
  | 4.2000000000 | 3.6000001000 | 0.2712571534 |
  | 4.2000000000 | 3.8000002000 | 0.2648194826 |
  | 4.2000000000 | 4.0000000000 | 0.2591103166 |
  | 4.2000000000 | 4.2000000000 | 0.2540247991 |
  | 4.2000000000 | 4.3999996000 | 0.2559439707 |
  | 4.2000000000 | 4.5999994000 | 0.2679911083 |
  | 4.2000000000 | 4.7999990000 | 0.2725271343 |
  | 4.2000000000 | 4.9999990000 | 0.2769888881 |
  | 4.2000000000 | 5.1999990000 | 0.2666729738 |
  | 4.2000000000 | 5.3999987000 | 0.2707199618 |
  | 4.2000000000 | 5.5999985000 | 0.2762713291 |
  | 4.2000000000 | 5.7999983000 | 0.2802050935 |
  | 4.2000000000 | 5.9999980000 | 0.2840843873 |
  | 4.3999996000 |            3 | 0.3000017792 |
  | 4.3999996000 | 3.2000000000 | 0.2920614993 |
  | 4.3999996000 | 3.4000000000 | 0.2835986185 |
  | 4.3999996000 | 3.6000001000 | 0.2761557250 |
  | 4.3999996000 | 3.8000002000 | 0.2695835566 |
  | 4.3999996000 | 4.0000000000 | 0.2637551699 |
  | 4.3999996000 | 4.2000000000 | 0.2585634660 |
  | 4.3999996000 | 4.3999996000 | 0.2539184446 |
  | 4.3999996000 | 4.5999994000 | 0.2632680843 |
  | 4.3999996000 | 4.7999990000 | 0.2677126372 |
  | 4.3999996000 | 4.9999990000 | 0.2720845980 |
  | 4.3999996000 | 5.1999990000 | 0.2624920174 |
  | 4.3999996000 | 5.3999987000 | 0.2664661697 |
  | 4.3999996000 | 5.5999985000 | 0.2719171390 |
  | 4.3999996000 | 5.7999983000 | 0.2757794030 |
  | 4.3999996000 | 5.9999980000 | 0.2795883140 |
  | 4.5999994000 |            3 | 0.3131122550 |
  | 4.5999994000 | 3.2000000000 | 0.3050125484 |
  | 4.5999994000 | 3.4000000000 | 0.2963452627 |
  | 4.5999994000 | 3.6000001000 | 0.2887277303 |
  | 4.5999994000 | 3.8000002000 | 0.2820049295 |
  | 4.5999994000 | 4.0000000000 | 0.2760454464 |
  | 4.5999994000 | 4.2000000000 | 0.2707386884 |
  | 4.5999994000 | 4.3999996000 | 0.2659919037 |
  | 4.5999994000 | 4.5999994000 | 0.2617273448 |
  | 4.5999994000 | 4.7999990000 | 0.2633884984 |
  | 4.5999994000 | 4.9999990000 | 0.2676797799 |
  | 4.5999994000 | 5.1999990000 | 0.2587071436 |
  | 4.5999994000 | 5.3999987000 | 0.2626153576 |
  | 4.5999994000 | 5.5999985000 | 0.2679763176 |
  | 4.5999994000 | 5.7999983000 | 0.2717738588 |
  | 4.5999994000 | 5.9999980000 | 0.2755190584 |
  | 4.7999990000 |            3 | 0.3185211346 |
  | 4.7999990000 | 3.2000000000 | 0.3102598457 |
  | 4.7999990000 | 3.4000000000 | 0.3014241989 |
  | 4.7999990000 | 3.6000001000 | 0.2936588888 |
  | 4.7999990000 | 3.8000002000 | 0.2868057685 |
  | 4.7999990000 | 4.0000000000 | 0.2807308050 |
  | 4.7999990000 | 4.2000000000 | 0.2753212200 |
  | 4.7999990000 | 4.3999996000 | 0.2704824408 |
  | 4.7999990000 | 4.5999994000 | 0.2661352015 |
  | 4.7999990000 | 4.7999990000 | 0.2622129663 |
  | 4.7999990000 | 4.9999990000 | 0.2637065857 |
  | 4.7999990000 | 5.1999990000 | 0.2552696275 |
  | 4.7999990000 | 5.3999987000 | 0.2591179402 |
  | 4.7999990000 | 5.5999985000 | 0.2643976376 |
  | 4.7999990000 | 5.7999983000 | 0.2681363836 |
  | 4.7999990000 | 5.9999980000 | 0.2718237065 |
  | 4.9999990000 |            3 | 0.3238396862 |
  | 4.9999990000 | 3.2000000000 | 0.3154198619 |
  | 4.9999990000 | 3.4000000000 | 0.3064189631 |
  | 4.9999990000 | 3.6000001000 | 0.2985085995 |
  | 4.9999990000 | 3.8000002000 | 0.2915275593 |
  | 4.9999990000 | 4.0000000000 | 0.2853392397 |
  | 4.9999990000 | 4.2000000000 | 0.2798287180 |
  | 4.9999990000 | 4.3999996000 | 0.2748996347 |
  | 4.9999990000 | 4.5999994000 | 0.2704712339 |
  | 4.9999990000 | 4.7999990000 | 0.2664757340 |
  | 4.9999990000 | 4.9999990000 | 0.2628560914 |
  | 4.9999990000 | 5.1999990000 | 0.2521373652 |
  | 4.9999990000 | 5.3999987000 | 0.2559310751 |
  | 4.9999990000 | 5.5999985000 | 0.2611369401 |
  | 4.9999990000 | 5.7999983000 | 0.2648220894 |
  | 4.9999990000 | 5.9999980000 | 0.2684566527 |
  | 5.1999990000 |            3 | 0.3034116231 |
  | 5.1999990000 | 3.2000000000 | 0.2982361929 |
  | 5.1999990000 | 3.4000000000 | 0.2910914646 |
  | 5.1999990000 | 3.6000001000 | 0.2846953272 |
  | 5.1999990000 | 3.8000002000 | 0.2789634499 |
  | 5.1999990000 | 4.0000000000 | 0.2738167098 |
  | 5.1999990000 | 4.2000000000 | 0.2691834800 |
  | 5.1999990000 | 4.3999996000 | 0.2650002989 |
  | 5.1999990000 | 4.5999994000 | 0.2612116482 |
  | 5.1999990000 | 4.7999990000 | 0.2577692991 |
  | 5.1999990000 | 4.9999990000 | 0.2546315060 |
  | 5.1999990000 | 5.1999990000 | 0.2517622047 |
  | 5.1999990000 | 5.3999987000 | 0.2530178051 |
  | 5.1999990000 | 5.5999985000 | 0.2581562039 |
  | 5.1999990000 | 5.7999983000 | 0.2617923296 |
  | 5.1999990000 | 5.9999980000 | 0.2653786353 |
  | 5.3999987000 |            3 | 0.3081019099 |
  | 5.3999987000 | 3.2000000000 | 0.3028293788 |
  | 5.3999987000 | 3.4000000000 | 0.2955593139 |
  | 5.3999987000 | 3.6000001000 | 0.2890512360 |
  | 5.3999987000 | 3.8000002000 | 0.2832192038 |
  | 5.3999987000 | 4.0000000000 | 0.2779826250 |
  | 5.3999987000 | 4.2000000000 | 0.2732685671 |
  | 5.3999987000 | 4.3999996000 | 0.2690124269 |
  | 5.3999987000 | 4.5999994000 | 0.2651576970 |
  | 5.3999987000 | 4.7999990000 | 0.2616552956 |
  | 5.3999987000 | 4.9999990000 | 0.2584627432 |
  | 5.3999987000 | 5.1999990000 | 0.2555433444 |
  | 5.3999987000 | 5.3999987000 | 0.2528654152 |
  | 5.3999987000 | 5.5999985000 | 0.2554226882 |
  | 5.3999987000 | 5.7999983000 | 0.2590138272 |
  | 5.3999987000 | 5.9999980000 | 0.2625558488 |
  | 5.5999985000 |            3 | 0.3146297194 |
  | 5.5999985000 | 3.2000000000 | 0.3091970830 |
  | 5.5999985000 | 3.4000000000 | 0.3017284856 |
  | 5.5999985000 | 3.6000001000 | 0.2950502351 |
  | 5.5999985000 | 3.8000002000 | 0.2890708545 |
  | 5.5999985000 | 4.0000000000 | 0.2837054459 |
  | 5.5999985000 | 4.2000000000 | 0.2788777196 |
  | 5.5999985000 | 4.3999996000 | 0.2745204417 |
  | 5.5999985000 | 4.5999994000 | 0.2705750296 |
  | 5.5999985000 | 4.7999990000 | 0.2669907511 |
  | 5.5999985000 | 4.9999990000 | 0.2637238028 |
  | 5.5999985000 | 5.1999990000 | 0.2607364189 |
  | 5.5999985000 | 5.3999987000 | 0.2579960419 |
  | 5.5999985000 | 5.5999985000 | 0.2554745623 |
  | 5.5999985000 | 5.7999983000 | 0.2564578799 |
  | 5.5999985000 | 5.9999980000 | 0.2599591366 |
  | 5.7999983000 |            3 | 0.3191962606 |
  | 5.7999983000 | 3.2000000000 | 0.3136675575 |
  | 5.7999983000 | 3.4000000000 | 0.3060755533 |
  | 5.7999983000 | 3.6000001000 | 0.2992871943 |
  | 5.7999983000 | 3.8000002000 | 0.2932093690 |
  | 5.7999983000 | 4.0000000000 | 0.2877557012 |
  | 5.7999983000 | 4.2000000000 | 0.2828485958 |
  | 5.7999983000 | 4.3999996000 | 0.2784196825 |
  | 5.7999983000 | 4.5999994000 | 0.2744093976 |
  | 5.7999983000 | 4.7999990000 | 0.2707661653 |
  | 5.7999983000 | 4.9999990000 | 0.2674454577 |
  | 5.7999983000 | 5.1999990000 | 0.2644088870 |
  | 5.7999983000 | 5.3999987000 | 0.2616233613 |
  | 5.7999983000 | 5.5999985000 | 0.2590603108 |
  | 5.7999983000 | 5.7999983000 | 0.2566950144 |
  | 5.7999983000 | 5.9999980000 | 0.2575632917 |
  | 5.9999980000 |            3 | 0.3236983811 |
  | 5.9999980000 | 3.2000000000 | 0.3180752017 |
  | 5.9999980000 | 3.4000000000 | 0.3103617352 |
  | 5.9999980000 | 3.6000001000 | 0.3034649984 |
  | 5.9999980000 | 3.8000002000 | 0.2972902731 |
  | 5.9999980000 | 4.0000000000 | 0.2917497293 |
  | 5.9999980000 | 4.2000000000 | 0.2867644876 |
  | 5.9999980000 | 4.3999996000 | 0.2822650596 |
  | 5.9999980000 | 4.5999994000 | 0.2781909165 |
  | 5.9999980000 | 4.7999990000 | 0.2744896521 |
  | 5.9999980000 | 4.9999990000 | 0.2711160256 |
  | 5.9999980000 | 5.1999990000 | 0.2680310369 |
  | 5.9999980000 | 5.3999987000 | 0.2652010683 |
  | 5.9999980000 | 5.5999985000 | 0.2625970969 |
  | 5.9999980000 | 5.7999983000 | 0.2601940104 |
  | 5.9999980000 | 5.9999980000 | 0.2579700393 |


	 #+begin_src gnuplot :var data=bwbw :results file :file ./img/contour-bwbw.png
 # set terminal pngcairo  transparent enhanced font "arial,10" fontscale 1.0 size 600, 400 
 # set output 'contours.1.png'
#set terminal qt
set title ""
 set pm3d map 
 set dgrid3d 16,16 gauss 10e-6,10e-6
 set key at screen 1, 0.9 right top vertical Right noreverse enhanced autotitle nobox
 set style increment default
 set style textbox opaque margins  0.5,  0.5 fc  bgnd noborder linewidth  1.0
  set view 46, 120, 1,1
 set contour base
 set style data lines
 set xlabel "Bay width in X dir" 
 set xrange [ * : * ] noreverse writeback
 set x2range [ * : * ] noreverse writeback
 set ylabel "Bay width in Y dir" 
 set yrange [ * : * ] noreverse writeback
 set y2range [ * : * ] noreverse writeback
 set zlabel "T" 
 set zlabel  offset character 1, 0, 0 font "" textcolor lt -1 norotate
 set zrange [ * : * ] noreverse writeback
 set cbrange [ * : * ] noreverse writeback
 set rrange [ * : * ] noreverse writeback
set palette rgbformulae 22,13,10
 splot data  
	 #+end_src

	 #+RESULTS:
	 [[file:./img/contour-bwbw.png]]

For non designed buildings: 
When both bay count are equal : 
If different bay widths are taken on two sides, then the timeperiod is greater than both the timeperiods obtained by considering either of the bay widths in a symmetrical building.
Hence of ease of use, smaller of the bay widths can be considered.
[[./contour-bwbw-export.png]]

But if bay counts are different, then the Timeperiod surface is similar but the valley line is not Bwx = Bwy line.  
[[./img/contour-bwbw-52.png]]

Changing N doesn't change valley points.
#+begin_src lisp 
  (defun valley-points (bx by)
    (loop for bwx from 3 to 6.01 by 0.2
	  for bwy-tps = (loop for bwy from 3 to 6.01 by 0.2
			      for tp = (asym-building-ftp* :number-of-storey 4
							   :height 4
							   :bays-x bx
							   :bays-y by 
							   :bay-width (list bwx bwy)
							   :strut t
							   :designed nil
							   :typical t)
			      collect (list bwy tp))
	  for minima = (find (reduce #'min bwy-tps :key #'second)
			     bwy-tps :key #'second)
	  collect (cons bwx minima)))
#+end_src

#+RESULTS:
: VALLEY-POINTS

#+begin_src lisp 
(valley-points 5 2)
#+end_src

#+RESULTS:
|         3 | 3.6000001 | 1.4440817937969879d0 |
|       3.2 | 3.8000002 | 1.4589957206537953d0 |
|       3.4 |       4.0 | 1.4521526299649685d0 |
| 3.6000001 |       4.2 | 1.4604148000147976d0 |
| 3.8000002 |       4.2 | 1.4561738026002398d0 |
|       4.0 | 4.3999996 |  1.443013195983881d0 |
|       4.2 |  4.799999 | 1.4251786629445127d0 |
| 4.3999996 |  4.999999 | 1.4069710055963172d0 |
| 4.5999994 |  5.199999 | 1.3913489086352768d0 |
|  4.799999 | 5.3999987 | 1.3825300472217736d0 |
|  4.999999 | 5.5999985 | 1.3793005844478248d0 |
|  5.199999 |  5.999998 | 1.3733036566632344d0 |
| 5.3999987 |  5.999998 |  1.375473132527454d0 |
| 5.5999985 |  5.999998 | 1.3943996290485587d0 |
| 5.7999983 |  5.999998 |  1.413072649471339d0 |
|  5.999998 |  5.999998 | 1.4315020910505016d0 |

#+begin_src lisp :results file 
  (with-plot "valley-lines.png"
    (setup :xlabel "Bwx" :ylabel "Bwy")
    (loop for bx from 2 to 3 do
      (loop for by from bx to 5
	    for line = (valley-points bx by) do
	      (ezplot line :title (format nil "~a,~a" bx by)))))

#+end_src

#+RESULTS:
[[file:./img/valley-lines.png]]

#+begin_src lisp
  (loop for bx from 2 to 5
	with result = nil do 
	  (loop for by from bx to 5 
		for bwxbwytps = (loop for bwx from 3 to 6.01 by 0.2
				      for bwy-tps = (loop for bwy from 3 to 6.01 by 0.2
							  for tp = (asym-building-ftp* :number-of-storey 4
										       :height 4
										       :bays-x bx
										       :bays-y by 
										       :bay-width (list bwx bwy)
										       :strut t
										       :designed nil
										       :typical t)
							  collect (list bwy tp))
				      for minima = (find (reduce #'min bwy-tps :key #'second)
							 bwy-tps :key #'second)
				      collect (cons bwx minima))
		for minima = (find (reduce #'min bwxbwytps :key #'third)
				   bwxbwytps :key #'third)
		do 
		   (push  (cons bx (cons by minima)) result))
	  finally (return result))
#+end_src

#+RESULTS:
| 5 | 5 | 5.999998 |  5.999998 | 1.3903091985155824d0 |
| 4 | 5 | 5.999998 | 5.7999983 | 1.3905527263616788d0 |
| 4 | 4 | 5.999998 |  5.999998 | 1.3770935961460253d0 |
| 3 | 5 | 5.999998 | 5.5999985 |  1.380901238713991d0 |
| 3 | 4 | 5.999998 | 5.7999983 |  1.370874121908982d0 |
| 3 | 3 | 5.999998 |  5.999998 | 1.3570465792606696d0 |
| 2 | 5 | 5.999998 |  5.199999 | 1.3733036566630814d0 |
| 2 | 4 | 5.999998 | 5.3999987 | 1.3558959761796903d0 |
| 2 | 3 | 5.999998 | 5.5999985 |  1.343691708636285d0 |
| 2 | 2 | 5.999998 |  5.999998 | 1.3230198429668576d0 |

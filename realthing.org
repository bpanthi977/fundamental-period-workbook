* Archive 
** Height 
*** Height  (BW = 3)
**** Data 
  #+begin_src lisp  :exports code
  (table 10
    (loop for h from 2.5 to 4 by 0.1
		  for tp = (nth-value 2 
							  (simple-building :number-of-storey 4
											   :height h
											   :bays-x 4
											   :bays-y 4
											   :bay-width 3))
		  do (row  h tp)))
  #+end_src

  #+Name:d1
  #+RESULTS:
  | 2.5000000000 | 0.2217531950 |
  | 2.6000000000 | 0.2322599303 |
  | 2.6999998000 | 0.2429185692 |
  | 2.7999997000 | 0.2537378992 |
  | 2.8999996000 | 0.2647253946 |
  | 2.9999995000 | 0.2758873178 |
  | 3.0999994000 | 0.2872289005 |
  | 3.1999993000 | 0.2987544325 |
  | 3.2999992000 | 0.3086581477 |
  | 3.3999991000 | 0.3158862663 |
  | 3.4999990000 | 0.3230966992 |
  | 3.5999990000 | 0.3302985438 |
  | 3.6999989000 | 0.3374993121 |
  | 3.7999988000 | 0.3447051824 |
  | 3.8999987000 | 0.3519212113 |
  | 3.9999986000 | 0.3591515119 |

  #+begin_src lisp :var data=d1 :results file :exports both
    (plot2 data "height1.png")
  #+end_src

  #+RESULTS:
  [[file:img/height.png]]

**** Fitting
  #+begin_src lisp :var data=d1 :exports both
    (linear-fit :data data)
  #+end_src

  #+RESULTS:
  | Slope                         |   0.09236856 |
  | Intercept                     | -0.003417641 |
  | R^2 (Coeff. of Determination) |   0.98961914 |

  #+begin_src lisp :var data=d1 :exports both
    (power-fit :data data)
  #+end_src

  #+RESULTS:
  | Equation =            |                 a*x^b |
  | Parameter             |        Confidence +/- |
  | 0.09079346587756007d0 |  0.6681619783815247d0 |
  | 1.0049467023445113d0  |   6.013998296095912d0 |
  | chisq/dof             | 0.01753090610698384d0 |
  | R^2                   |  0.9895153069976939d0 |

  #+begin_src lisp :var data=d1  :exports both
    (shifted-power-fit :data data)
  #+end_src

  #+RESULTS:
  | Equation =            |              a*x^b + c |
  | Parameter             |         Confidence +/- |
  | 0.9853393355652089d0  |    472.3308952203977d0 |
  | 0.23057390298302682d0 |    86.29720510136494d0 |
  | -0.9940452444481261d0 |   487.26765613977983d0 |
  | chisq/dof             | 0.009926639723795885d0 |
  | R^2                   |   0.9966383576138582d0 |

  #+begin_src lisp :var data=d1  :exports both
    (almost-linear-fit :data data)
  #+end_src

  #+RESULTS:
  | Equation =            |              a*x^b + c |
  | Parameter             |         Confidence +/- |
  | 0.3036773804496429d0  |    83.33588454369087d0 |
  | 0.5280507111722842d0  |    88.85720177679202d0 |
  | -0.2679180767074862d0 |    95.41540627468346d0 |
  | chisq/dof             | 0.012742929049564998d0 |
  | R^2                   |   0.9944603092494665d0 |

*** Height  (BW = 7)
**** Data 
  #+begin_src lisp  :exports code
  (table 10
    (loop for h from 2.5 to 4 by 0.1
		  for tp = (nth-value 2 
							  (simple-building :number-of-storey 4
											   :height h
											   :bays-x 4
											   :bays-y 4
											   :bay-width 7))
		  do (row  h tp)))
  #+end_src

  #+Name:d2
  #+RESULTS:
  | 2.5000000000 | 0.2337878116 |
  | 2.6000000000 | 0.2399306228 |
  | 2.6999998000 | 0.2460126491 |
  | 2.7999997000 | 0.2520480268 |
  | 2.8999996000 | 0.2580491127 |
  | 2.9999995000 | 0.2640267297 |
  | 3.0999994000 | 0.2699903988 |
  | 3.1999993000 | 0.2759485111 |
  | 3.2999992000 | 0.2819084928 |
  | 3.3999991000 | 0.2878769295 |
  | 3.4999990000 | 0.2938596755 |
  | 3.5999990000 | 0.2998619540 |
  | 3.6999989000 | 0.3058884307 |
  | 3.7999988000 | 0.3119432837 |
  | 3.8999987000 | 0.3180302623 |
  | 3.9999986000 | 0.3241527363 |

  #+begin_src lisp :var data=d2 :results file   :exports both
    (plot2 data "height2.png")
  #+end_src

  #+RESULTS:
  [[file:img/height2.png]]

**** Fitting
  #+begin_src lisp :var data=d2   :exports both
    (linear-fit :data data)
  #+end_src

  #+RESULTS:
  | Slope                         | 0.060030237 |
  | Intercept                     |  0.08385901 |
  | R^2 (Coeff. of Determination) |   1.0000094 |


  #+begin_src lisp :var data=d2   :exports both
    (power-fit :data data)
  #+end_src

  #+RESULTS:
  | Equation =            |                   a*x^b |
  | Parameter             |          Confidence +/- |
  | 0.12299993747128629d0 |     0.940140565487063d0 |
  | 0.6965687100242318d0  |     6.305906445639777d0 |
  | chisq/dof             | 0.0022184029691080798d0 |
  | R^2                   |    0.9995983389495373d0 |

  #+begin_src lisp :var data=d2  :exports both
    (shifted-power-fit :data data)
  #+end_src

  #+RESULTS:
  | Equation =            |             a*x^b + c |
  | Parameter             |        Confidence +/- |
  | 0.05912841991554562d0 |  17.949764167227567d0 |
  | 1.0069766878014927d0  |  138.90902582755817d0 |
  | 0.0851892961214952d0  |    26.6605959595992d0 |
  | chisq/dof             | 3.5440922434078827d-4 |
  | R^2                   |  0.9999897484654929d0 |

  #+begin_src lisp :var data=d2  :exports both
    (almost-linear-fit :data data)
  #+end_src

  #+RESULTS:
  | Equation =            |            a*x^b + c |
  | Parameter             |       Confidence +/- |
  | 0.05912832939862518d0 |  17.94971477810681d0 |
  | 1.006977751192962d0   | 138.90892255782327d0 |
  | 0.08518940593804872d0 | 26.660540433737946d0 |
  | chisq/dof             | 3.544090001882483d-4 |
  | R^2                   | 0.9999897484784604d0 |

*** Height  (BW = 5)
**** Data 
  #+begin_src lisp  :exports code
  (table 10
    (loop for h from 2.5 to 4 by 0.1
		  for tp = (nth-value 2 
							  (simple-building :number-of-storey 4
											   :height h
											   :bays-x 4
											   :bays-y 4
											   :bay-width 5))
		  do (row  h tp)))
  #+end_src

  #+Name:d3
  #+RESULTS:
  | 2.5000000000 | 0.2246908763 |
  | 2.6000000000 | 0.2320441518 |
  | 2.6999998000 | 0.2393884126 |
  | 2.7999997000 | 0.2467378758 |
  | 2.8999996000 | 0.2541050108 |
  | 2.9999995000 | 0.2615007378 |
  | 3.0999994000 | 0.2689346404 |
  | 3.1999993000 | 0.2764151170 |
  | 3.2999992000 | 0.2839495429 |
  | 3.3999991000 | 0.2915443881 |
  | 3.4999990000 | 0.2992053261 |
  | 3.5999990000 | 0.3069373402 |
  | 3.6999989000 | 0.3147447979 |
  | 3.7999988000 | 0.3226315266 |
  | 3.8999987000 | 0.3306008776 |
  | 3.9999986000 | 0.3386557806 |

  #+begin_src lisp :var data=d3 :results file   :exports both
    (plot2 data "height3.png")
  #+end_src

  #+RESULTS:
  [[file:img/height3.png]]

**** Fitting
  #+begin_src lisp :var data=d3   :exports both
    (linear-fit :data data)
  #+end_src

  #+RESULTS:
  | Slope                         | 0.075767435 |
  | Intercept                     |  0.03451127 |
  | R^2 (Coeff. of Determination) |  0.99978864 |

  #+begin_src lisp :var data=d3   :exports both
    (power-fit :data data)
  #+end_src

  #+RESULTS:
  | Equation =            |                   a*x^b |
  | Parameter             |          Confidence +/- |
  | 0.10004814600322454d0 |     0.770430607523301d0 |
  | 0.8763475383593674d0  |      6.31761175831805d0 |
  | chisq/dof             | 0.0031383693220689373d0 |
  | R^2                   |    0.9994954841703274d0 |


  #+begin_src lisp :var data=d3  :exports both
    (shifted-power-fit :data data)
  #+end_src

  #+RESULTS:
  | Equation =           |            a*x^b + c |
  | Parameter            |       Confidence +/- |
  | 0.0473383013591299d0 | 10.527897487465385d0 |
  | 1.2266400233059944d0 |  110.6901252791928d0 |
  | 0.0792313040934591d0 |  18.07486110680344d0 |
  | chisq/dof            | 4.107190234859162d-4 |
  | R^2                  | 0.9999913591526086d0 |

  #+begin_src lisp :var data=d3  :exports both
    (almost-linear-fit :data data)
  #+end_src

  #+RESULTS:
  | Equation =             |             a*x^b + c |
  | Parameter              |        Confidence +/- |
  | 0.047338600382110956d0 |  10.528015353129033d0 |
  | 1.2266351374562017d0   |  110.69048882689391d0 |
  | 0.07923090556613707d0  |  18.075002691131097d0 |
  | chisq/dof              | 4.1072064769509666d-4 |
  | R^2                    |  0.9999913590842672d0 |

*** Conclusion 
  For lower bay width (~3) T vs H is not exactly linear. but for higher bay widths it is exactly linear. 
 In all cases linear fit works reasonably well.

** Number of storeys 
*** N  (BW = 3)
**** Data 
  #+begin_src lisp  :exports code
  (table 10
    (loop for n from 1 to 8 by 1
		  for tp = (nth-value 2 
							  (simple-building :number-of-storey n
											   :height 3
											   :bays-x 4
											   :bays-y 4
											   :bay-width 3))
		  do (row n tp)))
  #+end_src

  #+Name:d2.1
  #+RESULTS:
  | 1 | 0.0836843880 |
  | 2 | 0.1456593783 |
  | 3 | 0.2104495466 |
  | 4 | 0.2758873724 |
  | 5 | 0.3415747526 |
  | 6 | 0.4073843249 |
  | 7 | 0.4732627891 |
  | 8 | 0.5391839086 |

  #+begin_src lisp :var data=d2.1 :results file :exports both
    (plot2 data "n1.png")
  #+end_src

  #+RESULTS:
  [[file:img/n1.png]]

**** Fitting
  #+begin_src lisp :var data=d2.1 :exports both
    (linear-fit :data data)
  #+end_src

  #+RESULTS:
  | Slope                         |  0.06527387 |
  | Intercept                     | 0.015903354 |
  | R^2 (Coeff. of Determination) |  0.99993396 |

  #+begin_src lisp :var data=d2.1  :exports both
    (power-fit :data data)
  #+end_src

  #+RESULTS:
  | Equation =           |                  a*x^b |
  | Parameter            |         Confidence +/- |
  | 0.0752770474610914d0 |   0.4099718264446518d0 |
  | 0.9442025046667525d0 |    2.957928739768187d0 |
  | chisq/dof            | 0.009993029160092244d0 |
  | R^2                  |   0.9994419952715301d0 |

  #+begin_src lisp :var data=d2.1  :exports both
    (shifted-power-fit :data data)
  #+end_src

  #+RESULTS:
  | Equation =             |               a*x^b + c |
  | Parameter              |          Confidence +/- |
  | 0.06085765949136005d0  |    1.3373931950892783d0 |
  | 1.0291970541580804d0   |     9.045335601746842d0 |
  | 0.022260886754497937d0 |     2.088455216394256d0 |
  | chisq/dof              | 0.0012503970804263744d0 |
  | R^2                    |    0.9999912634599599d0 |

*** N  (BW = 7)
**** Data 
  #+begin_src lisp  :exports code
  (table 10
    (loop for n from 1 to 8 by 1
		  for tp = (nth-value 2 
							  (simple-building :number-of-storey n
											   :height 3
											   :bays-x 4
											   :bays-y 4
											   :bay-width 7))
		  do (row n tp)))
  #+end_src

  #+Name:d2.2
  #+RESULTS:
  | 1 | 0.0833730839 |
  | 2 | 0.1417870157 |
  | 3 | 0.2026121372 |
  | 4 | 0.2640267584 |
  | 5 | 0.3256721652 |
  | 6 | 0.3874313069 |
  | 7 | 0.4492547801 |
  | 8 | 0.5111181580 |

  #+begin_src lisp :var data=d2.2 :results file :exports both
    (plot2 data "n2.png")
  #+end_src

  #+RESULTS:
  [[file:img/n2.png]]

**** Fitting
  #+begin_src lisp :var data=d2.2 :exports both
    (linear-fit :data data)
  #+end_src

  #+RESULTS:
  | Slope                         | 0.061281614 |
  | Intercept                     | 0.019892156 |
  | R^2 (Coeff. of Determination) |   0.9999418 |

  #+begin_src lisp :var data=d2.2  :exports both
    (power-fit :data data)
  #+end_src

  #+RESULTS:
  | Equation =           |                  a*x^b |
  | Parameter            |         Confidence +/- |
  | 0.0740885565680226d0 |  0.41789007287237206d0 |
  | 0.9255028347427562d0 |     3.06943335122158d0 |
  | chisq/dof            | 0.011225313092202293d0 |
  | R^2                  |   0.9992011559007709d0 |

  #+begin_src lisp :var data=d2.2  :exports both
    (shifted-power-fit :data data)
  #+end_src

  #+RESULTS:
  | Equation =             |               a*x^b + c |
  | Parameter              |          Confidence +/- |
  | 0.05736544619006033d0  |    1.3427028413991402d0 |
  | 1.0275159481175615d0   |     9.629538428151196d0 |
  | 0.025526689031185892d0 |    2.0936636889347335d0 |
  | chisq/dof              | 0.0010660822175573193d0 |
  | R^2                    |    0.9999927947923056d0 |

*** Conclusion 
 T vs N is linear in both case. 

** H and N 
  #+begin_src lisp  :exports code
    (table 10
	  (loop for n from 1 to 8 by 1 do 
	    (loop for h from 2.5 to 4 by 0.1 
			  for tp = (nth-value 2 
								  (simple-building :number-of-storey n
												   :height h
												   :bays-x 4
												   :bays-y 4
												   :bay-width 7))
			  do (row n h tp))))
  #+end_src

 #+Name: d3.1
  #+RESULTS:
  | 1.0000000000 | 2.5000000000 | 0.0745644527 |
  | 1.0000000000 | 2.6000000000 | 0.0763622333 |
  | 1.0000000000 | 2.6999998000 | 0.0781375437 |
  | 1.0000000000 | 2.7999997000 | 0.0798951239 |
  | 1.0000000000 | 2.8999996000 | 0.0816391011 |
  | 1.0000000000 | 2.9999995000 | 0.0833730756 |
  | 1.0000000000 | 3.0999994000 | 0.0851002018 |
  | 1.0000000000 | 3.1999993000 | 0.0868232484 |
  | 1.0000000000 | 3.2999992000 | 0.0885446556 |
  | 1.0000000000 | 3.3999991000 | 0.0902665780 |
  | 1.0000000000 | 3.4999990000 | 0.0919909232 |
  | 1.0000000000 | 3.5999990000 | 0.0937193852 |
  | 1.0000000000 | 3.6999989000 | 0.0954534710 |
  | 1.0000000000 | 3.7999988000 | 0.0971945239 |
  | 1.0000000000 | 3.8999987000 | 0.0989437438 |
  | 1.0000000000 | 3.9999986000 | 0.1007022045 |
  | 2.0000000000 | 2.5000000000 | 0.1261038925 |
  | 2.0000000000 | 2.6000000000 | 0.1292954912 |
  | 2.0000000000 | 2.6999998000 | 0.1324522900 |
  | 2.0000000000 | 2.7999997000 | 0.1355820837 |
  | 2.0000000000 | 2.8999996000 | 0.1386916725 |
  | 2.0000000000 | 2.9999995000 | 0.1417870008 |
  | 2.0000000000 | 3.0999994000 | 0.1448732872 |
  | 2.0000000000 | 3.1999993000 | 0.1479551219 |
  | 2.0000000000 | 3.2999992000 | 0.1510365589 |
  | 2.0000000000 | 3.3999991000 | 0.1541211862 |
  | 2.0000000000 | 3.4999990000 | 0.1572121865 |
  | 2.0000000000 | 3.5999990000 | 0.1603123936 |
  | 2.0000000000 | 3.6999989000 | 0.1634243334 |
  | 2.0000000000 | 3.7999988000 | 0.1665502632 |
  | 2.0000000000 | 3.8999987000 | 0.1696922043 |
  | 2.0000000000 | 3.9999986000 | 0.1728519693 |
  | 3.0000000000 | 2.5000000000 | 0.1796908805 |
  | 3.0000000000 | 2.6000000000 | 0.1843499730 |
  | 3.0000000000 | 2.6999998000 | 0.1889613657 |
  | 3.0000000000 | 2.7999997000 | 0.1935360092 |
  | 3.0000000000 | 2.8999996000 | 0.1980834686 |
  | 3.0000000000 | 2.9999995000 | 0.2026121154 |
  | 3.0000000000 | 3.0999994000 | 0.2071293085 |
  | 3.0000000000 | 3.1999993000 | 0.2116415286 |
  | 3.0000000000 | 3.2999992000 | 0.2161545070 |
  | 3.0000000000 | 3.3999991000 | 0.2206733223 |
  | 3.0000000000 | 3.4999990000 | 0.2252024858 |
  | 3.0000000000 | 3.5999990000 | 0.2297460192 |
  | 3.0000000000 | 3.6999989000 | 0.2343075123 |
  | 3.0000000000 | 3.7999988000 | 0.2388901772 |
  | 3.0000000000 | 3.8999987000 | 0.2434968941 |
  | 3.0000000000 | 3.9999986000 | 0.2481302497 |
  | 4.0000000000 | 2.5000000000 | 0.2337878116 |
  | 4.0000000000 | 2.6000000000 | 0.2399306228 |
  | 4.0000000000 | 2.6999998000 | 0.2460126491 |
  | 4.0000000000 | 2.7999997000 | 0.2520480268 |
  | 4.0000000000 | 2.8999996000 | 0.2580491127 |
  | 4.0000000000 | 2.9999995000 | 0.2640267297 |
  | 4.0000000000 | 3.0999994000 | 0.2699903988 |
  | 4.0000000000 | 3.1999993000 | 0.2759485111 |
  | 4.0000000000 | 3.2999992000 | 0.2819084928 |
  | 4.0000000000 | 3.3999991000 | 0.2878769295 |
  | 4.0000000000 | 3.4999990000 | 0.2938596755 |
  | 4.0000000000 | 3.5999990000 | 0.2998619540 |
  | 4.0000000000 | 3.6999989000 | 0.3058884307 |
  | 4.0000000000 | 3.7999988000 | 0.3119432837 |
  | 4.0000000000 | 3.8999987000 | 0.3180302623 |
  | 4.0000000000 | 3.9999986000 | 0.3241527363 |
  | 5.0000000000 | 2.5000000000 | 0.2880856498 |
  | 5.0000000000 | 2.6000000000 | 0.2957182763 |
  | 5.0000000000 | 2.6999998000 | 0.3032769606 |
  | 5.0000000000 | 2.7999997000 | 0.3107790372 |
  | 5.0000000000 | 2.8999996000 | 0.3182396654 |
  | 5.0000000000 | 2.9999995000 | 0.3256721295 |
  | 5.0000000000 | 3.0999994000 | 0.3330881213 |
  | 5.0000000000 | 3.1999993000 | 0.3404979500 |
  | 5.0000000000 | 3.2999992000 | 0.3479107441 |
  | 5.0000000000 | 3.3999991000 | 0.3553346025 |
  | 5.0000000000 | 3.4999990000 | 0.3627767284 |
  | 5.0000000000 | 3.5999990000 | 0.3702435514 |
  | 5.0000000000 | 3.6999989000 | 0.3777408181 |
  | 5.0000000000 | 3.7999988000 | 0.3852736769 |
  | 5.0000000000 | 3.8999987000 | 0.3928467501 |
  | 5.0000000000 | 3.9999986000 | 0.4004641941 |
  | 6.0000000000 | 2.5000000000 | 0.3424828065 |
  | 6.0000000000 | 2.6000000000 | 0.3516081887 |
  | 6.0000000000 | 2.6999998000 | 0.3606464371 |
  | 6.0000000000 | 2.7999997000 | 0.3696180903 |
  | 6.0000000000 | 2.8999996000 | 0.3785411158 |
  | 6.0000000000 | 2.9999995000 | 0.3874312641 |
  | 6.0000000000 | 3.0999994000 | 0.3963024021 |
  | 6.0000000000 | 3.1999993000 | 0.4051667610 |
  | 6.0000000000 | 3.2999992000 | 0.4140351749 |
  | 6.0000000000 | 3.3999991000 | 0.4229172592 |
  | 6.0000000000 | 3.4999990000 | 0.4318215690 |
  | 6.0000000000 | 3.5999990000 | 0.4407557430 |
  | 6.0000000000 | 3.6999989000 | 0.4497266106 |
  | 6.0000000000 | 3.7999988000 | 0.4587402927 |
  | 6.0000000000 | 3.8999987000 | 0.4678022865 |
  | 6.0000000000 | 3.9999986000 | 0.4769175370 |
  | 7.0000000000 | 2.5000000000 | 0.3969362432 |
  | 7.0000000000 | 2.6000000000 | 0.4075560226 |
  | 7.0000000000 | 2.6999998000 | 0.4180754577 |
  | 7.0000000000 | 2.7999997000 | 0.4285182948 |
  | 7.0000000000 | 2.8999996000 | 0.4389053125 |
  | 7.0000000000 | 2.9999995000 | 0.4492547304 |
  | 7.0000000000 | 3.0999994000 | 0.4595825927 |
  | 7.0000000000 | 3.1999993000 | 0.4699030551 |
  | 7.0000000000 | 3.2999992000 | 0.4802286593 |
  | 7.0000000000 | 3.3999991000 | 0.4905705389 |
  | 7.0000000000 | 3.4999990000 | 0.5009386021 |
  | 7.0000000000 | 3.5999990000 | 0.5113416983 |
  | 7.0000000000 | 3.6999989000 | 0.5217877414 |
  | 7.0000000000 | 3.7999988000 | 0.5322838256 |
  | 7.0000000000 | 3.8999987000 | 0.5428363242 |
  | 7.0000000000 | 3.9999986000 | 0.5534509715 |
  | 8.0000000000 | 2.5000000000 | 0.4514246321 |
  | 8.0000000000 | 2.6000000000 | 0.4635398178 |
  | 8.0000000000 | 2.6999998000 | 0.4755414375 |
  | 8.0000000000 | 2.7999997000 | 0.4874564469 |
  | 8.0000000000 | 2.8999996000 | 0.4993084382 |
  | 8.0000000000 | 2.9999995000 | 0.5111181012 |
  | 8.0000000000 | 3.0999994000 | 0.5229036595 |
  | 8.0000000000 | 3.1999993000 | 0.5346811943 |
  | 8.0000000000 | 3.2999992000 | 0.5464649559 |
  | 8.0000000000 | 3.3999991000 | 0.5582675975 |
  | 8.0000000000 | 3.4999990000 | 0.5701003814 |
  | 8.0000000000 | 3.5999990000 | 0.5819733687 |
  | 8.0000000000 | 3.6999989000 | 0.5938955580 |
  | 8.0000000000 | 3.7999988000 | 0.6058750181 |
  | 8.0000000000 | 3.8999987000 | 0.6179189987 |
  | 8.0000000000 | 3.9999986000 | 0.6300340242 |
*** Linear 
  #+begin_src lisp :var data=d3.1  :exports both
 ;; T = m (N*H) + c
    (linear-fit :data (mapcar (lambda (r) (list (* (first r) (second r))
										   (third r)))
							  data))
  #+end_src

  #+RESULTS:
  | Slope                         | 0.019519212 |
  | Intercept                     | 0.026998103 |
  | R^2 (Coeff. of Determination) |   0.9945201 |

*** Power 
  #+begin_src lisp :var data=d3.1  :exports both
 ;; T = a + (N*H)^b
    (power-fit :data (mapcar (lambda (r) (list (* (first r) (second r))
										   (third r)))
							  data))
  #+end_src

  #+RESULTS:
  | Equation =             |                  a*x^b |
  | Parameter              |         Confidence +/- |
  | 0.028503800511576943d0 | 0.056810687720310345d0 |
  | 0.8976543319851938d0   |   0.6523866757449339d0 |
  | chisq/dof              |  0.12292856502421429d0 |
  | R^2                    |   0.9949374723410026d0 |

  No better than linear. 
*** Linear Product 
    #+begin_src lisp :var data=d3.1  :exports both
 ;; T = (a + b n)( c + d h)
	  (fit (lambda (x a b c d)
			 (* (+ a (* b (first x)))
			    (+ c (* d (first x)))))
		   '(1 1 1 1)
		   :data (mapcar (lambda (r) (list (list (first r) (second r))
									  (third r)))
						 data))
    #+end_src

    #+RESULTS:
    |                Parameter |        Confidence +/- |
    |     -6.916868589820298d0 |  7.421006820785294d13 |
    |  -0.023691237469391346d0 | 2.5417981066137207d11 |
    | -0.0034185441133380303d0 |  3.667705819880745d10 |
    |  -0.009090957756292796d0 |  9.753555187705492d10 |
    |                chisq/dof |  0.3928521846495887d0 |
    |                      R^2 |  0.9482964777306515d0 |

 Works well 

*** Multilinear 
   #+begin_src lisp :var data=d3.1  :exports both
	 ;; T = (a + b n + c h)
		  (fit (lambda (x a b c)
				 (+ a (* b (first x)) (* c (second x))))
			   '(1 1 1)
			   :data (mapcar (lambda (r) (list (list (first r) (second r))
										  (third r)))
							 data))
    #+end_src

    #+RESULTS:
    |              Parameter |         Confidence +/- |
    | -0.19916803694583007d0 |   0.6528967791349675d0 |
    |  0.06490033430357774d0 | 0.038575837490522964d0 |
    |  0.06756402005137227d0 |   0.1917414300707199d0 |
    |              chisq/dof |  0.17404760993051355d0 |
    |                    R^2 |   0.9898515921503267d0 |

 Good!! 

*** Power (BW=3)
  #+begin_src lisp  :exports code
    (table 10
	  (loop for n from 1 to 8 by 1 do 
	    (loop for h from 2.5 to 4 by 0.1 
			  for tp = (nth-value 2 
								  (simple-building :number-of-storey n
												   :height h
												   :bays-x 4
												   :bays-y 4
												   :bay-width 3))
			  do (row n h tp))))
  #+end_src 

  #+Name: d3.2
  #+RESULTS:
  | 1.0000000000 | 2.5000000000 | 0.0679591176 |
  | 1.0000000000 | 2.6000000000 | 0.0710203977 |
  | 1.0000000000 | 2.6999998000 | 0.0741209302 |
  | 1.0000000000 | 2.7999997000 | 0.0772635615 |
  | 1.0000000000 | 2.8999996000 | 0.0804507036 |
  | 1.0000000000 | 2.9999995000 | 0.0836843722 |
  | 1.0000000000 | 3.0999994000 | 0.0869662478 |
  | 1.0000000000 | 3.1999993000 | 0.0902977074 |
  | 1.0000000000 | 3.2999992000 | 0.0931339503 |
  | 1.0000000000 | 3.3999991000 | 0.0951602426 |
  | 1.0000000000 | 3.4999990000 | 0.0971800267 |
  | 1.0000000000 | 3.5999990000 | 0.0991961240 |
  | 1.0000000000 | 3.6999989000 | 0.1012108577 |
  | 1.0000000000 | 3.7999988000 | 0.1032261344 |
  | 1.0000000000 | 3.8999987000 | 0.1052435112 |
  | 1.0000000000 | 3.9999986000 | 0.1072642521 |
  | 2.0000000000 | 2.5000000000 | 0.1175737415 |
  | 2.0000000000 | 2.6000000000 | 0.1230307465 |
  | 2.0000000000 | 2.6999998000 | 0.1285633935 |
  | 2.0000000000 | 2.7999997000 | 0.1341764529 |
  | 2.0000000000 | 2.8999996000 | 0.1398739752 |
  | 2.0000000000 | 2.9999995000 | 0.1456593500 |
  | 2.0000000000 | 3.0999994000 | 0.1515354063 |
  | 2.0000000000 | 3.1999993000 | 0.1575044632 |
  | 2.0000000000 | 3.2999992000 | 0.1626152084 |
  | 2.0000000000 | 3.3999991000 | 0.1663147310 |
  | 2.0000000000 | 3.4999990000 | 0.1700043489 |
  | 2.0000000000 | 3.5999990000 | 0.1736888984 |
  | 2.0000000000 | 3.6999989000 | 0.1773723677 |
  | 2.0000000000 | 3.7999988000 | 0.1810580324 |
  | 2.0000000000 | 3.8999987000 | 0.1847485701 |
  | 2.0000000000 | 3.9999986000 | 0.1884461561 |
  | 3.0000000000 | 2.5000000000 | 0.1694050510 |
  | 3.0000000000 | 2.6000000000 | 0.1773741763 |
  | 3.0000000000 | 2.6999998000 | 0.1854569153 |
  | 3.0000000000 | 2.7999997000 | 0.1936600366 |
  | 3.0000000000 | 2.8999996000 | 0.2019892938 |
  | 3.0000000000 | 2.9999995000 | 0.2104495052 |
  | 3.0000000000 | 3.0999994000 | 0.2190446948 |
  | 3.0000000000 | 3.1999993000 | 0.2277781616 |
  | 3.0000000000 | 3.2999992000 | 0.2352734910 |
  | 3.0000000000 | 3.3999991000 | 0.2407285818 |
  | 3.0000000000 | 3.4999990000 | 0.2461699216 |
  | 3.0000000000 | 3.5999990000 | 0.2516044655 |
  | 3.0000000000 | 3.6999989000 | 0.2570379532 |
  | 3.0000000000 | 3.7999988000 | 0.2624751035 |
  | 3.0000000000 | 3.8999987000 | 0.2679197764 |
  | 3.0000000000 | 3.9999986000 | 0.2733751102 |
  | 4.0000000000 | 2.5000000000 | 0.2217531950 |
  | 4.0000000000 | 2.6000000000 | 0.2322599303 |
  | 4.0000000000 | 2.6999998000 | 0.2429185692 |
  | 4.0000000000 | 2.7999997000 | 0.2537378992 |
  | 4.0000000000 | 2.8999996000 | 0.2647253946 |
  | 4.0000000000 | 2.9999995000 | 0.2758873178 |
  | 4.0000000000 | 3.0999994000 | 0.2872289005 |
  | 4.0000000000 | 3.1999993000 | 0.2987544325 |
  | 4.0000000000 | 3.2999992000 | 0.3086581477 |
  | 4.0000000000 | 3.3999991000 | 0.3158862663 |
  | 4.0000000000 | 3.4999990000 | 0.3230966992 |
  | 4.0000000000 | 3.5999990000 | 0.3302985438 |
  | 4.0000000000 | 3.6999989000 | 0.3374993121 |
  | 4.0000000000 | 3.7999988000 | 0.3447051824 |
  | 4.0000000000 | 3.8999987000 | 0.3519212113 |
  | 4.0000000000 | 3.9999986000 | 0.3591515119 |
  | 5.0000000000 | 2.5000000000 | 0.2743010267 |
  | 5.0000000000 | 2.6000000000 | 0.2873550814 |
  | 5.0000000000 | 2.6999998000 | 0.3005994540 |
  | 5.0000000000 | 2.7999997000 | 0.3140449590 |
  | 5.0000000000 | 2.8999996000 | 0.3277007984 |
  | 5.0000000000 | 2.9999995000 | 0.3415746847 |
  | 5.0000000000 | 3.0999994000 | 0.3556730624 |
  | 5.0000000000 | 3.1999993000 | 0.3700012162 |
  | 5.0000000000 | 3.2999992000 | 0.3823223933 |
  | 5.0000000000 | 3.3999991000 | 0.3913301788 |
  | 5.0000000000 | 3.4999990000 | 0.4003163147 |
  | 5.0000000000 | 3.5999990000 | 0.4092920499 |
  | 5.0000000000 | 3.6999989000 | 0.4182666758 |
  | 5.0000000000 | 3.7999988000 | 0.4272478367 |
  | 5.0000000000 | 3.8999987000 | 0.4362417914 |
  | 5.0000000000 | 3.9999986000 | 0.4452536317 |
  | 6.0000000000 | 2.5000000000 | 0.3269467165 |
  | 6.0000000000 | 2.6000000000 | 0.3425528257 |
  | 6.0000000000 | 2.6999998000 | 0.3583877290 |
  | 6.0000000000 | 2.7999997000 | 0.3744642722 |
  | 6.0000000000 | 2.8999996000 | 0.3907933888 |
  | 6.0000000000 | 2.9999995000 | 0.4073842437 |
  | 6.0000000000 | 3.0999994000 | 0.4242444969 |
  | 6.0000000000 | 3.1999993000 | 0.4413804301 |
  | 6.0000000000 | 3.2999992000 | 0.4561235031 |
  | 6.0000000000 | 3.3999991000 | 0.4669141984 |
  | 6.0000000000 | 3.4999990000 | 0.4776792670 |
  | 6.0000000000 | 3.5999990000 | 0.4884321140 |
  | 6.0000000000 | 3.6999989000 | 0.4991838137 |
  | 6.0000000000 | 3.7999988000 | 0.5099434799 |
  | 6.0000000000 | 3.8999987000 | 0.5207185753 |
  | 6.0000000000 | 3.9999986000 | 0.5315151730 |
  | 7.0000000000 | 2.5000000000 | 0.3796475950 |
  | 7.0000000000 | 2.6000000000 | 0.3978084236 |
  | 7.0000000000 | 2.6999998000 | 0.4162365585 |
  | 7.0000000000 | 2.7999997000 | 0.4349468787 |
  | 7.0000000000 | 2.8999996000 | 0.4539520509 |
  | 7.0000000000 | 2.9999995000 | 0.4732626946 |
  | 7.0000000000 | 3.0999994000 | 0.4928876863 |
  | 7.0000000000 | 3.1999993000 | 0.5128343060 |
  | 7.0000000000 | 3.2999992000 | 0.5300017747 |
  | 7.0000000000 | 3.3999991000 | 0.5425772081 |
  | 7.0000000000 | 3.4999990000 | 0.5551230313 |
  | 7.0000000000 | 3.5999990000 | 0.5676548076 |
  | 7.0000000000 | 3.6999989000 | 0.5801853965 |
  | 7.0000000000 | 3.7999988000 | 0.5927253824 |
  | 7.0000000000 | 3.8999987000 | 0.6052834339 |
  | 7.0000000000 | 3.9999986000 | 0.6178666063 |
  | 8.0000000000 | 2.5000000000 | 0.4323826471 |
  | 8.0000000000 | 2.6000000000 | 0.4530998442 |
  | 8.0000000000 | 2.6999998000 | 0.4741228820 |
  | 8.0000000000 | 2.7999997000 | 0.4954686743 |
  | 8.0000000000 | 2.8999996000 | 0.5171516222 |
  | 8.0000000000 | 2.9999995000 | 0.5391838007 |
  | 8.0000000000 | 3.0999994000 | 0.5615753039 |
  | 8.0000000000 | 3.1999993000 | 0.5843344106 |
  | 8.0000000000 | 3.2999992000 | 0.6039278235 |
  | 8.0000000000 | 3.3999991000 | 0.6182891285 |
  | 8.0000000000 | 3.4999990000 | 0.6326168356 |
  | 8.0000000000 | 3.5999990000 | 0.6469286680 |
  | 8.0000000000 | 3.6999989000 | 0.6612392718 |
  | 8.0000000000 | 3.7999988000 | 0.6755607029 |
  | 8.0000000000 | 3.8999987000 | 0.6899028367 |
  | 8.0000000000 | 3.9999986000 | 0.7042737112 |

  #+begin_src lisp :var data=d3.2 :exports both
	 ;; T = (a + b n + c h)
  (power-fit :data (mapcar (lambda (r) (list (* (first r) (second r))
										   (third r)))
							  data))
  #+end_src

  #+RESULTS:
  | Equation =            |                 a*x^b |
  | Parameter             |        Confidence +/- |
  | 0.02574129505941091d0 | 0.04958293366509272d0 |
  | 0.9561076386340954d0  |  0.6274222007610571d0 |
  | chisq/dof             | 0.08297540974372429d0 |
  | R^2                   |  0.9981378222767583d0 |

*** Conclusion 
 Timeperiod is power function in N and H (for our range of values)

** Bay Count 
  #+begin_src lisp  :exports code
    (table 10
	  (loop for n_bx from 5 to 20
		    for tp3 = (nth-value 2 
								 (simple-building :number-of-storey 4
												  :height 3
												  :bays-x n_bx
												  :bays-y 3
												  :bay-width 3
												  :strut t))
		    for tp5 = (nth-value 2 
								 (simple-building :number-of-storey 4
												  :height 3
												  :bays-x n_bx
												  :bays-y 5
												  :bay-width 3
												  :strut t))
		    for tp10 = (nth-value 2 
								 (simple-building :number-of-storey 4
												  :height 3
												  :bays-x n_bx
												  :bays-y 10
												  :bay-width 3
												  :strut t))
		    do (row n_bx tp3 tp5 tp10)))
  #+end_src

  #+Name:d4.1
  #+RESULTS:
  |  5.0000000000 | 0.2811721499 | 0.2779347529 | 0.2851664934 |
  |  6.0000000000 | 0.2835397784 | 0.2802276811 | 0.2842669785 |
  |  7.0000000000 | 0.2853026144 | 0.2819351491 | 0.2836163901 |
  |  8.0000000000 | 0.2866662192 | 0.2832560693 | 0.2831239546 |
  |  9.0000000000 | 0.2877524535 | 0.2843083900 | 0.2827382517 |
  | 10.0000000000 | 0.2886381520 | 0.2851664934 | 0.2824279729 |
  | 11.0000000000 | 0.2893741645 | 0.2858796134 | 0.2831229127 |
  | 12.0000000000 | 0.2899954861 | 0.2864816372 | 0.2837096102 |
  | 13.0000000000 | 0.2905269906 | 0.2869966531 | 0.2842115306 |
  | 14.0000000000 | 0.2909868430 | 0.2874422544 | 0.2846458130 |
  | 15.0000000000 | 0.2913886188 | 0.2878315900 | 0.2850252677 |
  | 16.0000000000 | 0.2917426677 | 0.2881746849 | 0.2853596620 |
  | 17.0000000000 | 0.2920570178 | 0.2884793158 | 0.2856565730 |
  | 18.0000000000 | 0.2923379920 | 0.2887516081 | 0.2859219690 |
  | 19.0000000000 | 0.2925906382 | 0.2889964519 | 0.2861606152 |
  | 20.0000000000 | 0.2928190351 | 0.2892177988 | 0.2863763619 |

  #+begin_src lisp :var data=d4.1 :results file
    (plot2 data "nbx1-nostrut.png" '("n_{by}=3" "n_{by}=5" "n_{by}=10"))
  #+end_src
 
  #+RESULTS:
  [[file:img/nbx1-nostrut.png]]

 [[./img/nbx1.png]]

*** Contour
  #+begin_src lisp  :exports code
    (table 10
	  (loop for n_bx from 1 to 20 do 
	    (loop for n_by from 1 to 20   
			  for tp =  (nth-value 2 
								   (simple-building :number-of-storey 4
												    :height 3
												    :bays-x n_bx
												    :bays-y n_by
												    :bay-width 3
												    :strut t))
			  do (row n_bx n_by tp))))
  #+end_src

  #+Name: bxby1
  #+RESULTS:
  |  1.0000000000 |  1.0000000000 | 0.2545217843 |
  |  1.0000000000 |  2.0000000000 | 0.2755037334 |
  |  1.0000000000 |  3.0000000000 | 0.2854171433 |
  |  1.0000000000 |  4.0000000000 | 0.2912033080 |
  |  1.0000000000 |  5.0000000000 | 0.2949977304 |
  |  1.0000000000 |  6.0000000000 | 0.2976784318 |
  |  1.0000000000 |  7.0000000000 | 0.2996732268 |
  |  1.0000000000 |  8.0000000000 | 0.3012156039 |
  |  1.0000000000 |  9.0000000000 | 0.3024438442 |
  |  1.0000000000 | 10.0000000000 | 0.3034450715 |
  |  1.0000000000 | 11.0000000000 | 0.3042769117 |
  |  1.0000000000 | 12.0000000000 | 0.3049790049 |
  |  1.0000000000 | 13.0000000000 | 0.3055795156 |
  |  1.0000000000 | 14.0000000000 | 0.3060990055 |
  |  1.0000000000 | 15.0000000000 | 0.3065528373 |
  |  1.0000000000 | 16.0000000000 | 0.3069527200 |
  |  1.0000000000 | 17.0000000000 | 0.3073077346 |
  |  1.0000000000 | 18.0000000000 | 0.3076250321 |
  |  1.0000000000 | 19.0000000000 | 0.3079103203 |
  |  1.0000000000 | 20.0000000000 | 0.3081682108 |
  |  2.0000000000 |  1.0000000000 | 0.2755037334 |
  |  2.0000000000 |  2.0000000000 | 0.2671614752 |
  |  2.0000000000 |  3.0000000000 | 0.2762115272 |
  |  2.0000000000 |  4.0000000000 | 0.2815020244 |
  |  2.0000000000 |  5.0000000000 | 0.2849744946 |
  |  2.0000000000 |  6.0000000000 | 0.2874291614 |
  |  2.0000000000 |  7.0000000000 | 0.2892564991 |
  |  2.0000000000 |  8.0000000000 | 0.2906698238 |
  |  2.0000000000 |  9.0000000000 | 0.2917955574 |
  |  2.0000000000 | 10.0000000000 | 0.2927133936 |
  |  2.0000000000 | 11.0000000000 | 0.2934760655 |
  |  2.0000000000 | 12.0000000000 | 0.2941198593 |
  |  2.0000000000 | 13.0000000000 | 0.2946705636 |
  |  2.0000000000 | 14.0000000000 | 0.2951470100 |
  |  2.0000000000 | 15.0000000000 | 0.2955632708 |
  |  2.0000000000 | 16.0000000000 | 0.2959300737 |
  |  2.0000000000 | 17.0000000000 | 0.2962557397 |
  |  2.0000000000 | 18.0000000000 | 0.2965468221 |
  |  2.0000000000 | 19.0000000000 | 0.2968085522 |
  |  2.0000000000 | 20.0000000000 | 0.2970451571 |
  |  3.0000000000 |  1.0000000000 | 0.2854171433 |
  |  3.0000000000 |  2.0000000000 | 0.2762115272 |
  |  3.0000000000 |  3.0000000000 | 0.2727237473 |
  |  3.0000000000 |  4.0000000000 | 0.2778235977 |
  |  3.0000000000 |  5.0000000000 | 0.2811721499 |
  |  3.0000000000 |  6.0000000000 | 0.2835397784 |
  |  3.0000000000 |  7.0000000000 | 0.2853026144 |
  |  3.0000000000 |  8.0000000000 | 0.2866662192 |
  |  3.0000000000 |  9.0000000000 | 0.2877524535 |
  |  3.0000000000 | 10.0000000000 | 0.2886381520 |
  |  3.0000000000 | 11.0000000000 | 0.2893741645 |
  |  3.0000000000 | 12.0000000000 | 0.2899954861 |
  |  3.0000000000 | 13.0000000000 | 0.2905269906 |
  |  3.0000000000 | 14.0000000000 | 0.2909868430 |
  |  3.0000000000 | 15.0000000000 | 0.2913886188 |
  |  3.0000000000 | 16.0000000000 | 0.2917426677 |
  |  3.0000000000 | 17.0000000000 | 0.2920570178 |
  |  3.0000000000 | 18.0000000000 | 0.2923379920 |
  |  3.0000000000 | 19.0000000000 | 0.2925906382 |
  |  3.0000000000 | 20.0000000000 | 0.2928190351 |
  |  4.0000000000 |  1.0000000000 | 0.2912033080 |
  |  4.0000000000 |  2.0000000000 | 0.2815020244 |
  |  4.0000000000 |  3.0000000000 | 0.2778235977 |
  |  4.0000000000 |  4.0000000000 | 0.2758873724 |
  |  4.0000000000 |  5.0000000000 | 0.2791702674 |
  |  4.0000000000 |  6.0000000000 | 0.2814917699 |
  |  4.0000000000 |  7.0000000000 | 0.2832204183 |
  |  4.0000000000 |  8.0000000000 | 0.2845576676 |
  |  4.0000000000 |  9.0000000000 | 0.2856229625 |
  |  4.0000000000 | 10.0000000000 | 0.2864916230 |
  |  4.0000000000 | 11.0000000000 | 0.2872135012 |
  |  4.0000000000 | 12.0000000000 | 0.2878229080 |
  |  4.0000000000 | 13.0000000000 | 0.2883442323 |
  |  4.0000000000 | 14.0000000000 | 0.2887952859 |
  |  4.0000000000 | 15.0000000000 | 0.2891893812 |
  |  4.0000000000 | 16.0000000000 | 0.2895366671 |
  |  4.0000000000 | 17.0000000000 | 0.2898450165 |
  |  4.0000000000 | 18.0000000000 | 0.2901206306 |
  |  4.0000000000 | 19.0000000000 | 0.2903684596 |
  |  4.0000000000 | 20.0000000000 | 0.2905925039 |
  |  5.0000000000 |  1.0000000000 | 0.2949977304 |
  |  5.0000000000 |  2.0000000000 | 0.2849744946 |
  |  5.0000000000 |  3.0000000000 | 0.2811721499 |
  |  5.0000000000 |  4.0000000000 | 0.2791702674 |
  |  5.0000000000 |  5.0000000000 | 0.2779347529 |
  |  5.0000000000 |  6.0000000000 | 0.2802276811 |
  |  5.0000000000 |  7.0000000000 | 0.2819351491 |
  |  5.0000000000 |  8.0000000000 | 0.2832560693 |
  |  5.0000000000 |  9.0000000000 | 0.2843083900 |
  |  5.0000000000 | 10.0000000000 | 0.2851664934 |
  |  5.0000000000 | 11.0000000000 | 0.2858796134 |
  |  5.0000000000 | 12.0000000000 | 0.2864816372 |
  |  5.0000000000 | 13.0000000000 | 0.2869966531 |
  |  5.0000000000 | 14.0000000000 | 0.2874422544 |
  |  5.0000000000 | 15.0000000000 | 0.2878315900 |
  |  5.0000000000 | 16.0000000000 | 0.2881746849 |
  |  5.0000000000 | 17.0000000000 | 0.2884793158 |
  |  5.0000000000 | 18.0000000000 | 0.2887516081 |
  |  5.0000000000 | 19.0000000000 | 0.2889964519 |
  |  5.0000000000 | 20.0000000000 | 0.2892177988 |
  |  6.0000000000 |  1.0000000000 | 0.2976784318 |
  |  6.0000000000 |  2.0000000000 | 0.2874291614 |
  |  6.0000000000 |  3.0000000000 | 0.2835397784 |
  |  6.0000000000 |  4.0000000000 | 0.2814917699 |
  |  6.0000000000 |  5.0000000000 | 0.2802276811 |
  |  6.0000000000 |  6.0000000000 | 0.2793696986 |
  |  6.0000000000 |  7.0000000000 | 0.2810627560 |
  |  6.0000000000 |  8.0000000000 | 0.2823725658 |
  |  6.0000000000 |  9.0000000000 | 0.2834160586 |
  |  6.0000000000 | 10.0000000000 | 0.2842669785 |
  |  6.0000000000 | 11.0000000000 | 0.2849741390 |
  |  6.0000000000 | 12.0000000000 | 0.2855711388 |
  |  6.0000000000 | 13.0000000000 | 0.2860818621 |
  |  6.0000000000 | 14.0000000000 | 0.2865237531 |
  |  6.0000000000 | 15.0000000000 | 0.2869098498 |
  |  6.0000000000 | 16.0000000000 | 0.2872500928 |
  |  6.0000000000 | 17.0000000000 | 0.2875521932 |
  |  6.0000000000 | 18.0000000000 | 0.2878222250 |
  |  6.0000000000 | 19.0000000000 | 0.2880650374 |
  |  6.0000000000 | 20.0000000000 | 0.2882845486 |
  |  7.0000000000 |  1.0000000000 | 0.2996732268 |
  |  7.0000000000 |  2.0000000000 | 0.2892564991 |
  |  7.0000000000 |  3.0000000000 | 0.2853026144 |
  |  7.0000000000 |  4.0000000000 | 0.2832204183 |
  |  7.0000000000 |  5.0000000000 | 0.2819351491 |
  |  7.0000000000 |  6.0000000000 | 0.2810627560 |
  |  7.0000000000 |  7.0000000000 | 0.2804318165 |
  |  7.0000000000 |  8.0000000000 | 0.2817335773 |
  |  7.0000000000 |  9.0000000000 | 0.2827706745 |
  |  7.0000000000 | 10.0000000000 | 0.2836163901 |
  |  7.0000000000 | 11.0000000000 | 0.2843192329 |
  |  7.0000000000 | 12.0000000000 | 0.2849125929 |
  |  7.0000000000 | 13.0000000000 | 0.2854202061 |
  |  7.0000000000 | 14.0000000000 | 0.2858594090 |
  |  7.0000000000 | 15.0000000000 | 0.2862431591 |
  |  7.0000000000 | 16.0000000000 | 0.2865813357 |
  |  7.0000000000 | 17.0000000000 | 0.2868816027 |
  |  7.0000000000 | 18.0000000000 | 0.2871499968 |
  |  7.0000000000 | 19.0000000000 | 0.2873913372 |
  |  7.0000000000 | 20.0000000000 | 0.2876095185 |
  |  8.0000000000 |  1.0000000000 | 0.3012156039 |
  |  8.0000000000 |  2.0000000000 | 0.2906698238 |
  |  8.0000000000 |  3.0000000000 | 0.2866662192 |
  |  8.0000000000 |  4.0000000000 | 0.2845576676 |
  |  8.0000000000 |  5.0000000000 | 0.2832560693 |
  |  8.0000000000 |  6.0000000000 | 0.2823725658 |
  |  8.0000000000 |  7.0000000000 | 0.2817335773 |
  |  8.0000000000 |  8.0000000000 | 0.2812499328 |
  |  8.0000000000 |  9.0000000000 | 0.2822821832 |
  |  8.0000000000 | 10.0000000000 | 0.2831239546 |
  |  8.0000000000 | 11.0000000000 | 0.2838235253 |
  |  8.0000000000 | 12.0000000000 | 0.2844141267 |
  |  8.0000000000 | 13.0000000000 | 0.2849193829 |
  |  8.0000000000 | 14.0000000000 | 0.2853565485 |
  |  8.0000000000 | 15.0000000000 | 0.2857385201 |
  |  8.0000000000 | 16.0000000000 | 0.2860751307 |
  |  8.0000000000 | 17.0000000000 | 0.2863740083 |
  |  8.0000000000 | 18.0000000000 | 0.2866411610 |
  |  8.0000000000 | 19.0000000000 | 0.2868813860 |
  |  8.0000000000 | 20.0000000000 | 0.2870985593 |
  |  9.0000000000 |  1.0000000000 | 0.3024438442 |
  |  9.0000000000 |  2.0000000000 | 0.2917955574 |
  |  9.0000000000 |  3.0000000000 | 0.2877524535 |
  |  9.0000000000 |  4.0000000000 | 0.2856229625 |
  |  9.0000000000 |  5.0000000000 | 0.2843083900 |
  |  9.0000000000 |  6.0000000000 | 0.2834160586 |
  |  9.0000000000 |  7.0000000000 | 0.2827706745 |
  |  9.0000000000 |  8.0000000000 | 0.2822821832 |
  |  9.0000000000 |  9.0000000000 | 0.2818995725 |
  |  9.0000000000 | 10.0000000000 | 0.2827382517 |
  |  9.0000000000 | 11.0000000000 | 0.2834352569 |
  |  9.0000000000 | 12.0000000000 | 0.2840236956 |
  |  9.0000000000 | 13.0000000000 | 0.2845271038 |
  |  9.0000000000 | 14.0000000000 | 0.2849626721 |
  |  9.0000000000 | 15.0000000000 | 0.2853432494 |
  |  9.0000000000 | 16.0000000000 | 0.2856786321 |
  |  9.0000000000 | 17.0000000000 | 0.2859764202 |
  |  9.0000000000 | 18.0000000000 | 0.2862425998 |
  |  9.0000000000 | 19.0000000000 | 0.2864819501 |
  |  9.0000000000 | 20.0000000000 | 0.2866983331 |
  | 10.0000000000 |  1.0000000000 | 0.3034450715 |
  | 10.0000000000 |  2.0000000000 | 0.2927133936 |
  | 10.0000000000 |  3.0000000000 | 0.2886381520 |
  | 10.0000000000 |  4.0000000000 | 0.2864916230 |
  | 10.0000000000 |  5.0000000000 | 0.2851664934 |
  | 10.0000000000 |  6.0000000000 | 0.2842669785 |
  | 10.0000000000 |  7.0000000000 | 0.2836163901 |
  | 10.0000000000 |  8.0000000000 | 0.2831239546 |
  | 10.0000000000 |  9.0000000000 | 0.2827382517 |
  | 10.0000000000 | 10.0000000000 | 0.2824279729 |
  | 10.0000000000 | 11.0000000000 | 0.2831229127 |
  | 10.0000000000 | 12.0000000000 | 0.2837096102 |
  | 10.0000000000 | 13.0000000000 | 0.2842115306 |
  | 10.0000000000 | 14.0000000000 | 0.2846458130 |
  | 10.0000000000 | 15.0000000000 | 0.2850252677 |
  | 10.0000000000 | 16.0000000000 | 0.2853596620 |
  | 10.0000000000 | 17.0000000000 | 0.2856565730 |
  | 10.0000000000 | 18.0000000000 | 0.2859219690 |
  | 10.0000000000 | 19.0000000000 | 0.2861606152 |
  | 10.0000000000 | 20.0000000000 | 0.2863763619 |
  | 11.0000000000 |  1.0000000000 | 0.3042769117 |
  | 11.0000000000 |  2.0000000000 | 0.2934760655 |
  | 11.0000000000 |  3.0000000000 | 0.2893741645 |
  | 11.0000000000 |  4.0000000000 | 0.2872135012 |
  | 11.0000000000 |  5.0000000000 | 0.2858796134 |
  | 11.0000000000 |  6.0000000000 | 0.2849741390 |
  | 11.0000000000 |  7.0000000000 | 0.2843192329 |
  | 11.0000000000 |  8.0000000000 | 0.2838235253 |
  | 11.0000000000 |  9.0000000000 | 0.2834352569 |
  | 11.0000000000 | 10.0000000000 | 0.2831229127 |
  | 11.0000000000 | 11.0000000000 | 0.2828662058 |
  | 11.0000000000 | 12.0000000000 | 0.2834514714 |
  | 11.0000000000 | 13.0000000000 | 0.2839521683 |
  | 11.0000000000 | 14.0000000000 | 0.2843853931 |
  | 11.0000000000 | 15.0000000000 | 0.2847639246 |
  | 11.0000000000 | 16.0000000000 | 0.2850975059 |
  | 11.0000000000 | 17.0000000000 | 0.2853936956 |
  | 11.0000000000 | 18.0000000000 | 0.2856584473 |
  | 11.0000000000 | 19.0000000000 | 0.2858965143 |
  | 11.0000000000 | 20.0000000000 | 0.2861117378 |
  | 12.0000000000 |  1.0000000000 | 0.3049790049 |
  | 12.0000000000 |  2.0000000000 | 0.2941198593 |
  | 12.0000000000 |  3.0000000000 | 0.2899954861 |
  | 12.0000000000 |  4.0000000000 | 0.2878229080 |
  | 12.0000000000 |  5.0000000000 | 0.2864816372 |
  | 12.0000000000 |  6.0000000000 | 0.2855711388 |
  | 12.0000000000 |  7.0000000000 | 0.2849125929 |
  | 12.0000000000 |  8.0000000000 | 0.2844141267 |
  | 12.0000000000 |  9.0000000000 | 0.2840236956 |
  | 12.0000000000 | 10.0000000000 | 0.2837096102 |
  | 12.0000000000 | 11.0000000000 | 0.2834514714 |
  | 12.0000000000 | 12.0000000000 | 0.2832355531 |
  | 12.0000000000 | 13.0000000000 | 0.2837352260 |
  | 12.0000000000 | 14.0000000000 | 0.2841675658 |
  | 12.0000000000 | 15.0000000000 | 0.2845453246 |
  | 12.0000000000 | 16.0000000000 | 0.2848782256 |
  | 12.0000000000 | 17.0000000000 | 0.2851738116 |
  | 12.0000000000 | 18.0000000000 | 0.2854380241 |
  | 12.0000000000 | 19.0000000000 | 0.2856756065 |
  | 12.0000000000 | 20.0000000000 | 0.2858903920 |
  | 13.0000000000 |  1.0000000000 | 0.3055795156 |
  | 13.0000000000 |  2.0000000000 | 0.2946705636 |
  | 13.0000000000 |  3.0000000000 | 0.2905269906 |
  | 13.0000000000 |  4.0000000000 | 0.2883442323 |
  | 13.0000000000 |  5.0000000000 | 0.2869966531 |
  | 13.0000000000 |  6.0000000000 | 0.2860818621 |
  | 13.0000000000 |  7.0000000000 | 0.2854202061 |
  | 13.0000000000 |  8.0000000000 | 0.2849193829 |
  | 13.0000000000 |  9.0000000000 | 0.2845271038 |
  | 13.0000000000 | 10.0000000000 | 0.2842115306 |
  | 13.0000000000 | 11.0000000000 | 0.2839521683 |
  | 13.0000000000 | 12.0000000000 | 0.2837352260 |
  | 13.0000000000 | 13.0000000000 | 0.2835510833 |
  | 13.0000000000 | 14.0000000000 | 0.2839826715 |
  | 13.0000000000 | 15.0000000000 | 0.2843597743 |
  | 13.0000000000 | 16.0000000000 | 0.2846920976 |
  | 13.0000000000 | 17.0000000000 | 0.2849871709 |
  | 13.0000000000 | 18.0000000000 | 0.2852509255 |
  | 13.0000000000 | 19.0000000000 | 0.2854880963 |
  | 13.0000000000 | 20.0000000000 | 0.2857025100 |
  | 14.0000000000 |  1.0000000000 | 0.3060990055 |
  | 14.0000000000 |  2.0000000000 | 0.2951470100 |
  | 14.0000000000 |  3.0000000000 | 0.2909868430 |
  | 14.0000000000 |  4.0000000000 | 0.2887952859 |
  | 14.0000000000 |  5.0000000000 | 0.2874422544 |
  | 14.0000000000 |  6.0000000000 | 0.2865237531 |
  | 14.0000000000 |  7.0000000000 | 0.2858594090 |
  | 14.0000000000 |  8.0000000000 | 0.2853565485 |
  | 14.0000000000 |  9.0000000000 | 0.2849626721 |
  | 14.0000000000 | 10.0000000000 | 0.2846458130 |
  | 14.0000000000 | 11.0000000000 | 0.2843853931 |
  | 14.0000000000 | 12.0000000000 | 0.2841675658 |
  | 14.0000000000 | 13.0000000000 | 0.2839826715 |
  | 14.0000000000 | 14.0000000000 | 0.2838237665 |
  | 14.0000000000 | 15.0000000000 | 0.2842003052 |
  | 14.0000000000 | 16.0000000000 | 0.2845321318 |
  | 14.0000000000 | 17.0000000000 | 0.2848267644 |
  | 14.0000000000 | 18.0000000000 | 0.2850901252 |
  | 14.0000000000 | 19.0000000000 | 0.2853269423 |
  | 14.0000000000 | 20.0000000000 | 0.2855410362 |
  | 15.0000000000 |  1.0000000000 | 0.3065528373 |
  | 15.0000000000 |  2.0000000000 | 0.2955632708 |
  | 15.0000000000 |  3.0000000000 | 0.2913886188 |
  | 15.0000000000 |  4.0000000000 | 0.2891893812 |
  | 15.0000000000 |  5.0000000000 | 0.2878315900 |
  | 15.0000000000 |  6.0000000000 | 0.2869098498 |
  | 15.0000000000 |  7.0000000000 | 0.2862431591 |
  | 15.0000000000 |  8.0000000000 | 0.2857385201 |
  | 15.0000000000 |  9.0000000000 | 0.2853432494 |
  | 15.0000000000 | 10.0000000000 | 0.2850252677 |
  | 15.0000000000 | 11.0000000000 | 0.2847639246 |
  | 15.0000000000 | 12.0000000000 | 0.2845453246 |
  | 15.0000000000 | 13.0000000000 | 0.2843597743 |
  | 15.0000000000 | 14.0000000000 | 0.2842003052 |
  | 15.0000000000 | 15.0000000000 | 0.2840617794 |
  | 15.0000000000 | 16.0000000000 | 0.2843931743 |
  | 15.0000000000 | 17.0000000000 | 0.2846874240 |
  | 15.0000000000 | 18.0000000000 | 0.2849504427 |
  | 15.0000000000 | 19.0000000000 | 0.2851869523 |
  | 15.0000000000 | 20.0000000000 | 0.2854007684 |
  | 16.0000000000 |  1.0000000000 | 0.3069527200 |
  | 16.0000000000 |  2.0000000000 | 0.2959300737 |
  | 16.0000000000 |  3.0000000000 | 0.2917426677 |
  | 16.0000000000 |  4.0000000000 | 0.2895366671 |
  | 16.0000000000 |  5.0000000000 | 0.2881746849 |
  | 16.0000000000 |  6.0000000000 | 0.2872500928 |
  | 16.0000000000 |  7.0000000000 | 0.2865813357 |
  | 16.0000000000 |  8.0000000000 | 0.2860751307 |
  | 16.0000000000 |  9.0000000000 | 0.2856786321 |
  | 16.0000000000 | 10.0000000000 | 0.2853596620 |
  | 16.0000000000 | 11.0000000000 | 0.2850975059 |
  | 16.0000000000 | 12.0000000000 | 0.2848782256 |
  | 16.0000000000 | 13.0000000000 | 0.2846920976 |
  | 16.0000000000 | 14.0000000000 | 0.2845321318 |
  | 16.0000000000 | 15.0000000000 | 0.2843931743 |
  | 16.0000000000 | 16.0000000000 | 0.2842713416 |
  | 16.0000000000 | 17.0000000000 | 0.2845652554 |
  | 16.0000000000 | 18.0000000000 | 0.2848279741 |
  | 16.0000000000 | 19.0000000000 | 0.2850642140 |
  | 16.0000000000 | 20.0000000000 | 0.2852777865 |
  | 17.0000000000 |  1.0000000000 | 0.3073077346 |
  | 17.0000000000 |  2.0000000000 | 0.2962557397 |
  | 17.0000000000 |  3.0000000000 | 0.2920570178 |
  | 17.0000000000 |  4.0000000000 | 0.2898450165 |
  | 17.0000000000 |  5.0000000000 | 0.2884793158 |
  | 17.0000000000 |  6.0000000000 | 0.2875521932 |
  | 17.0000000000 |  7.0000000000 | 0.2868816027 |
  | 17.0000000000 |  8.0000000000 | 0.2863740083 |
  | 17.0000000000 |  9.0000000000 | 0.2859764202 |
  | 17.0000000000 | 10.0000000000 | 0.2856565730 |
  | 17.0000000000 | 11.0000000000 | 0.2853936956 |
  | 17.0000000000 | 12.0000000000 | 0.2851738116 |
  | 17.0000000000 | 13.0000000000 | 0.2849871709 |
  | 17.0000000000 | 14.0000000000 | 0.2848267644 |
  | 17.0000000000 | 15.0000000000 | 0.2846874240 |
  | 17.0000000000 | 16.0000000000 | 0.2845652554 |
  | 17.0000000000 | 17.0000000000 | 0.2844572687 |
  | 17.0000000000 | 18.0000000000 | 0.2847197220 |
  | 17.0000000000 | 19.0000000000 | 0.2849557235 |
  | 17.0000000000 | 20.0000000000 | 0.2851690806 |
  | 18.0000000000 |  1.0000000000 | 0.3076250321 |
  | 18.0000000000 |  2.0000000000 | 0.2965468221 |
  | 18.0000000000 |  3.0000000000 | 0.2923379920 |
  | 18.0000000000 |  4.0000000000 | 0.2901206306 |
  | 18.0000000000 |  5.0000000000 | 0.2887516081 |
  | 18.0000000000 |  6.0000000000 | 0.2878222250 |
  | 18.0000000000 |  7.0000000000 | 0.2871499968 |
  | 18.0000000000 |  8.0000000000 | 0.2866411610 |
  | 18.0000000000 |  9.0000000000 | 0.2862425998 |
  | 18.0000000000 | 10.0000000000 | 0.2859219690 |
  | 18.0000000000 | 11.0000000000 | 0.2856584473 |
  | 18.0000000000 | 12.0000000000 | 0.2854380241 |
  | 18.0000000000 | 13.0000000000 | 0.2852509255 |
  | 18.0000000000 | 14.0000000000 | 0.2850901252 |
  | 18.0000000000 | 15.0000000000 | 0.2849504427 |
  | 18.0000000000 | 16.0000000000 | 0.2848279741 |
  | 18.0000000000 | 17.0000000000 | 0.2847197220 |
  | 18.0000000000 | 18.0000000000 | 0.2846233468 |
  | 18.0000000000 | 19.0000000000 | 0.2848591361 |
  | 18.0000000000 | 20.0000000000 | 0.2850723012 |
  | 19.0000000000 |  1.0000000000 | 0.3079103203 |
  | 19.0000000000 |  2.0000000000 | 0.2968085522 |
  | 19.0000000000 |  3.0000000000 | 0.2925906382 |
  | 19.0000000000 |  4.0000000000 | 0.2903684596 |
  | 19.0000000000 |  5.0000000000 | 0.2889964519 |
  | 19.0000000000 |  6.0000000000 | 0.2880650374 |
  | 19.0000000000 |  7.0000000000 | 0.2873913372 |
  | 19.0000000000 |  8.0000000000 | 0.2868813860 |
  | 19.0000000000 |  9.0000000000 | 0.2864819501 |
  | 19.0000000000 | 10.0000000000 | 0.2861606152 |
  | 19.0000000000 | 11.0000000000 | 0.2858965143 |
  | 19.0000000000 | 12.0000000000 | 0.2856756065 |
  | 19.0000000000 | 13.0000000000 | 0.2854880963 |
  | 19.0000000000 | 14.0000000000 | 0.2853269423 |
  | 19.0000000000 | 15.0000000000 | 0.2851869523 |
  | 19.0000000000 | 16.0000000000 | 0.2850642140 |
  | 19.0000000000 | 17.0000000000 | 0.2849557235 |
  | 19.0000000000 | 18.0000000000 | 0.2848591361 |
  | 19.0000000000 | 19.0000000000 | 0.2847725945 |
  | 19.0000000000 | 20.0000000000 | 0.2849855878 |
  | 20.0000000000 |  1.0000000000 | 0.3081682108 |
  | 20.0000000000 |  2.0000000000 | 0.2970451571 |
  | 20.0000000000 |  3.0000000000 | 0.2928190351 |
  | 20.0000000000 |  4.0000000000 | 0.2905925039 |
  | 20.0000000000 |  5.0000000000 | 0.2892177988 |
  | 20.0000000000 |  6.0000000000 | 0.2882845486 |
  | 20.0000000000 |  7.0000000000 | 0.2876095185 |
  | 20.0000000000 |  8.0000000000 | 0.2870985593 |
  | 20.0000000000 |  9.0000000000 | 0.2866983331 |
  | 20.0000000000 | 10.0000000000 | 0.2863763619 |
  | 20.0000000000 | 11.0000000000 | 0.2861117378 |
  | 20.0000000000 | 12.0000000000 | 0.2858903920 |
  | 20.0000000000 | 13.0000000000 | 0.2857025100 |
  | 20.0000000000 | 14.0000000000 | 0.2855410362 |
  | 20.0000000000 | 15.0000000000 | 0.2854007684 |
  | 20.0000000000 | 16.0000000000 | 0.2852777865 |
  | 20.0000000000 | 17.0000000000 | 0.2851690806 |
  | 20.0000000000 | 18.0000000000 | 0.2850723012 |
  | 20.0000000000 | 19.0000000000 | 0.2849855878 |
  | 20.0000000000 | 20.0000000000 | 0.2849074474 |

	 #+begin_src gnuplot :var data=bxby1 :results file :file contour2.png
 # set terminal pngcairo  transparent enhanced font "arial,10" fontscale 1.0 size 600, 400 
 # set output 'contours.1.png'
 set pm3d map 
 set title "contour plot" 
 set dgrid3d 20,20 gauss 10e-6,10e-6
 set key at screen 1, 0.9 right top vertical Right noreverse enhanced autotitle nobox
 set style increment default
 set style textbox opaque margins  0.5,  0.5 fc  bgnd noborder linewidth  1.0
 set view 60, 30, 0.85, 1.1
 set contour base
 set style data lines
 set title "contour plot" 
 set xlabel "X axis" 
 set xrange [ * : * ] noreverse writeback
 set x2range [ * : * ] noreverse writeback
 set ylabel "Y axis" 
 set yrange [ * : * ] noreverse writeback
 set y2range [ * : * ] noreverse writeback
 set zlabel "Z " 
 set zlabel  offset character 1, 0, 0 font "" textcolor lt -1 norotate
 set zrange [ * : * ] noreverse writeback
 set cbrange [ * : * ] noreverse writeback
 set rrange [ * : * ] noreverse writeback
 #set palette rgbformulae 22,13,10
 splot data  
	 #+end_src
	
	 #+Name: BayWidthContour
	 #+RESULTS:
	 [[file:contour2.png]]

*** Combined 
**** Ratio? No
 #+begin_src lisp :var data=d4.1   :exports both
   (table 10
	 (loop for (n_bx t3 t5 t10) in data do 
	   (row (/ n_bx 3) t3)
	   (row (/ n_bx 5) t5)
	   (row (if (>= n_bx 10) (/ n_bx 10) (/ 10 n_bx)) t10)))
 #+end_src

 #+Name: d4.2
 #+RESULTS:
 | 1.6666666000 | 0.2811721600 |
 | 1.0000000000 | 0.2779347600 |
 | 2.0000000000 | 0.2851665000 |
 | 2.0000000000 | 0.2835397700 |
 | 1.2000000000 | 0.2802277000 |
 | 1.6666666000 | 0.2842669800 |
 | 2.3333333000 | 0.2853026000 |
 | 1.4000000000 | 0.2819351600 |
 | 1.4285715000 | 0.2836164000 |
 | 2.6666667000 | 0.2866662000 |
 | 1.6000000000 | 0.2832560800 |
 | 1.2500000000 | 0.2831239400 |
 | 3.0000000000 | 0.2877524500 |
 | 1.8000000000 | 0.2843084000 |
 | 1.1111112000 | 0.2827382400 |
 | 3.3333333000 | 0.2886381400 |
 | 2.0000000000 | 0.2851665000 |
 | 1.0000000000 | 0.2824279700 |
 | 3.6666667000 | 0.2893741700 |
 | 2.2000000000 | 0.2858796000 |
 | 1.1000000000 | 0.2831229300 |
 | 4.0000000000 | 0.2899955000 |
 | 2.4000000000 | 0.2864816500 |
 | 1.2000000000 | 0.2837096200 |
 | 4.3333335000 | 0.2905270000 |
 | 2.6000000000 | 0.2869966600 |
 | 1.3000000000 | 0.2842115200 |
 | 4.6666665000 | 0.2909868400 |
 | 2.8000000000 | 0.2874422700 |
 | 1.4000000000 | 0.2846458300 |
 | 5.0000000000 | 0.2913886300 |
 | 3.0000000000 | 0.2878316000 |
 | 1.5000000000 | 0.2850252700 |
 | 5.3333335000 | 0.2917426800 |
 | 3.2000000000 | 0.2881747000 |
 | 1.6000000000 | 0.2853596500 |
 | 5.6666665000 | 0.2920570000 |
 | 3.4000000000 | 0.2884793300 |
 | 1.7000000000 | 0.2856565700 |
 | 6.0000000000 | 0.2923379800 |
 | 3.6000000000 | 0.2887516000 |
 | 1.8000000000 | 0.2859219600 |
 | 6.3333335000 | 0.2925906500 |
 | 3.8000000000 | 0.2889964600 |
 | 1.9000000000 | 0.2861606200 |
 | 6.6666665000 | 0.2928190200 |
 | 4.0000000000 | 0.2892178000 |
 | 2.0000000000 | 0.2863763600 |

 #+begin_src lisp :var data=d4.2 :results file  :exports both
   (plot2 (sort data  #'< :key #'first) "nbx2.png")
 #+end_src

 #+RESULTS:
 [[file:img/nbx2.png]]

**** Product? No
 #+begin_src lisp :var data=d4.1 :results file  :exports both
   (table nil
	 (loop for (n_bx t3 t5 t10) in data do 
	   (row (* n_bx 3) t3)
	   (row (* n_bx 5) t5)
	   (row (* n_bx 10) t10))

	   (plot2 (sort (table-data)  #'< :key #'first) "nbx3-nostrut.png"))
 #+end_src

 #+RESULTS:
 [[file:img/nbx3-nostrut.png]]

**** Wall area  
	 #+begin_src lisp :var data=bxby1  :results file 
	   (plot2 (sort (loop for (bx by tp) in data collect (list (* bx (- by 1)) tp)) #'> :key #'first)  "bxby2.png" )
	 #+end_src

	 #+RESULTS:
	 [[file:img/bxby2.png]]

 This gives something for interpretation. May be at higher bay counts, the wall shear overcomes or the column shear overcomes . !!!???

	 #+begin_src lisp :var data=bxby1  :results file 
	   (plot2 (sort (loop for (bx by tp) in data collect 
												 (list (+ (* bx (1- by)) (* by (1- bx))) tp))
				    #'> :key #'first) 
			  "bxby3.png" )
	 #+end_src

	 #+RESULTS:
	 [[file:img/bxby3.png]]

 Let's increase bay width and check Infill shear vs Column shear 

 #+begin_src lisp  :exports code
    (table 10
	  (loop for n_bx from 1 to 20 do 
	    (loop for n_by from 1 to 20   
			  for tp =  (nth-value 2 
								   (simple-building :number-of-storey 4
												    :height 3
												    :bays-x n_bx
												    :bays-y n_by
												    :bay-width 15
												    :strut t))
			  do (row n_bx n_by tp))))
  #+end_src
  #+Name: bxby2
  #+RESULTS:
  |  1.0000000000 |  1.0000000000 | 0.2630887872 |
  |  1.0000000000 |  2.0000000000 | 0.2938603751 |
  |  1.0000000000 |  3.0000000000 | 0.3080964081 |
  |  1.0000000000 |  4.0000000000 | 0.3163307842 |
  |  1.0000000000 |  5.0000000000 | 0.3217033403 |
  |  1.0000000000 |  6.0000000000 | 0.3254866100 |
  |  1.0000000000 |  7.0000000000 | 0.3282954618 |
  |  1.0000000000 |  8.0000000000 | 0.3304636243 |
  |  1.0000000000 |  9.0000000000 | 0.3321879688 |
  |  1.0000000000 | 10.0000000000 | 0.3335921685 |
  |  1.0000000000 | 11.0000000000 | 0.3347578370 |
  |  1.0000000000 | 12.0000000000 | 0.3357410118 |
  |  1.0000000000 | 13.0000000000 | 0.3365814479 |
  |  1.0000000000 | 14.0000000000 | 0.3373081326 |
  |  1.0000000000 | 15.0000000000 | 0.3379427002 |
  |  1.0000000000 | 16.0000000000 | 0.3385016252 |
  |  1.0000000000 | 17.0000000000 | 0.3389976740 |
  |  1.0000000000 | 18.0000000000 | 0.3394408929 |
  |  1.0000000000 | 19.0000000000 | 0.3398392958 |
  |  1.0000000000 | 20.0000000000 | 0.3401993536 |
  |  2.0000000000 |  1.0000000000 | 0.2938603751 |
  |  2.0000000000 |  2.0000000000 | 0.2850913720 |
  |  2.0000000000 |  3.0000000000 | 0.2986967684 |
  |  2.0000000000 |  4.0000000000 | 0.3065704818 |
  |  2.0000000000 |  5.0000000000 | 0.3117092055 |
  |  2.0000000000 |  6.0000000000 | 0.3153284798 |
  |  2.0000000000 |  7.0000000000 | 0.3180159176 |
  |  2.0000000000 |  8.0000000000 | 0.3200905549 |
  |  2.0000000000 |  9.0000000000 | 0.3217406371 |
  |  2.0000000000 | 10.0000000000 | 0.3230844387 |
  |  2.0000000000 | 11.0000000000 | 0.3242000202 |
  |  2.0000000000 | 12.0000000000 | 0.3251409854 |
  |  2.0000000000 | 13.0000000000 | 0.3259453658 |
  |  2.0000000000 | 14.0000000000 | 0.3266408938 |
  |  2.0000000000 | 15.0000000000 | 0.3272482687 |
  |  2.0000000000 | 16.0000000000 | 0.3277832534 |
  |  2.0000000000 | 17.0000000000 | 0.3282580637 |
  |  2.0000000000 | 18.0000000000 | 0.3286823128 |
  |  2.0000000000 | 19.0000000000 | 0.3290636695 |
  |  2.0000000000 | 20.0000000000 | 0.3294083262 |
  |  3.0000000000 |  1.0000000000 | 0.3080964081 |
  |  3.0000000000 |  2.0000000000 | 0.2986967684 |
  |  3.0000000000 |  3.0000000000 | 0.2954562476 |
  |  3.0000000000 |  4.0000000000 | 0.3032048206 |
  |  3.0000000000 |  5.0000000000 | 0.3082624093 |
  |  3.0000000000 |  6.0000000000 | 0.3118247800 |
  |  3.0000000000 |  7.0000000000 | 0.3144700892 |
  |  3.0000000000 |  8.0000000000 | 0.3165122746 |
  |  3.0000000000 |  9.0000000000 | 0.3181365889 |
  |  3.0000000000 | 10.0000000000 | 0.3194594332 |
  |  3.0000000000 | 11.0000000000 | 0.3205576353 |
  |  3.0000000000 | 12.0000000000 | 0.3214839544 |
  |  3.0000000000 | 13.0000000000 | 0.3222758240 |
  |  3.0000000000 | 14.0000000000 | 0.3229605412 |
  |  3.0000000000 | 15.0000000000 | 0.3235584806 |
  |  3.0000000000 | 16.0000000000 | 0.3240851584 |
  |  3.0000000000 | 17.0000000000 | 0.3245525992 |
  |  3.0000000000 | 18.0000000000 | 0.3249702661 |
  |  3.0000000000 | 19.0000000000 | 0.3253457080 |
  |  3.0000000000 | 20.0000000000 | 0.3256850208 |
  |  4.0000000000 |  1.0000000000 | 0.3163307842 |
  |  4.0000000000 |  2.0000000000 | 0.3065704818 |
  |  4.0000000000 |  3.0000000000 | 0.3032048206 |
  |  4.0000000000 |  4.0000000000 | 0.3014998039 |
  |  4.0000000000 |  5.0000000000 | 0.3065161873 |
  |  4.0000000000 |  6.0000000000 | 0.3100496588 |
  |  4.0000000000 |  7.0000000000 | 0.3126735724 |
  |  4.0000000000 |  8.0000000000 | 0.3146992767 |
  |  4.0000000000 |  9.0000000000 | 0.3163105044 |
  |  4.0000000000 | 10.0000000000 | 0.3176227053 |
  |  4.0000000000 | 11.0000000000 | 0.3187120810 |
  |  4.0000000000 | 12.0000000000 | 0.3196309618 |
  |  4.0000000000 | 13.0000000000 | 0.3204164776 |
  |  4.0000000000 | 14.0000000000 | 0.3210957043 |
  |  4.0000000000 | 15.0000000000 | 0.3216888517 |
  |  4.0000000000 | 16.0000000000 | 0.3222113107 |
  |  4.0000000000 | 17.0000000000 | 0.3226750089 |
  |  4.0000000000 | 18.0000000000 | 0.3230893329 |
  |  4.0000000000 | 19.0000000000 | 0.3234617709 |
  |  4.0000000000 | 20.0000000000 | 0.3237983697 |
  |  5.0000000000 |  1.0000000000 | 0.3217033403 |
  |  5.0000000000 |  2.0000000000 | 0.3117092055 |
  |  5.0000000000 |  3.0000000000 | 0.3082624093 |
  |  5.0000000000 |  4.0000000000 | 0.3065161873 |
  |  5.0000000000 |  5.0000000000 | 0.3054609880 |
  |  5.0000000000 |  6.0000000000 | 0.3089769729 |
  |  5.0000000000 |  7.0000000000 | 0.3115879403 |
  |  5.0000000000 |  8.0000000000 | 0.3136036721 |
  |  5.0000000000 |  9.0000000000 | 0.3152069813 |
  |  5.0000000000 | 10.0000000000 | 0.3165127419 |
  |  5.0000000000 | 11.0000000000 | 0.3175967768 |
  |  5.0000000000 | 12.0000000000 | 0.3185111569 |
  |  5.0000000000 | 13.0000000000 | 0.3192928281 |
  |  5.0000000000 | 14.0000000000 | 0.3199687325 |
  |  5.0000000000 | 15.0000000000 | 0.3205589804 |
  |  5.0000000000 | 16.0000000000 | 0.3210788866 |
  |  5.0000000000 | 17.0000000000 | 0.3215403201 |
  |  5.0000000000 | 18.0000000000 | 0.3219526214 |
  |  5.0000000000 | 19.0000000000 | 0.3223232418 |
  |  5.0000000000 | 20.0000000000 | 0.3226581983 |
  |  6.0000000000 |  1.0000000000 | 0.3254866100 |
  |  6.0000000000 |  2.0000000000 | 0.3153284798 |
  |  6.0000000000 |  3.0000000000 | 0.3118247800 |
  |  6.0000000000 |  4.0000000000 | 0.3100496588 |
  |  6.0000000000 |  5.0000000000 | 0.3089769729 |
  |  6.0000000000 |  6.0000000000 | 0.3082586372 |
  |  6.0000000000 |  7.0000000000 | 0.3108609277 |
  |  6.0000000000 |  8.0000000000 | 0.3128699757 |
  |  6.0000000000 |  9.0000000000 | 0.3144679776 |
  |  6.0000000000 | 10.0000000000 | 0.3157694218 |
  |  6.0000000000 | 11.0000000000 | 0.3168498773 |
  |  6.0000000000 | 12.0000000000 | 0.3177612408 |
  |  6.0000000000 | 13.0000000000 | 0.3185403352 |
  |  6.0000000000 | 14.0000000000 | 0.3192140130 |
  |  6.0000000000 | 15.0000000000 | 0.3198023175 |
  |  6.0000000000 | 16.0000000000 | 0.3203205129 |
  |  6.0000000000 | 17.0000000000 | 0.3207804286 |
  |  6.0000000000 | 18.0000000000 | 0.3211913741 |
  |  6.0000000000 | 19.0000000000 | 0.3215607763 |
  |  6.0000000000 | 20.0000000000 | 0.3218946322 |
  |  7.0000000000 |  1.0000000000 | 0.3282954618 |
  |  7.0000000000 |  2.0000000000 | 0.3180159176 |
  |  7.0000000000 |  3.0000000000 | 0.3144700892 |
  |  7.0000000000 |  4.0000000000 | 0.3126735724 |
  |  7.0000000000 |  5.0000000000 | 0.3115879403 |
  |  7.0000000000 |  6.0000000000 | 0.3108609277 |
  |  7.0000000000 |  7.0000000000 | 0.3103400244 |
  |  7.0000000000 |  8.0000000000 | 0.3123442806 |
  |  7.0000000000 |  9.0000000000 | 0.3139384778 |
  |  7.0000000000 | 10.0000000000 | 0.3152368275 |
  |  7.0000000000 | 11.0000000000 | 0.3163147168 |
  |  7.0000000000 | 12.0000000000 | 0.3172239177 |
  |  7.0000000000 | 13.0000000000 | 0.3180011648 |
  |  7.0000000000 | 14.0000000000 | 0.3186732463 |
  |  7.0000000000 | 15.0000000000 | 0.3192601576 |
  |  7.0000000000 | 16.0000000000 | 0.3197771264 |
  |  7.0000000000 | 17.0000000000 | 0.3202359539 |
  |  7.0000000000 | 18.0000000000 | 0.3206459276 |
  |  7.0000000000 | 19.0000000000 | 0.3210144564 |
  |  7.0000000000 | 20.0000000000 | 0.3213475232 |
  |  8.0000000000 |  1.0000000000 | 0.3304636243 |
  |  8.0000000000 |  2.0000000000 | 0.3200905549 |
  |  8.0000000000 |  3.0000000000 | 0.3165122746 |
  |  8.0000000000 |  4.0000000000 | 0.3146992767 |
  |  8.0000000000 |  5.0000000000 | 0.3136036721 |
  |  8.0000000000 |  6.0000000000 | 0.3128699757 |
  |  8.0000000000 |  7.0000000000 | 0.3123442806 |
  |  8.0000000000 |  8.0000000000 | 0.3119491149 |
  |  8.0000000000 |  9.0000000000 | 0.3135404508 |
  |  8.0000000000 | 10.0000000000 | 0.3148364735 |
  |  8.0000000000 | 11.0000000000 | 0.3159124329 |
  |  8.0000000000 | 12.0000000000 | 0.3168200075 |
  |  8.0000000000 | 13.0000000000 | 0.3175958654 |
  |  8.0000000000 | 14.0000000000 | 0.3182667465 |
  |  8.0000000000 | 15.0000000000 | 0.3188526101 |
  |  8.0000000000 | 16.0000000000 | 0.3193686565 |
  |  8.0000000000 | 17.0000000000 | 0.3198266657 |
  |  8.0000000000 | 18.0000000000 | 0.3202359084 |
  |  8.0000000000 | 19.0000000000 | 0.3206037805 |
  |  8.0000000000 | 20.0000000000 | 0.3209362539 |
  |  9.0000000000 |  1.0000000000 | 0.3321879688 |
  |  9.0000000000 |  2.0000000000 | 0.3217406371 |
  |  9.0000000000 |  3.0000000000 | 0.3181365889 |
  |  9.0000000000 |  4.0000000000 | 0.3163105044 |
  |  9.0000000000 |  5.0000000000 | 0.3152069813 |
  |  9.0000000000 |  6.0000000000 | 0.3144679776 |
  |  9.0000000000 |  7.0000000000 | 0.3139384778 |
  |  9.0000000000 |  8.0000000000 | 0.3135404508 |
  |  9.0000000000 |  9.0000000000 | 0.3132303375 |
  |  9.0000000000 | 10.0000000000 | 0.3145245464 |
  |  9.0000000000 | 11.0000000000 | 0.3155990018 |
  |  9.0000000000 | 12.0000000000 | 0.3165053090 |
  |  9.0000000000 | 13.0000000000 | 0.3172800842 |
  |  9.0000000000 | 14.0000000000 | 0.3179500296 |
  |  9.0000000000 | 15.0000000000 | 0.3185350766 |
  |  9.0000000000 | 16.0000000000 | 0.3190504041 |
  |  9.0000000000 | 17.0000000000 | 0.3195077756 |
  |  9.0000000000 | 18.0000000000 | 0.3199164487 |
  |  9.0000000000 | 19.0000000000 | 0.3202838088 |
  |  9.0000000000 | 20.0000000000 | 0.3206158198 |
  | 10.0000000000 |  1.0000000000 | 0.3335921685 |
  | 10.0000000000 |  2.0000000000 | 0.3230844387 |
  | 10.0000000000 |  3.0000000000 | 0.3194594332 |
  | 10.0000000000 |  4.0000000000 | 0.3176227053 |
  | 10.0000000000 |  5.0000000000 | 0.3165127419 |
  | 10.0000000000 |  6.0000000000 | 0.3157694218 |
  | 10.0000000000 |  7.0000000000 | 0.3152368275 |
  | 10.0000000000 |  8.0000000000 | 0.3148364735 |
  | 10.0000000000 |  9.0000000000 | 0.3145245464 |
  | 10.0000000000 | 10.0000000000 | 0.3142746632 |
  | 10.0000000000 | 11.0000000000 | 0.3153479134 |
  | 10.0000000000 | 12.0000000000 | 0.3162532048 |
  | 10.0000000000 | 13.0000000000 | 0.3170271125 |
  | 10.0000000000 | 14.0000000000 | 0.3176963082 |
  | 10.0000000000 | 15.0000000000 | 0.3182807009 |
  | 10.0000000000 | 16.0000000000 | 0.3187954524 |
  | 10.0000000000 | 17.0000000000 | 0.3192523128 |
  | 10.0000000000 | 18.0000000000 | 0.3196605294 |
  | 10.0000000000 | 19.0000000000 | 0.3200274794 |
  | 10.0000000000 | 20.0000000000 | 0.3203591198 |
  | 11.0000000000 |  1.0000000000 | 0.3347578370 |
  | 11.0000000000 |  2.0000000000 | 0.3242000202 |
  | 11.0000000000 |  3.0000000000 | 0.3205576353 |
  | 11.0000000000 |  4.0000000000 | 0.3187120810 |
  | 11.0000000000 |  5.0000000000 | 0.3175967768 |
  | 11.0000000000 |  6.0000000000 | 0.3168498773 |
  | 11.0000000000 |  7.0000000000 | 0.3163147168 |
  | 11.0000000000 |  8.0000000000 | 0.3159124329 |
  | 11.0000000000 |  9.0000000000 | 0.3155990018 |
  | 11.0000000000 | 10.0000000000 | 0.3153479134 |
  | 11.0000000000 | 11.0000000000 | 0.3151422496 |
  | 11.0000000000 | 12.0000000000 | 0.3160467090 |
  | 11.0000000000 | 13.0000000000 | 0.3168199058 |
  | 11.0000000000 | 14.0000000000 | 0.3174884874 |
  | 11.0000000000 | 15.0000000000 | 0.3180723441 |
  | 11.0000000000 | 16.0000000000 | 0.3185866236 |
  | 11.0000000000 | 17.0000000000 | 0.3190430653 |
  | 11.0000000000 | 18.0000000000 | 0.3194509080 |
  | 11.0000000000 | 19.0000000000 | 0.3198175220 |
  | 11.0000000000 | 20.0000000000 | 0.3201488588 |
  | 12.0000000000 |  1.0000000000 | 0.3357410118 |
  | 12.0000000000 |  2.0000000000 | 0.3251409854 |
  | 12.0000000000 |  3.0000000000 | 0.3214839544 |
  | 12.0000000000 |  4.0000000000 | 0.3196309618 |
  | 12.0000000000 |  5.0000000000 | 0.3185111569 |
  | 12.0000000000 |  6.0000000000 | 0.3177612408 |
  | 12.0000000000 |  7.0000000000 | 0.3172239177 |
  | 12.0000000000 |  8.0000000000 | 0.3168200075 |
  | 12.0000000000 |  9.0000000000 | 0.3165053090 |
  | 12.0000000000 | 10.0000000000 | 0.3162532048 |
  | 12.0000000000 | 11.0000000000 | 0.3160467090 |
  | 12.0000000000 | 12.0000000000 | 0.3158744714 |
  | 12.0000000000 | 13.0000000000 | 0.3166470753 |
  | 12.0000000000 | 14.0000000000 | 0.3173151445 |
  | 12.0000000000 | 15.0000000000 | 0.3178985540 |
  | 12.0000000000 | 16.0000000000 | 0.3184124398 |
  | 12.0000000000 | 17.0000000000 | 0.3188685323 |
  | 12.0000000000 | 18.0000000000 | 0.3192760630 |
  | 12.0000000000 | 19.0000000000 | 0.3196423966 |
  | 12.0000000000 | 20.0000000000 | 0.3199734801 |
  | 13.0000000000 |  1.0000000000 | 0.3365814479 |
  | 13.0000000000 |  2.0000000000 | 0.3259453658 |
  | 13.0000000000 |  3.0000000000 | 0.3222758240 |
  | 13.0000000000 |  4.0000000000 | 0.3204164776 |
  | 13.0000000000 |  5.0000000000 | 0.3192928281 |
  | 13.0000000000 |  6.0000000000 | 0.3185403352 |
  | 13.0000000000 |  7.0000000000 | 0.3180011648 |
  | 13.0000000000 |  8.0000000000 | 0.3175958654 |
  | 13.0000000000 |  9.0000000000 | 0.3172800842 |
  | 13.0000000000 | 10.0000000000 | 0.3170271125 |
  | 13.0000000000 | 11.0000000000 | 0.3168199058 |
  | 13.0000000000 | 12.0000000000 | 0.3166470753 |
  | 13.0000000000 | 13.0000000000 | 0.3165007215 |
  | 13.0000000000 | 14.0000000000 | 0.3171683568 |
  | 13.0000000000 | 15.0000000000 | 0.3177513875 |
  | 13.0000000000 | 16.0000000000 | 0.3182649398 |
  | 13.0000000000 | 17.0000000000 | 0.3187207365 |
  | 13.0000000000 | 18.0000000000 | 0.3191280030 |
  | 13.0000000000 | 19.0000000000 | 0.3194940993 |
  | 13.0000000000 | 20.0000000000 | 0.3198249683 |
  | 14.0000000000 |  1.0000000000 | 0.3373081326 |
  | 14.0000000000 |  2.0000000000 | 0.3266408938 |
  | 14.0000000000 |  3.0000000000 | 0.3229605412 |
  | 14.0000000000 |  4.0000000000 | 0.3210957043 |
  | 14.0000000000 |  5.0000000000 | 0.3199687325 |
  | 14.0000000000 |  6.0000000000 | 0.3192140130 |
  | 14.0000000000 |  7.0000000000 | 0.3186732463 |
  | 14.0000000000 |  8.0000000000 | 0.3182667465 |
  | 14.0000000000 |  9.0000000000 | 0.3179500296 |
  | 14.0000000000 | 10.0000000000 | 0.3176963082 |
  | 14.0000000000 | 11.0000000000 | 0.3174884874 |
  | 14.0000000000 | 12.0000000000 | 0.3173151445 |
  | 14.0000000000 | 13.0000000000 | 0.3171683568 |
  | 14.0000000000 | 14.0000000000 | 0.3170424561 |
  | 14.0000000000 | 15.0000000000 | 0.3176251619 |
  | 14.0000000000 | 16.0000000000 | 0.3181384283 |
  | 14.0000000000 | 17.0000000000 | 0.3185939712 |
  | 14.0000000000 | 18.0000000000 | 0.3190010111 |
  | 14.0000000000 | 19.0000000000 | 0.3193669036 |
  | 14.0000000000 | 20.0000000000 | 0.3196975886 |
  | 15.0000000000 |  1.0000000000 | 0.3379427002 |
  | 15.0000000000 |  2.0000000000 | 0.3272482687 |
  | 15.0000000000 |  3.0000000000 | 0.3235584806 |
  | 15.0000000000 |  4.0000000000 | 0.3216888517 |
  | 15.0000000000 |  5.0000000000 | 0.3205589804 |
  | 15.0000000000 |  6.0000000000 | 0.3198023175 |
  | 15.0000000000 |  7.0000000000 | 0.3192601576 |
  | 15.0000000000 |  8.0000000000 | 0.3188526101 |
  | 15.0000000000 |  9.0000000000 | 0.3185350766 |
  | 15.0000000000 | 10.0000000000 | 0.3182807009 |
  | 15.0000000000 | 11.0000000000 | 0.3180723441 |
  | 15.0000000000 | 12.0000000000 | 0.3178985540 |
  | 15.0000000000 | 13.0000000000 | 0.3177513875 |
  | 15.0000000000 | 14.0000000000 | 0.3176251619 |
  | 15.0000000000 | 15.0000000000 | 0.3175157045 |
  | 15.0000000000 | 16.0000000000 | 0.3180287228 |
  | 15.0000000000 | 17.0000000000 | 0.3184840457 |
  | 15.0000000000 | 18.0000000000 | 0.3188908890 |
  | 15.0000000000 | 19.0000000000 | 0.3192566049 |
  | 15.0000000000 | 20.0000000000 | 0.3195871304 |
  | 16.0000000000 |  1.0000000000 | 0.3385016252 |
  | 16.0000000000 |  2.0000000000 | 0.3277832534 |
  | 16.0000000000 |  3.0000000000 | 0.3240851584 |
  | 16.0000000000 |  4.0000000000 | 0.3222113107 |
  | 16.0000000000 |  5.0000000000 | 0.3210788866 |
  | 16.0000000000 |  6.0000000000 | 0.3203205129 |
  | 16.0000000000 |  7.0000000000 | 0.3197771264 |
  | 16.0000000000 |  8.0000000000 | 0.3193686565 |
  | 16.0000000000 |  9.0000000000 | 0.3190504041 |
  | 16.0000000000 | 10.0000000000 | 0.3187954524 |
  | 16.0000000000 | 11.0000000000 | 0.3185866236 |
  | 16.0000000000 | 12.0000000000 | 0.3184124398 |
  | 16.0000000000 | 13.0000000000 | 0.3182649398 |
  | 16.0000000000 | 14.0000000000 | 0.3181384283 |
  | 16.0000000000 | 15.0000000000 | 0.3180287228 |
  | 16.0000000000 | 16.0000000000 | 0.3179326832 |
  | 16.0000000000 | 17.0000000000 | 0.3183878134 |
  | 16.0000000000 | 18.0000000000 | 0.3187944846 |
  | 16.0000000000 | 19.0000000000 | 0.3191600459 |
  | 16.0000000000 | 20.0000000000 | 0.3194904317 |
  | 17.0000000000 |  1.0000000000 | 0.3389976740 |
  | 17.0000000000 |  2.0000000000 | 0.3282580637 |
  | 17.0000000000 |  3.0000000000 | 0.3245525992 |
  | 17.0000000000 |  4.0000000000 | 0.3226750089 |
  | 17.0000000000 |  5.0000000000 | 0.3215403201 |
  | 17.0000000000 |  6.0000000000 | 0.3207804286 |
  | 17.0000000000 |  7.0000000000 | 0.3202359539 |
  | 17.0000000000 |  8.0000000000 | 0.3198266657 |
  | 17.0000000000 |  9.0000000000 | 0.3195077756 |
  | 17.0000000000 | 10.0000000000 | 0.3192523128 |
  | 17.0000000000 | 11.0000000000 | 0.3190430653 |
  | 17.0000000000 | 12.0000000000 | 0.3188685323 |
  | 17.0000000000 | 13.0000000000 | 0.3187207365 |
  | 17.0000000000 | 14.0000000000 | 0.3185939712 |
  | 17.0000000000 | 15.0000000000 | 0.3184840457 |
  | 17.0000000000 | 16.0000000000 | 0.3183878134 |
  | 17.0000000000 | 17.0000000000 | 0.3183028657 |
  | 17.0000000000 | 18.0000000000 | 0.3187093850 |
  | 17.0000000000 | 19.0000000000 | 0.3190748098 |
  | 17.0000000000 | 20.0000000000 | 0.3194050722 |
  | 18.0000000000 |  1.0000000000 | 0.3394408929 |
  | 18.0000000000 |  2.0000000000 | 0.3286823128 |
  | 18.0000000000 |  3.0000000000 | 0.3249702661 |
  | 18.0000000000 |  4.0000000000 | 0.3230893329 |
  | 18.0000000000 |  5.0000000000 | 0.3219526214 |
  | 18.0000000000 |  6.0000000000 | 0.3211913741 |
  | 18.0000000000 |  7.0000000000 | 0.3206459276 |
  | 18.0000000000 |  8.0000000000 | 0.3202359084 |
  | 18.0000000000 |  9.0000000000 | 0.3199164487 |
  | 18.0000000000 | 10.0000000000 | 0.3196605294 |
  | 18.0000000000 | 11.0000000000 | 0.3194509080 |
  | 18.0000000000 | 12.0000000000 | 0.3192760630 |
  | 18.0000000000 | 13.0000000000 | 0.3191280030 |
  | 18.0000000000 | 14.0000000000 | 0.3190010111 |
  | 18.0000000000 | 15.0000000000 | 0.3188908890 |
  | 18.0000000000 | 16.0000000000 | 0.3187944846 |
  | 18.0000000000 | 17.0000000000 | 0.3187093850 |
  | 18.0000000000 | 18.0000000000 | 0.3186337119 |
  | 18.0000000000 | 19.0000000000 | 0.3189990153 |
  | 18.0000000000 | 20.0000000000 | 0.3193291680 |
  | 19.0000000000 |  1.0000000000 | 0.3398392958 |
  | 19.0000000000 |  2.0000000000 | 0.3290636695 |
  | 19.0000000000 |  3.0000000000 | 0.3253457080 |
  | 19.0000000000 |  4.0000000000 | 0.3234617709 |
  | 19.0000000000 |  5.0000000000 | 0.3223232418 |
  | 19.0000000000 |  6.0000000000 | 0.3215607763 |
  | 19.0000000000 |  7.0000000000 | 0.3210144564 |
  | 19.0000000000 |  8.0000000000 | 0.3206037805 |
  | 19.0000000000 |  9.0000000000 | 0.3202838088 |
  | 19.0000000000 | 10.0000000000 | 0.3200274794 |
  | 19.0000000000 | 11.0000000000 | 0.3198175220 |
  | 19.0000000000 | 12.0000000000 | 0.3196423966 |
  | 19.0000000000 | 13.0000000000 | 0.3194940993 |
  | 19.0000000000 | 14.0000000000 | 0.3193669036 |
  | 19.0000000000 | 15.0000000000 | 0.3192566049 |
  | 19.0000000000 | 16.0000000000 | 0.3191600459 |
  | 19.0000000000 | 17.0000000000 | 0.3190748098 |
  | 19.0000000000 | 18.0000000000 | 0.3189990153 |
  | 19.0000000000 | 19.0000000000 | 0.3189311759 |
  | 19.0000000000 | 20.0000000000 | 0.3192612304 |
  | 20.0000000000 |  1.0000000000 | 0.3401993536 |
  | 20.0000000000 |  2.0000000000 | 0.3294083262 |
  | 20.0000000000 |  3.0000000000 | 0.3256850208 |
  | 20.0000000000 |  4.0000000000 | 0.3237983697 |
  | 20.0000000000 |  5.0000000000 | 0.3226581983 |
  | 20.0000000000 |  6.0000000000 | 0.3218946322 |
  | 20.0000000000 |  7.0000000000 | 0.3213475232 |
  | 20.0000000000 |  8.0000000000 | 0.3209362539 |
  | 20.0000000000 |  9.0000000000 | 0.3206158198 |
  | 20.0000000000 | 10.0000000000 | 0.3203591198 |
  | 20.0000000000 | 11.0000000000 | 0.3201488588 |
  | 20.0000000000 | 12.0000000000 | 0.3199734801 |
  | 20.0000000000 | 13.0000000000 | 0.3198249683 |
  | 20.0000000000 | 14.0000000000 | 0.3196975886 |
  | 20.0000000000 | 15.0000000000 | 0.3195871304 |
  | 20.0000000000 | 16.0000000000 | 0.3194904317 |
  | 20.0000000000 | 17.0000000000 | 0.3194050722 |
  | 20.0000000000 | 18.0000000000 | 0.3193291680 |
  | 20.0000000000 | 19.0000000000 | 0.3192612304 |
  | 20.0000000000 | 20.0000000000 | 0.3192000677 |


  #+begin_src lisp :var data=bxby2  :results file 
    (plot2 (sort (loop for (bx by tp) in data collect 
											  (list (+ (* bx (1- by)) (* by (1- bx))) tp))
				 #'> :key #'first) 
		   "bxby4.png" )
  #+end_src

  #+RESULTS:
  [[file:img/bxby4.png]]

*** Single 
    #+begin_src lisp :var data=d4.1  :exports both
	  (linear-fit :data (mapcar (lambda (r) (list (first r) (second r)))
							    data))
    #+end_src

    #+RESULTS:
    | Slope                         | 0.0006843118 |
    | Intercept                     |   0.28062677 |
    | R^2 (Coeff. of Determination) |    0.8839189 |
 
    #+begin_src lisp :var data=d4.1  :exports both
	  (linear-fit :data (mapcar (lambda (r) (list (first r) (exp (second r))))
							    data))
    #+end_src

    #+RESULTS:
    | Slope                         | 0.00091274484 |
    | Intercept                     |     1.3239312 |
    | R^2 (Coeff. of Determination) |    0.88397163 |

*** Conclusion 
    When both bx and by increases the Timeperiod becomes independent of bx by 
** Bay Width for Hight Bx By 
   #+begin_src lisp :results file 
     (table nil 
       (loop for bw from 10 to 40 
	     for tp =  (nth-value 2 
				  (simple-building :number-of-storey 5
						   :height 3
						   :bays-x 20
						   :bays-y 20
						   :bay-width bw
						   :strut t))
	     collect (row bw tp))
       (plot-table :file "bw1.png"))
   #+end_src

   #+RESULTS:
   [[file:img/bw1.png]]

 When slightly changing bx and by the curve changed only slightly. Hence we may find a single equation
 which incorporates bay width too when bx,by>20.

** Tabular 
 Generate a table of regression parameters for T(h,N;a,b) = a(Nh)^b

 | BW/BC | (2,2)   | (2,3) | (3,3) | (3,4) | (4,4) | (4,5) | (5,5) |
 |-------+---------+-------+-------+-------+-------+-------+-------|
 |     3 | (a,b)   |       |       |       |       |       |       |
 |   3.5 |         |       |       |       |       |       |       |
 |     4 |         |       |       |       |       |       |       |
 |   4.5 |         |       |       |       |       |       |       |
 |     5 |         |       |       |       |       |       |       |
 |   ... |         |       |       |       |       |       |       |

*** Power 
  #+begin_src lisp  :exports code  :exports both
    (defun multilinear-params (bw bx by)
	  (let ((data nil))
	    (loop for n from 1 to 8 by 1 do 
		  (loop for h from 2.5 to 4 by 0.1 
			    for tp = (simple-building-ftp* :number-of-storey n
											   :height h
											   :bays-x bx
											   :bays-y by
											   :bay-width bw)
			    do (push (list (list n h) tp) data)))

	    ;; T = (a * (Nh)^b)
	    (multiple-value-bind (parameters r^2)
		    (fit::fit  (lambda (x a b)
						 (* a (expt (* (first x) (second x)) b)))
					   data 
					   '(1 1)
					   t
					   nil)
		  (if (< r^2 0.99) 
			  (append parameters (list r^2))
			  parameters))))

    (let ((hashtable (make-hash-table :test #'equal)))
	  (defun multilinear-params* (bw bx by)
	    (or (gethash (list (coerce bw 'float)
						   (coerce bx 'float)
						   (coerce by 'float))
					 hashtable)
		    (add-mparam bw bx by (multilinear-params bw bx by))))

	  (defun add-mparam (bw bx by value)
	    (setf (gethash (list (coerce bw 'float)
							 (coerce bx 'float)
							 (coerce by 'float))
					   hashtable)
			  value))

	  (defun inspect-hash () 
	    hashtable)

	  (table 7
	    (row "(Bx,By)/ Bw " '(2 2) '(2 3) '(2 4) '(2 5) '(3 3) '(3 4) '(3 5) '(4 4) '(4 5) '(5 5))
	    (loop for bw from 3 to 7 by 0.5
			  for data = nil do
			    (loop for bx from 2 to 5 do
				  (loop for by from bx to 5
					    for params =  (multilinear-params* bw bx by)
					    do
						   (push params data)))
			    (apply #'row bw (reverse data)))))


  #+end_src

 #+Name: Power1
  #+RESULTS:
  | (Bx,By)/ Bw | (2.0000000 2.0000000) | (2.0000000 3.0000000) | (2.0000000 4.0000000) | (2.0000000 5.0000000) | (3.0000000 3.0000000) | (3.0000000 4.0000000) | (3.0000000 5.0000000) | (4.0000000 4.0000000) | (4.0000000 5.0000000) | (5.0000000 5.0000000) |
  |   3.0000000 | (0.0244275 0.9647016) | (0.0253416 0.9633220) | (0.0258749 0.9625754) | (0.0262245 0.9621074) | (0.0252649 0.9591360) | (0.0257884 0.9583373) | (0.0261317 0.9578359) | (0.0257413 0.9561076) | (0.0260812 0.9555874) | (0.0260496 0.9541994) |
  |   3.5000000 | (0.0238873 0.9705270) | (0.0248208 0.9690179) | (0.0253654 0.9681937) | (0.0257218 0.9676846) | (0.0246879 0.9653098) | (0.0252219 0.9644372) | (0.0255719 0.9638908) | (0.0251460 0.9624620) | (0.0254927 0.9618945) | (0.0254436 0.9606624) |
  |   4.0000000 | (0.0239062 0.9624009) | (0.0248739 0.9607952) | (0.0254372 0.9599324) | (0.0258061 0.9593939) | (0.0247078 0.9572976) | (0.0252611 0.9563722) | (0.0256236 0.9557938) | (0.0251690 0.9545028) | (0.0255281 0.9539021) | (0.0254695 0.9527354) |
  |   4.5000000 | (0.0244056 0.9483277) | (0.0254223 0.9466570) | (0.0260137 0.9457619) | (0.0264007 0.9452041) | (0.0252358 0.9432726) | (0.0258173 0.9423130) | (0.0261979 0.9417141) | (0.0257152 0.9405048) | (0.0260925 0.9398832) | (0.0260279 0.9387550) |
  |   5.0000000 | (0.0249093 0.9366508) | (0.0259731 0.9349257) | (0.0265915 0.9340040) | (0.0269960 0.9334305) | (0.0257736 0.9316406) | (0.0263821 0.9306531) | (0.0267803 0.9300379) | (0.0262738 0.9288983) | (0.0266687 0.9282601) | (0.0266006 0.9271652) |
  |   5.5000000 | (0.0254121 0.9268521) | (0.0265214 0.9250818) | (0.0271658 0.9241383) | (0.0275872 0.9235520) | (0.0263137 0.9218829) | (0.0269484 0.9208731) | (0.0273636 0.9202449) | (0.0268364 0.9191646) | (0.0272484 0.9185133) | (0.0271782 0.9174475) |
  |   6.0000000 | (0.0259109 0.9185303) | (0.0270642 0.9167228) | (0.0277338 0.9157615) | (0.0281715 0.9151650) | (0.0268516 0.9135992) | (0.0275116 0.9125716) | (0.0279432 0.9119332) | (0.0273975 0.9109038) | (0.0278260 0.9102424) | (0.0277547 0.9092022) |
  |   6.5000000 | (0.0264039 0.9113790) | (0.0275997 0.9095410) | (0.0282936 0.9085656) | (0.0287470 0.9079609) | (0.0273844 0.9064841) | (0.0280690 0.9054427) | (0.0285164 0.9047965) | (0.0279540 0.9038111) | (0.0283984 0.9031421) | (0.0283267 0.9021247) |
  |   7.0000000 | (0.0268900 0.9051647) | (0.0281270 0.9033022) | (0.0288444 0.9023156) | (0.0293131 0.9017047) | (0.0279106 0.9003052) | (0.0286189 0.8992532) | (0.0290818 0.8986012) | (0.0285038 0.8976543) | (0.0289637 0.8969799) | (0.0288921 0.8959832) |

*** Checking (Scatter Plot)
  
    #+begin_src lisp  :results silent  :exports code
		   (defun simple-building-fitted (&key number-of-storey height bays-x bays-y bay-width)
			 (destructuring-bind (a b . r^2) (multilinear-params* bay-width bays-x bays-y)
			   (* a (expt (* number-of-storey height) b))))

		   (table nil
			 (loop for h from 2.5 to 4 by 0.5 do 
			   (loop for n from 1 to 8 by 1 do
				 (loop for bw from 3 to 7 by 0.5 do 
				   (loop for bx from 2 to 5 do
					 (loop for by from bx to 5 
						   for exact = (simple-building-ftp* :number-of-storey n
															 :height h
															 :bays-x bx
															 :bays-y by
															 :bay-width bw)
						   for fitted = (simple-building-fitted :number-of-storey n
															    :height h
															    :bays-x bx
															    :bays-y by
															    :bay-width bw)
						   do
							  (row exact fitted))))))

			  (cl-csv:write-csv (slot-value *table* 'list)
							    :stream (merge-pathnames "scatter1.csv" *img-path*)))
    #+end_src

    #+begin_src gnuplot :results file :file scatter1.png :colnames yes 
    cd "./img/"
    set datafile separator ","
    set terminal png font "Times New Roman, 30pt" size 1500,1100
    set xlabel "Exact Timeperiod"
    set ylabel "Fitted Timeperiod"
    plot 'scatter1.csv' with point title "fit", x with lines title "exact"
    #+end_src

    #+RESULTS:
    [[file:scatter1.png]]

 Maximum difference between exact and fitted timeperiod is: 

 #+begin_src lisp :exports both
   (loop for (exact fitted) in   (cl-csv:read-csv (merge-pathnames "scatter1.csv" *img-path*)
												  :data-map-fn (lambda (f &key csv-reader)
																 (declare (ignore csv-reader))
																 (parse-float:parse-float f)))
		 maximizing (abs (- exact fitted)))

 #+end_src

 #+RESULTS:
 : 0.032970548

 # Local Variables:
 # org-export-use-babel: nil
 # End:

*** Further Relation 
**** For (Bx,By) = (2,2)
***** parameter 'a'
	 #+begin_src lisp   :exports both
  (table nil 
	   (loop with bx = 2 
			 with by = 2
			 for bw from 3 to 7 by 0.1
			 for (a b) = (multilinear-params bw bx by) 
			 do (row bw a b))
			 (plot-table :file "a.png"))
	 #+end_src

	 #+RESULTS:
	 : img/a.png

  [[./img/a.png]]

  Seems that for bay width > 3.8m a linear relation can be developed 

   #+begin_src lisp   :exports both
  (table nil 
	   (loop with bx = 2 
			 with by = 2
			 for bw from 3.8 to 7 by 0.1
			 for (a b) = (multilinear-params bw bx by) 
			 do (row bw a b))
  (plot-table :file "a2.png")
  (linear-fit))
  #+end_src

  #+RESULTS:
  | Slope                         |   9.977753826677519d-4 |
  | Intercept                     | 0.019918658126217216d0 |
  | R^2 (Coeff. of Determination) |    0.999979396417932d0 |

  Nice!!


   a = 0.019918 + 0.000997 * BW 

***** parameter 'b' 
	 #+begin_src lisp :results file   :exports both
  (table nil 
	   (loop with bx = 2 
			 with by = 2
			 for bw from 3 to 7 by 0.1
			 for (a b) = (multilinear-params bw bx by) 
			 do (row bw b))
			 (plot-table :file "b.png"))
	 #+end_src

	 #+RESULTS:
	 [[file:img/b.png]]

  This also seems to be well represented by linear or 2nd degree curve 

    #+begin_src lisp   :exports both
  (table nil 
	   (loop with bx = 2 
			 with by = 2
			 for bw from 3.8 to 7 by 0.1
			 for (a b) = (multilinear-params bw bx by) 
			 do (row bw b))
			 (linear-fit))
	 #+end_src

	 #+RESULTS:
	 | Slope                         | -0.019423366581710257d0 |
	 | Intercept                     |    1.0364598719571967d0 |
	 | R^2 (Coeff. of Determination) |    0.9799846588897709d0 |
 
    #+begin_src lisp   :exports both
  (table nil 
	   (loop with bx = 2 
			 with by = 2
			 for bw from 3.8 to 7 by 0.1
			 for (a b) = (multilinear-params bw bx by) 
			 do (row bw b))
			 (polynomial2-fit))
	 #+end_src

	 #+RESULTS:
	 | Equation =             |        a*x^2 + b*x + c |
	 | Parameter              |         Confidence +/- |
	 | 0.003234834670469904d0 |  0.21495656298865945d0 |
	 | -0.05435972225067412d0 |   2.3287175827248743d0 |
	 | 1.1278555037900393d0   |     6.15541288642883d0 |
	 | chisq/dof              | 0.001979392872126398d0 |
	 | R^2                    |   0.9996598480591643d0 |


  Nice!!
  for Bw>3.8 b = 0.00323 * x^2 -0.05436 x + 1.1278 

**** Does this generalize to other Bx,By's ?
***** parameter 
	 #+begin_src lisp   :exports both
	   (defun bw-params (bx by)
		 (let (as bs)
		   (loop for bw from 3 to 7 by 0.1
				 for (a b) = (multilinear-params* bw bx by)  do 
							 (push (list bw a) as)
							 (push (list bw b) bs))
		   (multiple-value-bind (_ slope intercept) (linear-fit :data as)
			 (destructuring-bind (a b c) (fit::fit (lambda (x a b c) (+  c (* b x) (* a (expt x 2)))) bs '(1 1 1) t nil)
			   (list slope intercept a b c)))))

	   (table 10
		 (loop for bx from 2 to 5 do
		   (loop for by from bx to 5 do
			 (apply #'row bx by (bw-params bx by)))))
		
	 #+end_src

	 #+Name: bw1
	 #+RESULTS:
	 | 2.0000000000 | 2.0000000000 | 0.0007796370 | 0.0211800553 | -0.0002078515 | -0.0162787901 | 1.0255129565 |
	 | 2.0000000000 | 3.0000000000 | 0.0008652064 | 0.0218172359 | -0.0001820328 | -0.0166481253 | 1.0249848242 |
	 | 2.0000000000 | 4.0000000000 | 0.0009140431 | 0.0221921638 | -0.0001684829 | -0.0168381479 | 1.0246721057 |
	 | 2.0000000000 | 5.0000000000 | 0.0009456844 | 0.0224389931 | -0.0001599644 | -0.0169559737 | 1.0244733702 |
	 | 3.0000000000 | 3.0000000000 | 0.0008360248 | 0.0217801675 | -0.0002535942 | -0.0156931093 | 1.0187409686 |
	 | 3.0000000000 | 4.0000000000 | 0.0008851152 | 0.0221441008 | -0.0002380677 | -0.0159060367 | 1.0184275361 |
	 | 3.0000000000 | 5.0000000000 | 0.0009169016 | 0.0223839471 | -0.0002284530 | -0.0160363006 | 1.0182217615 |
	 | 4.0000000000 | 4.0000000000 | 0.0008711111 | 0.0221143029 | -0.0002751805 | -0.0154073988 | 1.0151213688 |
	 | 4.0000000000 | 5.0000000000 | 0.0009030084 | 0.0223503604 | -0.0002649689 | -0.0155442710 | 1.0149105635 |
	 | 5.0000000000 | 5.0000000000 | 0.0008948545 | 0.0223281151 | -0.0002876497 | -0.0152380082 | 1.0128598758 |
	
 Doesn't seem so.

**** For Bx,By > 20 
***** Data
	 #+begin_src lisp   :exports both
	 (table 10 
	 (loop for bw from 3 to 7 by 0.5
	 for (a b) = (multilinear-params* bw 20 20) do 
	 (row bw a b)))
	 #+end_src

	 #+Name:bxby2020
	 #+RESULTS:
	 | 3.0000000000 | 0.0270986470 | 0.9479932088 |
	 | 3.5000000000 | 0.0264627042 | 0.9547834750 |
	 | 4.0000000000 | 0.0265025352 | 0.9469562381 |
	 | 4.5000000000 | 0.0271061145 | 0.9330371470 |
	 | 5.0000000000 | 0.0277292629 | 0.9215070876 |
	 | 5.5000000000 | 0.0283599510 | 0.9118475095 |
	 | 6.0000000000 | 0.0289907634 | 0.9036594899 |
	 | 6.5000000000 | 0.0296172410 | 0.8966391871 |
	 | 7.0000000000 | 0.0302367584 | 0.8905551892 |

	 #+begin_src lisp   :exports both
	 (table 10 
	 (loop for bw from 3 to 7 by 0.5
	 for (a b) = (multilinear-params* bw 30 30) do 
	 (row bw a b)))
	 #+end_src
	
	 #+Name:bxby3030
	 #+RESULTS:
	 | 3.0000000000 | 0.0272288201 | 0.9472530316 |
	 | 3.5000000000 | 0.0265897930 | 0.9540797498 |
	 | 4.0000000000 | 0.0266317996 | 0.9462640591 |
	 | 4.5000000000 | 0.0272412973 | 0.9323528547 |
	 | 5.0000000000 | 0.0278709574 | 0.9208305830 |
	 | 5.5000000000 | 0.0285084399 | 0.9111786961 |
	 | 6.0000000000 | 0.0291461491 | 0.9029983355 |
	 | 6.5000000000 | 0.0297795194 | 0.8959857136 |
	 | 7.0000000000 | 0.0304058621 | 0.8899094487 |

	 #+begin_src lisp   :exports both
	 (table 10 
	 (loop for bw from 3 to 7 by 0.5
	 for (a b) = (multilinear-params* bw 40 40) do 
	 (row bw a b)))
	 #+end_src

	 #+Name: bxby4040
	 #+RESULTS:
	 | 3.0000000000 | 0.0272950799 | 0.9468787241 |
	 | 3.5000000000 | 0.0266545345 | 0.9537236770 |
	 | 4.0000000000 | 0.0266976830 | 0.9459138065 |
	 | 4.5000000000 | 0.0273102176 | 0.9320066464 |
	 | 5.0000000000 | 0.0279432115 | 0.9204883764 |
	 | 5.5000000000 | 0.0285841675 | 0.9108404486 |
	 | 6.0000000000 | 0.0292253992 | 0.9026640350 |
	 | 6.5000000000 | 0.0298622874 | 0.8956553732 |
	 | 7.0000000000 | 0.0304921118 | 0.8895830948 |
	
	 #+begin_src lisp   :exports both
	 (table 10 
	 (loop for bw from 3 to 7 by 0.5
	 for (a b) = (multilinear-params* bw 50 30) do 
	 (row bw a b)))
	 #+end_src

	 #+Name: bxby5030
	 #+RESULTS:
	 | 3.0000000000 | 0.0273474405 | 0.9470737967 |
	 | 3.5000000000 | 0.0267105832 | 0.9538855342 |
	 | 4.0000000000 | 0.0267568683 | 0.9460600643 |
	 | 4.5000000000 | 0.0273726899 | 0.9321434133 |
	 | 5.0000000000 | 0.0280084945 | 0.9206171848 |
	 | 5.5000000000 | 0.0286519374 | 0.9109625303 |
	 | 6.0000000000 | 0.0292954238 | 0.9027803603 |
	 | 6.5000000000 | 0.0299343927 | 0.8957667061 |
	 | 7.0000000000 | 0.0305661626 | 0.8896900422 |
	
***** Average Trend

	  #+begin_src lisp :var  data1=bxby5030 data2=bxby4040 data3=bxby3030 data4=bxby2020   :exports both
	    (table 10
		  (loop for bw from 3 to 7 by 0.5
			    with n = 4
			    for sa = 0 
			    for sb = 0  
			    for i from 0 do 
				  (loop for data in (list data1 data2 data3 data4)
					    for (_ a b) = (nth i data) do 
					    (incf sa a)
					    (incf sb b))
				  (row bw (/ sa n) (/ sb n))))
	  #+end_src

	  #+Name: avgbxby
	  #+RESULTS:
	  | 3.0000000000 | 0.0272424970 | 0.9472997000 |
	  | 3.5000000000 | 0.0266044030 | 0.9541181300 |
	  | 4.0000000000 | 0.0266472210 | 0.9462985400 |
	  | 4.5000000000 | 0.0272575780 | 0.9323849700 |
	  | 5.0000000000 | 0.0278879830 | 0.9208608000 |
	  | 5.5000000000 | 0.0285261240 | 0.9112073000 |
	  | 6.0000000000 | 0.0291644330 | 0.9030255000 |
	  | 6.5000000000 | 0.0297983600 | 0.8960117700 |
	  | 7.0000000000 | 0.0304252240 | 0.8899344000 |
***** Plot
	 #+begin_src gnuplot :var avg=avgbxby data1=bxby5030 data2=bxby4040 data3=bxby3030 data4=bxby2020 :results file  :file "bxby-20up.png"
	 plot avg with lines title "Average", data using 1:2 with points title "(50,30)", data2 title "(40,40)", data3 title "(30,30)", data4 title "(20,20)"
	 #+end_src

	 #+RESULTS:
	 [[file:bxby-20up.png]]

	 #+begin_src gnuplot :var avg=avgbxby data1=bxby5030 data2=bxby4040 data3=bxby3030 data4=bxby2020 :results file  :file "bxby-20up-b.png"
	 plot avg using 1:3 with lines title "Average" , data1 using 1:3 with points title "(50,30)", data2 using 1:3 title "(40,40)", data3 using 1:3 title "(30,30)", data4 using 1:3 title "(20,20)"
	 #+end_src

	 #+RESULTS:
	 [[file:bxby-20up-b.png]]


**** For Bx,By < 20 
***** Bx=2 
     #+begin_src lisp 
       (defun ab-vs-bw (bx by) 
	 (loop for bw from 3 to 7 by 0.5
	       collect (multilinear-params* bw bx by)))

       (table 5
	 (apply #'row (loop for bw from 3 to 7 by 0.5 collect bw))
	 (loop with bx = 2
	       for by from 2 to 5 do 
		 (apply #'row (mapcar #'first (ab-vs-bw bx by)))))	
     #+end_src

     #+RESULTS:
     | 3.00000 | 3.50000 | 4.00000 | 4.50000 | 5.00000 | 5.50000 | 6.00000 | 6.50000 | 7.00000 |
     | 0.02443 | 0.02389 | 0.02391 | 0.02441 | 0.02491 | 0.02541 | 0.02591 | 0.02640 | 0.02689 |
     | 0.02534 | 0.02482 | 0.02487 | 0.02542 | 0.02597 | 0.02652 | 0.02706 | 0.02760 | 0.02813 |
     | 0.02587 | 0.02537 | 0.02544 | 0.02601 | 0.02659 | 0.02717 | 0.02773 | 0.02829 | 0.02884 |
     | 0.02622 | 0.02572 | 0.02581 | 0.02640 | 0.02700 | 0.02759 | 0.02817 | 0.02875 | 0.02931 |

 Rows are Bx=2 , By = 2 to 5 
 and columns are bw from 3 to 7

 Table shows that for same bay width, as number of bays increases in one direction then the time period increases. 
 (this property was tested for bx=5, by= 5 to 10)
 but If we take bx=5, by= 2 to 5, then the time period decreases as ~By~ increases. This is also consistent to above statement. 

 *In general for one bay count ~Bc~ kept constant, the timeperiod increases as ~Bx - Bc~ increases for  another bay count ~Bx~.*

 This property is also evident from the 3d plot [[ref:BayWidthContour][ref:BayWidthContour]]. Also, from the countour is can be seen that the effect of changing the samaller bay count is greater than changing the larger one. It is because the fundamental timeperiod belongs to the vibrational mode shape in the thinner direction i.e. corresponding to smaller bay count.

*** Equation (for bw>3.8)
 Coefficient A: 

	  #+begin_src lisp :var data=avgbxby   :exports both
	    (linear-fit :data (remove-if #'(lambda (x) (< x 3.8)) data :key #'first))
	  #+end_src

	  #+RESULTS:
	  | Slope                         | 0.0012637158 |
	  | Intercept                     |  0.021579126 |
	  | R^2 (Coeff. of Determination) |    1.0000279 |

 Coefficient B: 
	  #+begin_src lisp :var data=avgbxby   :exports both
	    (polynomial2-fit :data (mapcar #'(lambda (r) (list (first r) (third r)))
									   (remove-if #'(lambda (x) (< x 3.8)) data :key #'first)))
	  #+end_src

	  #+RESULTS:
	  | Equation =             |       a*x^2 + b*x + c |
	  | Parameter              |        Confidence +/- |
	  | 0.003079834438503267d0 | 0.43643578047198206d0 |
	  | -0.0524263268425085d0  |   4.815649093370065d0 |
	  | 1.1063461644308161d0   |  12.939419284827656d0 |
	  | chisq/dof              |   8.84109645303372d-4 |
	  | R^2                    |  0.9996821031994259d0 |

 So, 

 $T = a (Nh)^b$ 
 where,  
 + $a$ is given from [[Power1][table]]. For $N_{bays_x}, N_{bays_y} > 20$, $a = 0.0012567158 w + 0.02157912$
 + $b$ is given from [[Power1][table]]. For $N_{bays_x}, N_{bays_y} > 20$, $b = 0.0030798 w^2 -0.052426 w + 1.106346$ 

 Using above equation for bays count less than 20 gives: 

  #+begin_src lisp  :results silent  :exports code  
    (defun simple-building-fitted2 (&key number-of-storey height bays-x bays-y bay-width)
	  (let ((a (+ (* bay-width 0.0012567158) 0.02157912))
		    (b (+ 1.106346 (* -0.052426 bay-width) (* 0.0030798 (expt bay-width 2)))))
	    (* a (expt (* number-of-storey height) b))))

    (table nil
	  (loop for h from 2.5 to 4 by 0.5 do 
	    (loop for n from 1 to 8 by 1 do
		  (loop for bw from 3 to 7 by 0.5 do 
		    (loop for bx from 2 to 5 do
			  (loop for by from bx to 5 
				    for exact = (simple-building-ftp* :number-of-storey n
													  :height h
													  :bays-x bx
													  :bays-y by
													  :bay-width bw)
				    for fitted = (simple-building-fitted2 :number-of-storey n
														 :height h
														 :bays-x bx
														 :bays-y by
														 :bay-width bw)
				    do
					   (row exact fitted))))))

	  (cl-csv:write-csv (slot-value *table* 'list)
					    :stream (merge-pathnames "scatter2.csv" *img-path*)))
    #+end_src

    #+begin_src gnuplot :results file :file scatter2.png :colnames yes 
    cd "./img/"
    set datafile separator ","
    set terminal png font "Times New Roman, 30pt" size 1500,1100
    set xlabel "Exact Timeperiod"
    set ylabel "Fitted Timeperiod"
    plot 'scatter2.csv' with point title "fit", x with lines title "exact"
    #+end_src

    #+RESULTS:
    [[file:scatter2.png]]

 Statistics of difference between exact and fitted timeperiod is: 
 #+begin_src lisp :exports both  
   (let ((data (loop for (exact fitted) in   (cl-csv:read-csv (merge-pathnames "scatter2.csv" *img-path*)
							      :data-map-fn (lambda (f &key csv-reader)
									     (declare (ignore csv-reader))
									     (parse-float:parse-float f)))
		     collect (- exact fitted))))
     (statistical-summary data))
 #+end_src

 #+RESULTS:
 | LENGTH   |          2880 |
 | MINIMUM  |  -0.057074904 |
 | RANGE    |    0.08699304 |
 | MAXIMUM  |   0.029918134 |
 | MEDIAN   |  -0.008258164 |
 | MODE     |  -0.009347968 |
 | MEAN     |  -0.008989479 |
 | VARIANCE | 0.00014795535 |
 | SD       |   0.012163689 |
 | IQR      |    0.01595125 |
 | SKEWNESS |   -0.40318704 |

 Fitted +0.03 to - 0.06 = Exact 
 Std = 0.012 

 This difference can be even more refined/decreased, when we average over different heights for the above computed averages.

** Variation in Bay width 
*** Lets consider only 2by2 bays buildings 
   #+begin_src lisp 
     (table 4 
       (loop for bw from 3 to 10
	     for tp = (building-ftp* :number-of-storey 3
				     :height 3
				     :l (vector 3 bw)
				     :b (vector 3 3)) do 
				     (row bw tp)))

   #+end_src

   #+RESULTS:
   |  3.0000 | 0.2036 |
   |  4.0000 | 0.2140 |
   |  5.0000 | 0.2243 |
   |  6.0000 | 0.2342 |
   |  7.0000 | 0.2438 |
   |  8.0000 | 0.2532 |
   |  9.0000 | 0.2623 |
   | 10.0000 | 0.2711 |

   #+begin_src artist


	  +---------------------+----------------------+
	  |		       	   |			  |
	  |		       	   |			  |
     wc=3 |		       	   | 			  |
	  |		       	   | 			  |
	  |		       	   | 			  |
	  |		       	   | 			  |
	  |		       	   | 			  |
	  +---------------------+----------------------+
	  | 		       	   | 			  |
	  | 		           | 			  |
      wc=3| 		           | 			  |
	  |		           | 			  |
	  |		       	   | 			  |
	  |		       	   | 			  |
	  +---------------------+----------------------+


		    wc=3    			    x
   #+end_src

 As x increases the time period increases. 
 This is independent of the constant width wc, and the number of stories.

 #+begin_src lisp 
 (table 4 
       (loop for bw from 3 to 10
	     for tp = (building-ftp* :number-of-storey 3
				     :height 3
				     :l (vector 10  bw)
				     :b (vector 10 10)) do 
				     (row bw tp)))
 #+end_src

 #+RESULTS:
 |  3.0000 | 0.2253 |
 |  4.0000 | 0.2215 |
 |  5.0000 | 0.2174 |
 |  6.0000 | 0.2138 |
 |  7.0000 | 0.2105 |
 |  8.0000 | 0.2076 |
 |  9.0000 | 0.2050 |
 | 10.0000 | 0.2027 |

*** Lets randomize 50% 

*** For 2 by 2 bays 
* Big Data 
** Generate 
 Generate data 
  #+begin_src lisp  :results silent  :exports code  
    (defparameter *bigdata* nil)
    (with-open-file (stream (merge-pathnames "bigdata.csv" *img-path*) :direction :output
									  :if-exists :supersede)
         (let (bigdata)
	 (loop for h from 2.5 to 4 by 0.5 do 
	   (loop for n from 1 to (truncate 40 h) by 1 do
	     (loop for bw from 3 to 7 by 0.5 do 
	       (loop for bx from 2 to 5 do
		 (loop for by from bx to 5 
		       for exact = (simple-building-ftp* :number-of-storey n
							 :height h
							 :bays-x bx
							 :bays-y by
							 :bay-width bw)
		       do 
			  (cl-csv:write-csv-row (list n h bw bx by exact)
						:stream stream)
			  (push (list (list n h bw bx by) exact) bigdata))))))
	 (setf *bigdata* bigdata)))

    #+end_src

** Read
   #+begin_src lisp
     (let (bigdata)
       (cl-csv:read-csv (merge-pathnames "bigdata.csv" *img-path*)
			:data-map-fn #'(lambda (data &key csv-reader)
					 (declare (ignore csv-reader))
					 (let (( *read-default-float-format* 'double-float))
					   (read-from-string data)))
			:row-fn #'(lambda (row)
				    (push (list (butlast row) (first (last row)))
					  bigdata)))
       (setf *bigdata* (reverse bigdata)))

nil
   #+end_src  

   #+RESULTS:
   : NIL

* Fittings 
** big  fit 
 Biggest regression fitting!! 

 Now Fit the big data  to [[*Equation (for bw>3.8)][Equation (for bw>3.8)]] form. 

 #+begin_src lisp 
   (fit (lambda (x a1 a2 b1 b2 b3)
	  (let ((n (first x))
		(h (second x))
		(bw (third x)))
	    (* (+ (* a1 bw) a2)
	       (expt (* n h)
		     (+ (* b1 (expt bw 2))
			(* b2 bw)
			b3)))))
	'(0 0.002 0 0 1)
	:data *bigdata*)
 #+end_src

 #+Name:bigfitparams
 #+RESULTS:
 |               Parameter |         Confidence +/- |
 |  -1.2828158315110436d-4 | 0.004697467217150748d0 |
 |  0.025765777808905314d0 | 0.025336618476049542d0 |
 |  0.001581608568009055d0 |   7.425643320662065d-4 |
 | -0.013425780639467524d0 | 0.054568266872417816d0 |
 |    1.0095695872246242d0 |   0.2913118044360126d0 |
 |               chisq/dof |   1.5995076426057973d0 |
 |                     R^2 |   0.9920604312231578d0 |

*** Scatter Plot

 #+begin_src lisp  :results silent  :exports code  :var params=bigfitparams 
   (destructuring-bind (a1 a2 b1 b2 b3) (fit-params params)
     (scatter-csv (lambda (x)
		    (let ((n (first x))
			  (h (second x))
			  (bw (third x)))
		      (* (+ (* a1 bw) a2)
			 (expt (* n h)
			       (+ (* b1 (expt bw 2))
				  (* b2 bw)
				  b3)))))
		  "scatter3.csv"))
   #+end_src
  
   #+Name:scatterPlot 
   #+begin_src gnuplot :var file="scatter3.csv" :results file :file scatter3.png 
   cd "./img/"
   set datafile separator ","
   set terminal png font "Times New Roman, 30pt" size 1500,1100
   set xlabel "Exact Timeperiod"
   set ylabel "Fitted Timeperiod"
   plot file with point title "fit", x with lines title "exact"
   #+end_src

   #+RESULTS: scatterPlot
   [[file:scatter3.png]]

*** Results   
 Statistics of difference between exact and fitted timeperiod is: 

    #+begin_src lisp :exports both  :var params=bigfitparams
      (destructuring-bind (a1 a2 b1 b2 b3) (fit-params params)
	(max-%diff (lambda (x)
		    (let ((n (first x))
			  (h (second x))
			  (bw (third x)))
		      (* (+ (* a1 bw) a2)
			 (expt (* n h)
			       (+ (* b1 (expt bw 2))
				  (* b2 bw)
				  b3)))))
		  ))
    #+end_src 

 #+RESULTS:
 : 24\.389604211517113d0

 So, 

 $T = a (Nh)^b$ 
 where,  
 + $N$ is number of storeys
 + $h$ is height of each floor 
 + $a = 0.0011986135648457729 w + 0.020683094007570582$
 + $b = 0.0017003213576228672 w^2 -0.03881567937728688 w + 1.07997568167311$
 + $w$ is bay width 

 # Local Variables:
 # org-export-use-babel: nil
 # End:

** Another fitting 

 #+begin_src lisp 
   (fit (lambda (x a1 a2 b1 b2 b3)
	  (let ((n (first x))
		(h (second x))
		(bw (third x)))
	    (* (+ (* a1 bw) a2)
	       (expt (* n h)
		     (+ (* b1 (expt bw 2))
			(* b2 bw)
			b3)))))
	'(0.0001256 0.002 0.003 -0.0524 1.106346)
	:data (remove-if (lambda (d) (< (second (first d)) 3.8)) *bigdata*))
 #+end_src

 #+RESULTS:
 |               Parameter |         Confidence +/- |
 |   -8.530047018275187d-4 | 0.013080038250312039d0 |
 |   0.02940597800417694d0 |  0.07162296969507422d0 |
 | 0.0014097311410013946d0 | 0.002551693404344435d0 |
 | -0.009908458981380455d0 |  0.15127390650671432d0 |
 |    0.9852551371024932d0 |   0.8172888739290516d0 |
 |               chisq/dof |  0.30433806037043326d0 |
 |                     R^2 |   0.9970028221774895d0 |

** Simple Power Formula 
T = a (Nh)^b 
 #+begin_src lisp 
   (power-fit :data (mapcar (lambda (d)
			      (destructuring-bind ((n h bw bx by) tp) d
				(list (* n h) tp)))
			    *bigdata*))
 #+end_src

 #+Name:simplefitparams
 #+RESULTS:
 | Equation =            |                  a*x^b |
 | Parameter             |         Confidence +/- |
 | 0.03415927637784191d0 | 0.010126006602171589d0 |
 | 0.8131438130928438d0  |  0.08690063277352969d0 |
 | chisq/dof             |   3.2783309445378155d0 |
 | R^2                   |   0.9336717886816157d0 |


 
  #+begin_src lisp  :results value   :exports code  :var params=simplefitparams
    (destructuring-bind (a b) (fit-params (rest params))
      (max-%diff (lambda (x) 
		  (* a (expt (* (first x) (second x)) b)))))
    #+end_src

    #+RESULTS:
    : 33\.88282667480804d0
   
*** plot 

  #+begin_src lisp  :results value   :exports code  :var params=simplefitparams
    (destructuring-bind (a b) (fit-params (rest params))
      (fit-check-csv (lambda (x) 
		       (* a (expt (* (first x) (second x)) b)))
		     (lambda (x) (* (first x) (second x)))
		     "fullPlot1.csv"))
    #+end_src

   #+RESULTS:
   : NIL
   
   #+Name: checkFitw
   #+begin_src gnuplot :var x="Nh" y="Fundamental Timeperiod" csv="fullPlot1.csv" :results file :file "img/fullPlot1.png"
     set terminal png 
     set output "img/fullPlot1.png"
     cd "./img/"
     set datafile separator ","
     set terminal png font "Times New Roman, 30pt" size 1500,1100
     set xlabel x
     set ylabel y
     plot csv with point title "data", csv using 1:3 with line title "fit"
   #+end_src

   #+RESULTS: checkFitw
   [[file:img/fullPlot1.png]]

   #+RESULTS: checkFit
   [[file:img/fullPlot1.png]]

  
*** scatter plot 
 #+begin_src lisp  :results silent  :exports code  :var params=simplefitparams
  (destructuring-bind (a b) (fit-params (rest params))
     (scatter-csv (lambda (x) (* a (expt (* (first x) (second x)) b)))
		  "scatter-simple.csv"))
   #+end_src
  
 #+Call: scatterPlot(file="scatter-simple.csv") :results file :file scatter-simple.png

 #+RESULTS:
 [[file:scatter-simple.png]]

** Variations at higher Nh~40
*** data 
There is lots of variation in timeperiod for higher Nh~40 
#+begin_src lisp 
  (defparameter *nh40* (loop for d in *bigdata*
			     for (x tp) = d
			     for (n h ._) = x
			     when (= (* n h) 40)
			       collect d))
#+end_src

#+RESULTS:
: *NH40*

   #+begin_src lisp 
     (defparameter *n16nh40* (loop for d in *bigdata*
				  for (x tp) = d
				  for (n h ._) = x
				  when (and (= (* n h) 40) (= n 16))
				    collect d))
     (defparameter *n10nh40* (loop for d in *bigdata*
				  for (x tp) = d
				  for (n h ._) = x
				  when (and (= (* n h) 40) (= n 10))
				    collect d))
     (defparameter *n16nh40bx5by5* (loop for d in *bigdata*
					 for (x tp) = d
					 for (n h bw bx by) = x
					 when (and (= (* n h) 40) (= n 10) (= bw 5 ) (= by 2))
					   collect d) )
    #+end_src

    #+RESULTS:
    : *N16NH40BX5BY5*

*** plot  (not really)
#+begin_src lisp :results file 
  (with-plot "nh40.png"
    (setup)
    (let* ((i 0)
	   (data (mapcar (lambda (d)
			   (list (incf i) (second d)))
			*nh40*)))
      (ezplot data 
	      :title "x=bx at nh=40, y=tp"
	      :with '(:points))))
#+end_src

#+RESULTS:
[[file:./img/nh40.png]]

*** bay width 
#+begin_src lisp :results file 
  (with-plot "n16nh40.png"
    (setup)
    (let ((data (mapcar (lambda (d)
			  (list (third (first d)) (second d)))
			*n16nh40*)))
      (ezplot data 
	      :title "x=bw at nh=40, y=tp"
	      :with '(:points))))
#+end_src

#+RESULTS:
[[file:./img/n16nh40.png]]

linear variation with tp. but tere must be a lot of unexplained variance. 
#+begin_src lisp 
(linear-fit :data (mapcar (lambda (d) (list (third (first d)) (second d)))
*n16nh40*))
#+end_src

#+RESULTS:
| Slope                         | -0.041315306726689247d0 |
| Intercept                     |    0.8594413721337439d0 |
| R^2 (Coeff. of Determination) |    0.3717438520002681d0 |

70% variance is explained by bay width.

**** another data 
#+begin_src lisp :results file 
  (with-plot "n10nh40.png"
    (setup)
    (let ((data (mapcar (lambda (d)
			  (list (third (first d)) (second d)))
			*n10nh40*)))
      (ezplot data 
	      :title "x=bw at nh=40, y=tp"
	      :with '(:points))))
#+end_src

#+RESULTS:
[[file:./img/n10nh40.png]]

There is linear variation but it is decreasing

*** bay count bx 

seems like the average Tp is constant for bay count bx. hence its doesn't have much effect. 
*** bay count min 
#+begin_src lisp :results file 
  (with-plot "n16nh40-minbxby.png"
    (setup)
    (let ((data (mapcar (lambda (d)
			  (list (max (fifth (first d)) (fourth (first d))) (second d)))
			*n16nh40*)))
      (ezplot data 
	      :title "x=bx at nh=40, y=tp"
	      :with '(:points))))
#+end_src

#+RESULTS:
[[file:./img/n16nh40-minbxby.png]]

shows slightly linear variation with minimum bx 

#+begin_src lisp 
(linear-fit :data (mapcar (lambda (d)
			  (list (max (fifth (first d)) (fourth (first d))) (second d)))
			*n16nh40*))
#+end_src

#+RESULTS:
| Slope                         | 0.02002696311651236d0 |
| Intercept                     |  0.8986320475193129d0 |
| R^2 (Coeff. of Determination) | 0.26029315205914677d0 |

26% of the variance is explained by min(bx,by)

in total bw and min(bx,by) explains 96% variance
*** multilinear regression 
    #+begin_src lisp 
      (fit (lambda (x a b c)
	     (+ a
		(* b (third x))
		(* c (min (fourth x) (fifth x)))))
	   '(1 1 1)
	   :data *n16nh40*)
    #+end_src

    #+RESULTS:
    |               Parameter |        Confidence +/- |
    |    0.8342579636053256d0 |  0.5270462766947304d0 |
    |  0.025393453519831688d0 |  0.0816496580927727d0 |
    | 0.0058382229269585695d0 | 0.10540925533894595d0 |
    |               chisq/dof | 0.19719788461973298d0 |
    |                     R^2 |  0.7195893262363278d0 |

but the multilinear regression explains only 72% of the variance.

and for n10nh40: 
#+begin_src lisp 
   (fit (lambda (x a b c)
	     (+ a
		(* b (third x))
		(* c (min (fourth x) (fifth x)))))
	   '(1 1 1)
	   :data *n10nh40*)

#+end_src

#+RESULTS:
|               Parameter |        Confidence +/- |
|    1.0160990235355851d0 |  0.5270462766947308d0 |
| -0.019637616581576787d0 | 0.08164965809277289d0 |
|    -5.79143189838055d-4 | 0.10540925533894606d0 |
|               chisq/dof | 0.19494817085898813d0 |
|                     R^2 |  0.6036228493926368d0 |

The parameter values are slightly different. and explained variance is 60%

For nh40
#+begin_src lisp
  (multilinear-fit :data (mapcar (lambda (d)
				   (destructuring-bind ((n h bw bx by) tp) d
				     (list (list bw (min bx by)) tp)))
				 *n10nh40*))
#+end_src

#+RESULTS:
|               Parameter |        Confidence +/- |
|    1.0160990235355851d0 |  0.5270462766947308d0 |
| -0.019637616581576787d0 | 0.08164965809277289d0 |
|    -5.79143189838055d-4 | 0.10540925533894606d0 |
|               chisq/dof | 0.19494817085898813d0 |
|                     R^2 |  0.6036228493926368d0 |

*** custom
    #+begin_src lisp 
      (defun data(&key n h bw bx by)
	(loop for d in *bigdata*
	      for (x tp) = d
	      for (nn hh bwbw bxbx byby) = x
	      when (and (or (not n) (= n nn))
			(or (not h) (= h hh))
			(or (not bw) (= bw bwbw))
			(or (not bx) (= bx bxbx))
			(or (not by) (= by byby)))
		collect d))
    #+end_src

    #+RESULTS:
    : DATA

    #+begin_src lisp :results file 
      (with-plot "n16nh40-custom.png"
	(setup)
	(let ((data (mapcar (lambda (d)
			      (destructuring-bind (n h bw bx by) (first d)
				(list (/ (first (cs-and-ec n h bw)) n) (second d))))
			    (data :bx 2 :bw 4 :h 2.5 :by 3))))
	  (ezplot data 
		  :title "x=bw at nh=40, y=tp"
		  :with '(:points))))
#+end_src

#+RESULTS:
[[file:./img/n16nh40-custom.png]]

** aN^b h^c
 #+begin_src lisp  :exports code
   (fit (lambda (x a b c)
	  (* a
	     (expt (first x) b)
	     (expt (second x) c)))
	'(1 1 1)
	:data *bigdata*)
  #+end_src 

  #+Name:fitparams123
  #+RESULTS:
  |             Parameter |         Confidence +/- |
  | 0.02756792258506322d0 | 0.010111856410228395d0 |
  |   0.812898902606503d0 |  0.08784735948740999d0 |
  |  1.0022181515827586d0 |   0.2064944327324176d0 |
  |             chisq/dof |   3.1219943582387777d0 |
  |                   R^2 |   0.9398470504536163d0 |

  #+begin_src lisp :var params=fitparams123
    (destructuring-bind (a b c) (fit-params params)
      (max-%diff  (lambda (x) (* a (expt (first x) b) (expt (second x) c)))))
 #+end_src 

 #+RESULTS:
 : 34\.85976912117027d0

*** scatter plot 
 #+begin_src lisp  :results silent  :exports code  :var params=fitparams123
  (destructuring-bind (a b c) (fit-params params)
     (scatter-csv (lambda (x) (* a (expt (first x) b) (expt (second x) c)))
		  "scatter123.csv"))
   #+end_src
  
 #+Call: scatterPlot(file="scatter123.csv") :results file :file scatter123.png

 #+RESULTS:
 [[file:scatter123.png]]

** aN^bh^c + d bw + e min(bx,by)
 #+begin_src lisp  :exports code
   (fit (lambda (x a b c d e)
	  (destructuring-bind (n h bw bx by) x 
	    (+ (* a
		  (expt n b)
		  (expt h c))
	       (* d bw)
	       (* e (min bx by)))))
	  '(1 1 1 1 1)
	  :data *bigdata*)
  #+end_src 

  #+Name:fitparams124
  #+RESULTS:
  |              Parameter |         Confidence +/- |
  |  0.05321579033363873d0 | 0.030282906291672802d0 |
  |   0.6669160279735613d0 |  0.12432296114848311d0 |
  |   0.8295520304254036d0 |  0.21516252498794852d0 |
  | -0.01873860956807513d0 | 0.010785779180488668d0 |
  | 0.006540414097982228d0 | 0.014325568799149015d0 |
  |              chisq/dof |    2.577579669964622d0 |
  |                    R^2 |   0.9589968808690665d0 |

  #+begin_src lisp :var params=fitparams124
    (destructuring-bind (a b c d e) (fit-params params)
      (max-%diff  (lambda (x)
	  (destructuring-bind (n h bw bx by) x 
	    (+ (* a
		  (expt n b)
		  (expt h c))
	       (* d bw)
	       (* e (min bx by)))))))
 #+end_src 

 #+RESULTS:
 : 2986\.7427312049003d0

*** scatter plot 
 #+begin_src lisp  :results silent  :exports code  :var params=fitparams124
  (destructuring-bind (a b c d e) (fit-params params)
     (scatter-csv (lambda (x)
	  (destructuring-bind (n h bw bx by) x 
	    (+ (* a
		  (expt n b)
		  (expt h c))
	       (* d bw)
	       (* e (min bx by)))))
		  "scatter124.csv"))
   #+end_src
  
 #+Call: scatterPlot(file="scatter124.csv") :results file :file img/scatter124.png

 #+RESULTS:
 [[file:img/scatter124.png]]

Not much better

** a(Nh)^b/sqrt(d)
d=sqrt(bw * min(bx,by))
 #+begin_src lisp 
   (max-fit-%diff (lambda (x a b)
	  (destructuring-bind (n h bw bx by) x 
	    (/ (* a
		  (expt (* n h) b))
	       (sqrt (* bw (min bx by))))))
	  '(1 1))	  

  #+end_src 

  #+RESULTS:
  | max %diff |      R^2 | Params              |
  | 79.848281 | 0.796836 | (0.117704 0.817729) |

** a(Nh)^b + c* d'^d
d'=sqrt(bw * min(bx,by))
 #+begin_src lisp 
   (max-fit-%diff (lambda (x a b c d)
	  (destructuring-bind (n h bw bx by) x 
	    (+ (* a
		  (expt (* n h) b))
		  (* c (expt (* bw (min bx by)) d)))))
	  '(1 1 1 1))	  
  #+end_src 

  #+RESULTS:
  |  max %diff |      R^2 | Params                                 |
  | 225.616221 | 0.938397 | (0.050271 0.722514 -0.007463 0.653467) |

** a(Nh)^b + c* bw^d
d'=sqrt(bw * min(bx,by))
 #+begin_src lisp 
   (max-fit-%diff (lambda (x a b c d)
	  (destructuring-bind (n h bw bx by) x 
	    (+ (* a
		  (expt (* n h) b))
		  (* c (expt bw d)))))
	  '(1 1 1 1))	  
  #+end_src 

  #+RESULTS:
  | max %diff |      R^2 | Params                                  |
  | 60.749567 | 0.958553 | (0.027307 0.866459 24.332878 -5.027566) |

  Previous Results (for incorrect beam thickness)
  | max %diff |      R^2 | Params                                |
  | 11.926379 | 0.992066 | (0.022204 1.014272 0.010395 0.170944) |

Seems like changing the beam thickness affected only the parameters `c' and `d'
  
T =a Nh + c * bw^d 
  #+begin_src lisp 
  (max-fit-%diff (lambda (x a c d)
	  (destructuring-bind (n h bw bx by) x 
	    (+ (* a
	    (* n h))
		  (* c (expt bw d)))))
		  '(1 1 1))	  
  #+end_src

  #+RESULTS:
  | max %diff |      R^2 | Params                        |
  | 61.589900 | 0.954648 | (0.016211 1.064157 -1.982970) |

  #+begin_src lisp 
  
  #+end_src
** a N^b h^c cw^d
   #+begin_src lisp
     (defun cw (x)
       (first (cs-and-ec (first x) (second x) (third x))))

     (fit (lambda (x a b c d)
	       (* a
		  (expt (first x) b)
		  (expt (second x) c)
		  (expt (cw x) d)))
	     '(1 1 1 1)
	  :data *bigdata*)
   #+end_src

   #+Name: fitparamscw
   #+RESULTS:
   |              Parameter |         Confidence +/- |
   | 0.013223141937445157d0 | 0.005907176485873817d0 |
   |    0.919735151201254d0 |  0.09366610584901972d0 |
   |   1.1353848767340402d0 |  0.21184625702367824d0 |
   |  -0.4658869811903956d0 |   0.1615704937010952d0 |
   |              chisq/dof |   1.4039966051222985d0 |
   |                    R^2 |   0.9878346442086318d0 |

    #+begin_src lisp  :results value   :exports code  :var params=fitparamscw
    (destructuring-bind (a b c d) (fit-params  params)
      (max-%diff (lambda (x)
	       (* a
		  (expt (first x) b)
		  (expt (second x) c)
		  (expt (cw x) d)))))
    #+end_src

    #+RESULTS:
    : 20\.631860299405698d0

     #+begin_src lisp  :results value   :exports code  :var params=fitparamscw
       (destructuring-bind (a b c d) (fit-params params)
	 (fit-check-csv (lambda (x)
		  (* a
		     (expt (first x) b)
		     (expt (second x) c)
		     (expt (cw x) d)))
			(lambda (x)
		  (* a
		     (expt (first x) b)
		     (expt (second x) c)
		     (expt (cw x) d)))
			"fullPlot2.csv"))
    #+end_src

   #+RESULTS:
   : NIL

#+begin_src gnuplot :var x="Nh" y="Fundamental Timeperiod" csv="fullPlot2.csv" :results file :file "img/fullPlot2.png"
     set terminal png 
     set output "img/fullPlot2.png"
     cd "./img/"
     set datafile separator ","
     set terminal png font "Times New Roman, 30pt" size 1500,1100
     set xlabel x
     set ylabel y
     plot csv with point title "data", csv using 1:3 with line title "fit"
   #+end_src

   #+RESULTS:
   [[file:img/fullPlot2.png]]

*** scatter plot 
 #+begin_src lisp  :results silent  :exports code  :var params=fitparamscw
  (destructuring-bind (a b c d) (fit-params params)
     (scatter-csv (lambda (x)
	       (* a
		  (expt (first x) b)
		  (expt (second x) c)
		  (expt (cw x) d)))
		  "scattercw.csv"))
   #+end_src
  
 #+Call: scatterPlot(file="scattercw.csv") :results file :file scattercw.png

 #+RESULTS:
 [[file:scattercw.png]]
  
** NBC 105 
#+begin_src lisp 
  (max-%diff (lambda (x)
	       (destructuring-bind (n h bw bx by) x
		 (* 0.075 (expt (* n h) 3/4)))))

  #+end_src 

  #+RESULTS:
  : 59\.15579464174792d0

* Notes 
+ For lower bay width (~3) T vs H is not exactly linear. but for higher bay widths it is exactly linear.  In all cases linear fit works reasonably well.[[*Conclusion][(.)]]
+ T vs N is linear in both case. [[*Conclusion][(.)]]
+ Timeperiod is power function in N and H (for our range of values) [[file:realthing.org::*Conclusion][Conclusion]]
+ When both bx and by increases the Timeperiod becomes independent of bx by [[file:realthing.org::*Conclusion][Conclusion]]
+ When slightly changing bx and by the curve changed only slightly. Hence we may find a single equation
+ As x increases the time period increases. This is independent of the constant width wc, and the number of stories. [[file:realthing.org::*Lets consider only 2by2 bays buildings][(.)]]
+ which incorporates bay width too when bx,by>20.[[file:realthing.org::*Bay Width for Hight Bx By][Bay Width for Hight Bx By]]
+ at high Nh, timeperiod varies linearly with bay width and min(bx,by) [[*multilinear regression][(.)]]






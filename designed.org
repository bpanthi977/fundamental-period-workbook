* Data 
** Generate 
   Generate data 
  #+begin_src lisp  :results silent :exports both
    (defparameter *bigdata* nil)

    (with-open-file (stream (merge-pathnames "bigdata-typical.csv" *img-path*) :direction :output
								       :if-exists :supersede)
      (let (bigdata)
	(loop for h from 3 to 4 by 0.5 do 
	  (loop for n from 1 to 16 do
	    (loop for bw from 3 to 6 by 0.5 do 
	      (loop for bx from 2 to 5 do
		(loop for by from bx to  5 
		      for exact = (simple-building-ftp* :number-of-storey n
							:height h
							:bays-x bx
							:bays-y by
							:bay-width bw
							:typical t)
		      do 
			 (cl-csv:write-csv-row (list n h bw bx by exact)
					       :stream stream)
			 (push (list (list n h bw bx by) exact) bigdata))))))
	(setf *bigdata* bigdata)))
    #+end_src

** Read
   #+begin_src lisp :exports both
     (let (bigdata)
       (cl-csv:read-csv (merge-pathnames "bigdata-typical.csv" *img-path*)
			:data-map-fn #'(lambda (data &key csv-reader)
					 (declare (ignore csv-reader))
					 (let (( *read-default-float-format* 'double-float))
					   (read-from-string data)))
			:row-fn #'(lambda (row)
				    (push (list (butlast row) (first (last row)))
					  bigdata)))
       (setf *bigdata* (reverse bigdata)))

nil
   #+end_src  

   #+RESULTS:
   : NIL

* Simple Fit
  [[*Simpler: T = a(Nh)^b][Simpler: T = a(Nh)^b]] is the best fit among the following 3. 
** T = a*N^b*h^c 
  #+Name: simpleFit 
  #+begin_src lisp  :exports both
	(max-fit-%diff (lambda (x a b c)
			 (destructuring-bind (n h bw bx by) x
			   (* a
			      (expt n b)
			      (expt h c))))
		       '(1 1 1)
		       :save '/simple-fit)
  #+end_src

  #+RESULTS: simpleFit
  | max %diff |      R^2 |     rmse | Params                       | Covariance                   |
  | 26.502044 | 0.960266 | 0.049727 | (0.025120 0.759599 1.142994) | (0.000094 0.005615 0.069474) |

** Simpler: T = a(Nh)^b
  #+begin_src lisp  :exports both
  (max-fit-%diff (lambda (x a b)
		     (destructuring-bind (n h bw bx by) x
		       (* a
			  (expt (* n h) b)
			  )))
		   '(0.04 0.78)
		   :save '/simpler-fit)
  #+end_src

  #+RESULTS:
  | max %diff |      R^2 |     rmse | Params              | Covariance          |
  | 29.159699 | 0.950908 | 0.055265 | (0.036801 0.788085) | (0.000101 0.005255) |

  The difference in R^2 of simple vs simpler formula is not much. And they explain almost 95% of the variation.
  
  Tweaked coefficients 
  #+begin_src lisp 
  (max-fit-%diff (lambda (x a)
		     (destructuring-bind (n h bw bx by) x
		       (* 0.035
			  (expt (* n h) 0.8)
			  )))
		   '(1)
		   :save '/simpler-fit-tweaked)
  #+end_src

  #+RESULTS:
  | max %diff |      R^2 |     rmse | Params     | Covariance |
  | 28.871608 | 0.950582 | 0.055440 | (1.000000) | (0.000000) |
  #+begin_src lisp :results file  :exports both
  (scatter-plot /simpler-fit-tweaked "tdsimpler-fit-tweaked.png")
  #+end_src

  #+RESULTS:
  [[file:./img/tdsimpler-fit-tweaked.png]]

** Simplest: T = a(N)^b
  #+begin_src lisp  :exports both
    (max-fit-%diff (lambda (x a b)
		     (destructuring-bind (n h bw bx by) x
		       (* a
			  (expt (* n) b)
			  )))
		   '(1 1)
		   :save '/simplest-fit)
  #+end_src

  #+RESULTS:
  | max %diff |      R^2 |     rmse | Params              | Covariance          |
  | 36.321352 | 0.868721 | 0.090374 | (0.106304 0.755588) | (0.000391 0.005680) |

* Plot
Scatter Plot of [[*Simpler: T = a(Nh)^b][Simpler: T = a(Nh)^b]] 
  #+begin_src lisp :results file  :exports both
    (scatter-plot /simpler-fit "tdsimpler-fit.png")
  #+end_src

  #+RESULTS:
  
[[file:./img/tdsimpler-fit.png]]

  However with Nh only, the variation at higher T is very substantial. Hence other parameters must also be playing a great role in T.

* Sensitivity Analysis
  Is it bw or bx,by that play greater role.

  Sensitivity of bw is max for h=4,bx=2,by=2.
  and descreases with decreasing n. 
  #+begin_src lisp :exports both
    (sensitivity :bw (filter-data :n 16 :h 4 :bx 2 :by 2))
  #+end_src

  #+RESULTS:
  : 0\.493205189469148d0

  Sensitivity with bx doesn't change much with bw.
  
  #+begin_src lisp  :exports both
    (sensitivity :bx (filter-data :bw 6 :n 16 :h 4))
  #+end_src

  #+RESULTS:
  : 0\.04465106780108326d0
  

  Hence timeperiod is more sensitive to bay width than with bay counts
** with respect to N, h
   #+begin_src lisp :exports both 
   (sensitivity :n (filter-data :h 4 :bw 3 :bx 5 :by 5))
   #+end_src

   #+RESULTS:
   : 0\.9152304123955828d0

   #+begin_src lisp :exports both 
   (sensitivity :h (filter-data :n 16 :bw 3 :bx 2 :by 2))
   #+end_src

   #+RESULTS:
   : 1\.1670910918086783d0
** Max Variations 
   #+begin_src lisp  :exports both
     (table 4 
       (row "N" "H" "Bs" "Bx" "By" "N and H" "Bx and By")
       (let ((results (loop for p in '(:n :h :bw :bx :by :nh :bxby)
			    collect (multiple-value-list (max-effect p)))))
	 (apply #'row (mapcar #'first results))
	 (apply #'row (mapcar #'second results))))
   #+end_src

   #+RESULTS:
   | N              | H               | Bs              | Bx              | By                   | N and H | Bx and By     |
   | 1.0774         | 0.3501          | 0.3144          | 0.0410          | 0.0421               | 1.0977  | 0.0471        |
   | (4.0000 3 2 5) | (16 4.0000 2 5) | (16 4.0000 2 2) | (16 4.0000 3 5) | (15 4.0000 5.5000 2) | (3 2 5) | (16 3 6.0000) |

* Bay width
  To incorporate bay width in the relation for fundamental time period. Lets see the variation of T with bw.
  #+begin_src lisp :results file :exports both
    (with-plot "tdbw.svg"
      (setup :xlabel "B_s (m)" :ylabel "T (sec)"  :key :off :terminal '(:svg :size |1500,1100| :font "Times New Roman,30"))
      (eazy-gnuplot:gp :set :pointsize 1)
      (loop for n from 2 to 16 by 2 do 
	(eazy-gnuplot:gp :set :label (format nil "n=~d" n)
			      :at (list 3.05 (+ 0.02 (coerce (second (first (filter-data :n n :bx 2 :by 2 :h 4 :bw 3)))
						     'single-float)))))
      (loop for n from 2 to 16 by 2 do

	(ezplot (mapcar (lambda (d)
			  (destructuring-bind (x tp) d
			    (list (third x) tp)))
			(filter-data :n n :bx 2 :by 2 :h 4))
		:title (format nil "n=~d" n)
		:with :linespoint)

	    ))
  #+end_src

  #+RESULTS:
  [[file:./img/tdbw.svg]]

  This shows that the time period decreases with bay width. and the rate of decrease/slope increases for higher N. 

** Simple Bw a(Nh)^b - c(N*bw)
  #+begin_src lisp  :exports both
    (max-fit-%diff (lambda (x a b c)
		     (destructuring-bind (n h bw bx by) x
		       (- (* a
			     (expt (* n h) b))
			  (* c n bw)
			     )))
		   '(1 1 1)
		   :save '/simpler-bw-fit)		   
  #+end_src

  #+RESULTS:
  | max %diff |      R^2 |     rmse | Params                       | Covariance                   |
  | 27.669310 | 0.990159 | 0.024748 | (0.044526 0.817145 0.004580) | (0.000093 0.003071 0.000003) |

  #+begin_src lisp :results file  :exports both
    (scatter-plot /simpler-bw-fit "tdsimpler-bw-fit.png"
		  (filter-data ))
  #+end_src

  #+Name: simpler-bw
  #+RESULTS: 
  [[file:./img/tdsimpler-bw-fit.png]]

  #+begin_src lisp  :exports both
    (max-fit-%diff (lambda (x a )
		       (destructuring-bind (n h bw bx by) x
			 (- (* 0.045
			       (expt (* n h) 0.82))
			    (* 0.005 n bw)
			       )))
		     '(1)
		     :save '/simpler-bw-fit-tweaked)
  #+end_src

  #+RESULTS:
  | max %diff |      R^2 |     rmse | Params     | Covariance |
  | 28.110318 | 0.989779 | 0.025213 | (1.000000) | (0.000000) |
 
#+begin_src lisp :results file  :exports both
  (scatter-plot /simpler-bw-fit-tweaked "tdsimpler-bw-fit-tweaked.png" *bigdata* "T=0.045H^{0.82} - 0.005NB_s (sec)" "Proposed Equation")
  #+end_src

  #+RESULTS:
  [[file:./img/tdsimpler-bw-fit-tweaked.png]]

* Bx,By
  #+begin_src lisp :results file :exports both
    (with-plot "tdbx.png"
      (setup :xlabel "bx" :ylabel "tp")
      (loop for n from 2 to 12 by 2 do
	(ezplot (mapcar (lambda (d)
			  (destructuring-bind (x tp) d
			    (list (fourth x) tp)))
			(filter-data :n n :bw 6 :by 5 :h 4))
		:title (format nil "n=~d" n))))
  #+end_src

  #+RESULTS:
  [[file:./img/tdbx.png]]

  This shows that T is almost constant with bx. Which was also indicated by smaller sensitivity of tp with bx.


 :exports both
# Local Variables:
# org-export-babel-evaluate: nil
# End:
* Comparision with NBC 
  #+begin_src lisp :results file  :exports both
    (defun NBC (x)
      (destructuring-bind (n h . _) x
	(* 0.06 (expt (* n h) 3/4))))

    (o:scatter-plot #'NBC "typical-design-NCB.png" *bigdata* "T=0.06H^{0.75} (sec)" "NBC")
  #+end_src

  #+RESULTS:
  [[file:./img/typical-design-NCB.png]]

  #+begin_src lisp :results file  :exports both
    (let ((heights (loop for h from 0 to 100 by 4 collect h)))
      (o:with-plot "formula-comparisions.svg"
	(o:setup :xlabel "H (m)" :ylabel "T (s)" :key '(:top :left) :terminal "svg")
	(o:ezplot (loop for h in heights
			collect (list h (* 0.0466 (expt h 0.9))))
		  :title "Goel and Chopra (1997)"
		  :dashtype 0)
	(o:ezplot (loop for h in heights
			collect (list h (* 0.06 (expt h 3/4))))
		  :title "Equation 1 (NBC)"
		  :dashtype 1)
	(o:ezplot (loop for h in heights
			collect (list h (* 0.035 (expt h 0.8))))
		  :title "Equation 2"
		  :dashtype 2)
	(o:ezplot (loop for h in heights
			collect (list h (- (* 0.045 (expt h 0.82))
					   (* 0.005 (/ h 4) 4.5))))
		  :title "Equation 4 (B_s=4.5)"
		  :dashtype 3)
	(o:ezplot (loop for h in heights
			collect (list h (- (* 0.045 (expt h 0.82))
					   (* 0.005 (/ h 4) 6))))
		  :title "Equation 4 (B_s=6)"
		  :dashtype 4)
	(o:ezplot (loop for h in heights
			collect (list h (* 0.0249 (expt h 0.804))))
		  :title "Hong and Hwang (2000)"
		  :dashtype 5)


	))
  #+end_src

  #+RESULTS:
  [[file:./img/formula-comparisions.svg]]
* Random 

  #+begin_src lisp :results file  :exports both
    (fit-plot /simpler-fit #'/Nh "tdSimplerfitPlot.svg" *bigdata* "H (m)" "T (sec)")
  #+end_src

  #+RESULTS:
  [[file:./img/tdSimplerfitPlot.svg]]

  
  #+begin_src lisp :results file  :exports both
	(defun fit-multiplot-plot (fit-func x-axis &optional (data *bigdata*) title)
	  (let ((x-tp-fit (sort (loop 
				  for (x tp) in data 
				  collect (list (funcall x-axis x) tp (funcall fit-func x)))
				#'< :key #'first)))
	    (when title
	      (eazy-gnuplot:gp :set :title title))
	    (eazy-gnuplot:gp :plot '|'-'| :using '(1 2) :title "" :with '(:lines)
			     '|,| '|''| :using '(1 2) :title "" :with '(:points))
	    (loop for (x tp fit) in x-tp-fit do
	      (format t "~& ~,8f ~,8f" x fit))
	    (format t "~&e")
	    (loop for (x tp fit) in x-tp-fit do
	      (format t "~& ~,8f ~,8f" x tp))
	    (format t "~&e")))

	(defun multiplot (output)
	  (eazy-gnuplot:with-plots (*standard-output* :debug t)
	    (eazy-gnuplot:gp-setup :output output :terminal '(:tif :size :|1500,1100| :font "Times New Roman, 30pt")
				   :title ""
				   :multiplot (list "layout 2,2 rowsfirst")
    :yrange '(0 1.2)
:xlabel "H (m)"
:ylabel "T (sec)")
	    (fit-multiplot-plot /simpler-bw-fit-tweaked #'/nh (filter-data :h 4 :bw 3) "B_s = 3")
	    (fit-multiplot-plot /simpler-bw-fit-tweaked #'/nh (filter-data :h 4 :bw 4) "B_s = 4")
	    (fit-multiplot-plot /simpler-bw-fit-tweaked #'/nh (filter-data :h 4 :bw 5) "B_s = 5")
	    (fit-multiplot-plot /simpler-bw-fit-tweaked #'/nh (filter-data :h 4 :bw 6) "B_s = 6")

	    (eazy-gnuplot:gp :unset 'multiplot))
	  output)

	(multiplot (merge-pathnames "multiplot.tiff" *img-path*))
	"./img/multiplot.tiff"
  #+end_src

  #+RESULTS:
  [[file:./img/multiplot.svg]]



W = 1floor ko wt square area ma  + Live load + Dead Load 

P = W*(N-1) + Slab (same area ma) (No dead load or live load)
Pu = P * 1.5 

N = 7, 12, 16
BW = 3,5,7 

fck = 25 
fy = 500 
As = 1.5% Ag 
=> Ag -> round up.

formula from  [[/mnt/Data/Documents/Civil Engineering/Books and Standards/Indian Codes/IS 456/IS 456-2000.pdf::72][is 456]]


* Code for calculating Pu
  load moi.lisp
  #+begin_src lisp
    (defparameter *sg* (make-structural-geometry)) ;; all default dimensions
    (defparameter *fck* 25)
    (defparameter *%steel* 0.015)

    (defun P (N h bw cw)
      (with-slots (beam-height slab-thickness wall-thickness floor-loads) *sg*
	(let*
	    ((beam-width 0.3) ;; or beam-width = cw
	     (wall-length (/ (- bw cw) 2))
	     (wall   (* 4 wall-length wall-thickness  (- h beam-height) 20))
	     (beam   (* 4 wall-length beam-width      (- beam-height slab-thickness)          25))
	     (slab   (*   bw          bw              slab-thickness       25))
	     (column (*   cw          cw              (- h slab-thickness) 25))
	     (loads  (* floor-loads (- (* bw bw) (* cw cw) (* 4 wall-length wall-thickness)))))
	  (+ (* (1- n)
		(+ wall beam slab column loads))
	     slab))))

    (defun Pu (N h bw cw)
      "Return Pu in (kN)"
      (* 1.5 (P N h bw cw)))

    (defun A (Pu &optional (fck *fck*) (fy 500))
      "Returns Ac in mm"
      (/ (* 1000 Pu)
	 (+ (* 0.4 fck (- 1 *%steel*))
	    (* .67 fy *%steel*))))

    (defun column-width (N h bw cw)
      "Gives new estimate of cw (in m)"
      (/ (sqrt (A (Pu N h bw cw)))
	 1000))

    (defun converge (N h bw &optional (cw 0.3) (tolerance 0.001))
      (let ((new-cw (column-width N h bw cw)))
	(if (< (abs (- cw new-cw)) tolerance)
	    new-cw
	    (converge N h bw new-cw))))

    (defun round-up (cw)
      (max 0.3 (/ (ceiling (* cw 20))
		  20)))

  #+end_src

  #+RESULTS:
  : ROUND-UP

* Sample Calculation
  Take N=5, h = 3 , bay width bw =4 and column-width cw = 0.3
  #+begin_src lisp :results output
    (with-reporting :default
      (P 5 3 4 0.3))
  #+end_src

  #+RESULTS:
  | (BEAM-WIDTH)  | = 0.3 =                                                                    |                  0.3 |
  | (WALL-LENGTH) | = (/ (- BW CW) 2) =                                                        |                 1.85 |
  | (WALL)        | = (* 4 WALL-LENGTH WALL-THICKNESS (- H BEAM-HEIGHT) 20) =                  |               85.1d0 |
  | (BEAM)        | = (* 4 WALL-LENGTH BEAM-WIDTH (- BEAM-HEIGHT SLAB-THICKNESS) 25) =         | 19.425001335144042d0 |
  | (SLAB)        | = (* BW BW SLAB-THICKNESS 25) =                                            |               60.0d0 |
  | (COLUMN)      | = (* CW CW (- H SLAB-THICKNESS) 25) =                                      |  6.412500254809856d0 |
  | (LOADS)       | = (* FLOOR-LOADS (- (* BW BW) (* CW CW) (* 4 WALL-LENGTH WALL-THICKNESS))) | = 49.7279993891716d0 |
  | Finally P     | 942.662                                                                    |                      |

  This P is in kN
  now assuming in IS 456 formula Pu is in Newton and A is in mmq

  #+begin_src lisp  :exports both
    (column-width 5 3 4 0.3)
  #+end_src

  #+RESULTS:
  : 0\.3083153472276686d0

  Now this gives new estimate of 0.313 which can then be used to get new estimate and so on. And finally
  #+begin_src lisp :exports both 
    (converge 5 3 4 0.3)
  #+end_src

  #+RESULTS:
  : 0\.30839460699500837d0

* Table
  #+begin_src lisp :exports both 
    (table 3
      (row "N" "fck" "%steel" "h" "bw" "Cw" "Cw (rounded)" "Pu" )
      (loop
	for N in '(3 7 12 16)
	for *fck* in '(25 25 30 30)
	for *%steel* in '(0.03 0.03 0.04 0.04) do 
	  (loop for bw in '(3 5 7) do 
	    (loop 
	      for h in '(2.5 3 4) 
	      for cw = (column-width n h bw 0.3)
	      for rounded-cw = (coerce (round-up cw) 'single-float)
	      for Pu = (Pu n h bw rounded-cw) do 
		(row n *fck* *%steel* h bw cw rounded-cw  Pu)))))


  #+end_src   

  #+Name: column-size-and-fck
  #+RESULTS:
  |      N |    fck | %steel |     h |    bw |    Cw | Cw (rounded) |        Pu |
  |  3.000 | 25.000 |  0.030 | 2.500 | 3.000 | 0.149 |        0.300 |   439.816 |
  |  3.000 | 25.000 |  0.030 | 3.000 | 3.000 | 0.156 |        0.300 |   480.451 |
  |  3.000 | 25.000 |  0.030 | 4.000 | 3.000 | 0.169 |        0.300 |   561.721 |
  |  3.000 | 25.000 |  0.030 | 2.500 | 5.000 | 0.226 |        0.300 |  1010.056 |
  |  3.000 | 25.000 |  0.030 | 3.000 | 5.000 | 0.234 |        0.300 |  1078.292 |
  |  3.000 | 25.000 |  0.030 | 4.000 | 5.000 | 0.248 |        0.300 |  1214.762 |
  |  3.000 | 25.000 |  0.030 | 2.500 | 7.000 | 0.302 |        0.350 |  1801.377 |
  |  3.000 | 25.000 |  0.030 | 3.000 | 7.000 | 0.310 |        0.350 |  1897.741 |
  |  3.000 | 25.000 |  0.030 | 4.000 | 7.000 | 0.325 |        0.350 |  2090.469 |
  |  7.000 | 25.000 |  0.030 | 2.500 | 3.000 | 0.248 |        0.300 |  1218.199 |
  |  7.000 | 25.000 |  0.030 | 3.000 | 3.000 | 0.260 |        0.300 |  1340.104 |
  |  7.000 | 25.000 |  0.030 | 4.000 | 3.000 | 0.283 |        0.300 |  1583.914 |
  |  7.000 | 25.000 |  0.030 | 2.500 | 5.000 | 0.373 |        0.400 |  2763.891 |
  |  7.000 | 25.000 |  0.030 | 3.000 | 5.000 | 0.387 |        0.400 |  2972.331 |
  |  7.000 | 25.000 |  0.030 | 4.000 | 5.000 | 0.413 |        0.450 |  3408.560 |
  |  7.000 | 25.000 |  0.030 | 2.500 | 7.000 | 0.495 |        0.500 |  4886.528 |
  |  7.000 | 25.000 |  0.030 | 3.000 | 7.000 | 0.510 |        0.550 |  5203.776 |
  |  7.000 | 25.000 |  0.030 | 4.000 | 7.000 | 0.538 |        0.550 |  5805.899 |
  | 12.000 | 30.000 |  0.040 | 2.500 | 3.000 | 0.297 |        0.300 |  2191.178 |
  | 12.000 | 30.000 |  0.040 | 3.000 | 3.000 | 0.311 |        0.350 |  2429.024 |
  | 12.000 | 30.000 |  0.040 | 4.000 | 3.000 | 0.339 |        0.350 |  2881.825 |
  | 12.000 | 30.000 |  0.040 | 2.500 | 5.000 | 0.444 |        0.450 |  4970.507 |
  | 12.000 | 30.000 |  0.040 | 3.000 | 5.000 | 0.461 |        0.500 |  5388.739 |
  | 12.000 | 30.000 |  0.040 | 4.000 | 5.000 | 0.493 |        0.500 |  6174.964 |
  | 12.000 | 30.000 |  0.040 | 2.500 | 7.000 | 0.589 |        0.600 |  8792.859 |
  | 12.000 | 30.000 |  0.040 | 3.000 | 7.000 | 0.607 |        0.650 |  9400.758 |
  | 12.000 | 30.000 |  0.040 | 4.000 | 7.000 | 0.641 |        0.650 | 10538.969 |
  | 16.000 | 30.000 |  0.040 | 2.500 | 3.000 | 0.345 |        0.350 |  2985.168 |
  | 16.000 | 30.000 |  0.040 | 3.000 | 3.000 | 0.362 |        0.400 |  3321.090 |
  | 16.000 | 30.000 |  0.040 | 4.000 | 3.000 | 0.395 |        0.400 |  3949.290 |
  | 16.000 | 30.000 |  0.040 | 2.500 | 5.000 | 0.517 |        0.550 |  6801.550 |
  | 16.000 | 30.000 |  0.040 | 3.000 | 5.000 | 0.537 |        0.550 |  7347.203 |
  | 16.000 | 30.000 |  0.040 | 4.000 | 5.000 | 0.574 |        0.600 |  8518.185 |
  | 16.000 | 30.000 |  0.040 | 2.500 | 7.000 | 0.685 |        0.700 | 12002.051 |
  | 16.000 | 30.000 |  0.040 | 3.000 | 7.000 | 0.706 |        0.750 | 12872.461 |
  | 16.000 | 30.000 |  0.040 | 4.000 | 7.000 | 0.746 |        0.750 | 14482.617 |

* Importing 
  #+begin_src lisp :var data=column-size-and-fck :colnames true 
    (loop for (n0 fck %steel h bw cw% cw pu) in data
	  for Ec = (Ec% fck) do
	    (loop for n in (cdr (find n0 '((3 . (1 2 3))
					   (7 . (4 5 6 7))
					   (12 . (8 9 10 11 12))
					   (16 . (13 14 15 16)))
				      :key #'car
				      :test #'=)) do
					(setf (cs-and-Ec n h bw) (list cw Ec))))
  #+end_src

  #+RESULTS:
  : NIL



* Table 2
  #+begin_src lisp :exports both 
    (table 3
      (row "N" "fck" "%steel" "h" "bw" "Cw" "Cw (rounded)" "Pu" )
      (loop
	for N in '(3 7 12 16)
	for *fck* in '(25 25 30 30)
	for *%steel* in '(0.03 0.03 0.04 0.04) do 
	  (loop for bw in '(3 3.5 4 4.5 5 5.5 6 6.5 7)
		with h = 4 
		for cw = (column-width n h bw 0.3)
		for rounded-cw = (coerce (round-up cw) 'single-float)
		for Pu = (Pu n h bw rounded-cw) do 
		  (row n *fck* *%steel* h bw cw rounded-cw  Pu))))


  #+end_src   

  #+RESULTS:
  |      N |    fck | %steel |     h |    bw |    Cw | Cw (rounded) |        Pu |
  |  3.000 | 25.000 |  0.030 | 4.000 | 3.000 | 0.169 |        0.300 |   561.721 |
  |  3.000 | 25.000 |  0.030 | 4.000 | 3.500 | 0.189 |        0.300 |   704.450 |
  |  3.000 | 25.000 |  0.030 | 4.000 | 4.000 | 0.209 |        0.300 |   860.867 |
  |  3.000 | 25.000 |  0.030 | 4.000 | 4.500 | 0.228 |        0.300 |  1030.970 |
  |  3.000 | 25.000 |  0.030 | 4.000 | 5.000 | 0.248 |        0.300 |  1214.762 |
  |  3.000 | 25.000 |  0.030 | 4.000 | 5.500 | 0.267 |        0.300 |  1412.240 |
  |  3.000 | 25.000 |  0.030 | 4.000 | 6.000 | 0.287 |        0.300 |  1623.407 |
  |  3.000 | 25.000 |  0.030 | 4.000 | 6.500 | 0.306 |        0.350 |  1851.927 |
  |  3.000 | 25.000 |  0.030 | 4.000 | 7.000 | 0.325 |        0.350 |  2090.469 |
  |  7.000 | 25.000 |  0.030 | 4.000 | 3.000 | 0.283 |        0.300 |  1583.914 |
  |  7.000 | 25.000 |  0.030 | 4.000 | 3.500 | 0.316 |        0.350 |  1986.540 |
  |  7.000 | 25.000 |  0.030 | 4.000 | 4.000 | 0.349 |        0.350 |  2413.601 |
  |  7.000 | 25.000 |  0.030 | 4.000 | 4.500 | 0.381 |        0.400 |  2891.275 |
  |  7.000 | 25.000 |  0.030 | 4.000 | 5.000 | 0.413 |        0.450 |  3408.560 |
  |  7.000 | 25.000 |  0.030 | 4.000 | 5.500 | 0.444 |        0.450 |  3941.934 |
  |  7.000 | 25.000 |  0.030 | 4.000 | 6.000 | 0.475 |        0.500 |  4534.267 |
  |  7.000 | 25.000 |  0.030 | 4.000 | 6.500 | 0.507 |        0.550 |  5166.213 |
  |  7.000 | 25.000 |  0.030 | 4.000 | 7.000 | 0.538 |        0.550 |  5805.899 |
  | 12.000 | 30.000 |  0.040 | 4.000 | 3.000 | 0.339 |        0.350 |  2881.825 |
  | 12.000 | 30.000 |  0.040 | 4.000 | 3.500 | 0.378 |        0.400 |  3612.389 |
  | 12.000 | 30.000 |  0.040 | 4.000 | 4.000 | 0.417 |        0.450 |  4413.229 |
  | 12.000 | 30.000 |  0.040 | 4.000 | 4.500 | 0.455 |        0.500 |  5284.346 |
  | 12.000 | 30.000 |  0.040 | 4.000 | 5.000 | 0.493 |        0.500 |  6174.964 |
  | 12.000 | 30.000 |  0.040 | 4.000 | 5.500 | 0.530 |        0.550 |  7178.983 |
  | 12.000 | 30.000 |  0.040 | 4.000 | 6.000 | 0.567 |        0.600 |  8253.279 |
  | 12.000 | 30.000 |  0.040 | 4.000 | 6.500 | 0.604 |        0.650 |  9397.852 |
  | 12.000 | 30.000 |  0.040 | 4.000 | 7.000 | 0.641 |        0.650 | 10538.969 |
  | 16.000 | 30.000 |  0.040 | 4.000 | 3.000 | 0.395 |        0.400 |  3949.290 |
  | 16.000 | 30.000 |  0.040 | 4.000 | 3.500 | 0.441 |        0.450 |  4949.300 |
  | 16.000 | 30.000 |  0.040 | 4.000 | 4.000 | 0.485 |        0.500 |  6044.119 |
  | 16.000 | 30.000 |  0.040 | 4.000 | 4.500 | 0.530 |        0.550 |  7233.747 |
  | 16.000 | 30.000 |  0.040 | 4.000 | 5.000 | 0.574 |        0.600 |  8518.185 |
  | 16.000 | 30.000 |  0.040 | 4.000 | 5.500 | 0.617 |        0.650 |  9897.432 |
  | 16.000 | 30.000 |  0.040 | 4.000 | 6.000 | 0.660 |        0.700 | 11371.489 |
  | 16.000 | 30.000 |  0.040 | 4.000 | 6.500 | 0.703 |        0.750 | 12940.355 |
  | 16.000 | 30.000 |  0.040 | 4.000 | 7.000 | 0.746 |        0.750 | 14482.617 |

** Grid 
  #+begin_src lisp :exports both 
    (table 3
      (apply #'row  "N / bw->>" (loop for bw from 3 to 7 by 0.5 collect bw))
      (loop
	for N from 1 to 16 
	for *fck* = (if (> N 7) 30 25) 
	for *%steel* = (if (> N 7) 0.04 0.03) do
	  (apply #'row  N
		 (loop for bw in '(3 3.5 4 4.5 5 5.5 6 6.5 7)
		       with h = 4 
		       for cw = (column-width n h bw 0.3)
		       for rounded-cw = (coerce (round-up cw) 'single-float)
		       for Pu = (Pu n h bw rounded-cw)
		       collect (list cw rounded-cw)))))




  #+end_src   

  #+Name: column-sizes 
  #+RESULTS:
  | N / bw->> | 3.000         | 3.500         | 4.000         | 4.500         | 5.000         | 5.500         | 6.000         | 6.500         | 7.000         |
  |     1.000 | (0.051 0.300) | (0.059 0.300) | (0.068 0.300) | (0.076 0.300) | (0.084 0.300) | (0.093 0.300) | (0.101 0.300) | (0.110 0.300) | (0.118 0.300) |
  |     2.000 | (0.125 0.300) | (0.140 0.300) | (0.155 0.300) | (0.170 0.300) | (0.185 0.300) | (0.200 0.300) | (0.215 0.300) | (0.230 0.300) | (0.245 0.300) |
  |     3.000 | (0.169 0.300) | (0.189 0.300) | (0.209 0.300) | (0.228 0.300) | (0.248 0.300) | (0.267 0.300) | (0.287 0.300) | (0.306 0.350) | (0.325 0.350) |
  |     4.000 | (0.203 0.300) | (0.228 0.300) | (0.251 0.300) | (0.275 0.300) | (0.298 0.300) | (0.321 0.350) | (0.344 0.350) | (0.367 0.400) | (0.389 0.400) |
  |     5.000 | (0.233 0.300) | (0.260 0.300) | (0.287 0.300) | (0.314 0.350) | (0.340 0.350) | (0.367 0.400) | (0.393 0.400) | (0.418 0.450) | (0.444 0.450) |
  |     6.000 | (0.259 0.300) | (0.290 0.300) | (0.320 0.350) | (0.349 0.350) | (0.378 0.400) | (0.407 0.450) | (0.436 0.450) | (0.465 0.500) | (0.493 0.500) |
  |     7.000 | (0.283 0.300) | (0.316 0.350) | (0.349 0.350) | (0.381 0.400) | (0.413 0.450) | (0.444 0.450) | (0.475 0.500) | (0.507 0.550) | (0.538 0.550) |
  |     8.000 | (0.272 0.300) | (0.303 0.350) | (0.334 0.350) | (0.365 0.400) | (0.396 0.400) | (0.426 0.450) | (0.456 0.500) | (0.486 0.500) | (0.515 0.550) |
  |     9.000 | (0.290 0.300) | (0.324 0.350) | (0.357 0.400) | (0.390 0.400) | (0.422 0.450) | (0.454 0.500) | (0.486 0.500) | (0.518 0.550) | (0.549 0.550) |
  |    10.000 | (0.307 0.350) | (0.343 0.350) | (0.378 0.400) | (0.413 0.450) | (0.447 0.450) | (0.481 0.500) | (0.515 0.550) | (0.548 0.550) | (0.581 0.600) |
  |    11.000 | (0.323 0.350) | (0.361 0.400) | (0.398 0.400) | (0.434 0.450) | (0.470 0.500) | (0.506 0.550) | (0.541 0.550) | (0.577 0.600) | (0.612 0.650) |
  |    12.000 | (0.339 0.350) | (0.378 0.400) | (0.417 0.450) | (0.455 0.500) | (0.493 0.500) | (0.530 0.550) | (0.567 0.600) | (0.604 0.650) | (0.641 0.650) |
  |    13.000 | (0.354 0.400) | (0.395 0.400) | (0.435 0.450) | (0.475 0.500) | (0.514 0.550) | (0.553 0.600) | (0.592 0.600) | (0.630 0.650) | (0.669 0.700) |
  |    14.000 | (0.368 0.400) | (0.411 0.450) | (0.452 0.500) | (0.494 0.500) | (0.535 0.550) | (0.575 0.600) | (0.615 0.650) | (0.655 0.700) | (0.695 0.700) |
  |    15.000 | (0.382 0.400) | (0.426 0.450) | (0.469 0.500) | (0.512 0.550) | (0.554 0.600) | (0.596 0.600) | (0.638 0.650) | (0.680 0.700) | (0.721 0.750) |
  |    16.000 | (0.395 0.400) | (0.441 0.450) | (0.485 0.500) | (0.530 0.550) | (0.574 0.600) | (0.617 0.650) | (0.660 0.700) | (0.703 0.750) | (0.746 0.750) |

*** Only final sizes
    #+begin_src lisp :var data=column-sizes :exports both :colnames true
      (loop for (N . s) in data 
	    collect (cons N  (loop for val  in s
			     for (cs cs-round) = (read-from-string val)
				   collect cs-round)))
    #+end_src


    #+RESULTS:
    | N / bw->> |  3.0 |  3.5 |  4.0 |  4.5 |  5.0 |  5.5 |  6.0 |  6.5 |  7.0 |
    |-----------+------+------+------+------+------+------+------+------+------|
    |       1.0 |  0.3 |  0.3 |  0.3 |  0.3 |  0.3 |  0.3 |  0.3 |  0.3 |  0.3 |
    |       2.0 |  0.3 |  0.3 |  0.3 |  0.3 |  0.3 |  0.3 |  0.3 |  0.3 |  0.3 |
    |       3.0 |  0.3 |  0.3 |  0.3 |  0.3 |  0.3 |  0.3 |  0.3 | 0.35 | 0.35 |
    |       4.0 |  0.3 |  0.3 |  0.3 |  0.3 |  0.3 | 0.35 | 0.35 |  0.4 |  0.4 |
    |       5.0 |  0.3 |  0.3 |  0.3 | 0.35 | 0.35 |  0.4 |  0.4 | 0.45 | 0.45 |
    |       6.0 |  0.3 |  0.3 | 0.35 | 0.35 |  0.4 | 0.45 | 0.45 |  0.5 |  0.5 |
    |       7.0 |  0.3 | 0.35 | 0.35 |  0.4 | 0.45 | 0.45 |  0.5 | 0.55 | 0.55 |
    |       8.0 |  0.3 | 0.35 | 0.35 |  0.4 |  0.4 | 0.45 |  0.5 |  0.5 | 0.55 |
    |       9.0 |  0.3 | 0.35 |  0.4 |  0.4 | 0.45 |  0.5 |  0.5 | 0.55 | 0.55 |
    |      10.0 | 0.35 | 0.35 |  0.4 | 0.45 | 0.45 |  0.5 | 0.55 | 0.55 |  0.6 |
    |      11.0 | 0.35 |  0.4 |  0.4 | 0.45 |  0.5 | 0.55 | 0.55 |  0.6 | 0.65 |
    |      12.0 | 0.35 |  0.4 | 0.45 |  0.5 |  0.5 | 0.55 |  0.6 | 0.65 | 0.65 |
    |      13.0 |  0.4 |  0.4 | 0.45 |  0.5 | 0.55 |  0.6 |  0.6 | 0.65 |  0.7 |
    |      14.0 |  0.4 | 0.45 |  0.5 |  0.5 | 0.55 |  0.6 | 0.65 |  0.7 |  0.7 |
    |      15.0 |  0.4 | 0.45 |  0.5 | 0.55 |  0.6 |  0.6 | 0.65 |  0.7 | 0.75 |
    |      16.0 |  0.4 | 0.45 |  0.5 | 0.55 |  0.6 | 0.65 |  0.7 | 0.75 | 0.75 |
*** Importing 2
  #+begin_src lisp 
    (loop
      for N from 1 to 16 
      for *fck* = (if (> N 7) 30 25) 
      for *%steel* = (if (> N 7) 0.04 0.03) do
	(loop for bw from 3 to 7 by 0.5 
	      with h = 4 
	      for cw = (column-width n h bw 0.3)
	      for rounded-cw = (coerce (round-up cw) 'single-float)
	      for Ec = (Ec% *fck*) do 
	      (setf (cs-and-ec n h bw) (list rounded-cw Ec))))

    ,*column-sizes-and-ecs*
  #+end_src

  #+RESULTS:
  : #<HASH-TABLE :TEST EQUAL :COUNT 144 {100944B473}>

